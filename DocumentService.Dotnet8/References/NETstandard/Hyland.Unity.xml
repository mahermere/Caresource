<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hyland.Unity</name>
    </assembly>
    <members>
        <member name="T:Hyland.Unity.EditableUserProperties">
            <summary>This Type is used as a container for properties that can be changed on a User.</summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.EmailAddress">
            <summary>User's EmailAddress</summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.NamedClientLicense">
            <summary>
                Set true to assign a Named Client License to the user.  Set false to remove a Named Client
                License form the user.  Set Null (the default value) for no action to be performed in regards
                to the Named Client License.
            </summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.NamedWorkflowLicense">
            <summary>
                Set true to assign a Named Workflow License to the user.  Set false to remove a Named
                Workflow License from the user.  Set null (the default value) for no action to be performed in
                regards to the Named Workflow License.
            </summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.NamedWorkviewLicense">
            <summary>
                Set true to assign a Named Workview License to the user.  Set false to remove a Named
                Workview License from the user.  Set null (the default value) for no action to be performed in
                regards to the Named Workview License.
            </summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.Password">
            <summary>User's Password</summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.ChangePasswordAtLogin">
            <summary>
            Set to true to require user to change password at next login.
            </summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.PrimaryUserGroup">
            <summary>
                User's PrimaryUserGroup.
                Do not use with RemovePrimaryUserGroup.
            </summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.RealName">
            <summary>User's RealName</summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.RemovePrimaryUserGroup">
            <summary>
                Set to true if the user's PrimaryUserGroup should be removed.
                Do not use with PrimaryUserGroup.
            </summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.ThrowExceptionOnNamedLicenseNotAvailable">
            <summary>
                Specifies if a <see cref="T:Hyland.Unity.NamedLicenseNotAvailableException" /> should be thrown if a
                Named License is specified but not available.
            </summary>
        </member>
        <member name="P:Hyland.Unity.EditableUserProperties.UserName">
            <summary>User's Name</summary>
        </member>
        <member name="T:Hyland.Unity.NewUserGroupProperties">
            <summary>
                Properties for new user groups.  TemplateUserGroup and Name are required. This class is to
                be used as a container of properties for a new UserGroup passed to the CreateUserGroup()
                method. An instance of this class can be created from the CreateNewUserGroupProperties() method
                on an AdministrationService instance.
            </summary>
        </member>
        <member name="P:Hyland.Unity.NewUserGroupProperties.Name">
            <summary>The name to assign to the new UserGroup.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserGroupProperties.TemplateUserGroup">
            <summary>The existing UserGroup to be used as a template to create the new UserGroup.</summary>
        </member>
        <member name="M:Hyland.Unity.NewUserGroupProperties.#ctor(Hyland.Unity.UserGroup,System.String)">
            <summary>
                Constructs a NewUserGroupProperties object. A template UserGroup and new UserGroup name
                are required to create a new UserGroup.
            </summary>
            <param name="templateUserGroup">Existing UserGroup template</param>
            <param name="newUserGroupName">Name for the new UserGroup</param>
        </member>
        <member name="T:Hyland.Unity.NewUserProperties">
            <summary>
                Properties for new Users. This class is to be used as a container of properties
                for a new user passed to the CreateUser() method. An instance of this class can be
                created from the CreateNewUserProperties() method, which requires a username.
                This method is accessible from an AdministrationService instance.
            </summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.AssignNamedClientLicense">
            <summary>Optional.  Set this property true to assign a Named Client License to the new user.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.AssignNamedWorkflowLicense">
            <summary>Optional.  Set this property true to assign a Named Workflow License to the new user.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.AssignNamedWorkviewLicense">
            <summary>Optional.  Set this property true to assign a Named Workview License to the new user.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.AutoDisplayNum">
            <summary>Optional.  Auto Display Number to assign to a new user.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.EmailAddress">
            <summary>Optional. EmailAddress to assign to a new user.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.PrimaryUserGroup">
            <summary>
                Optional. The primary UserGroup to assign to a new user.  If this group is not included
                UserGroups it will be added.
            </summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.RealName">
            <summary>Optional.  RealName to assign to a new user.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.TemplateUser">
            <summary>Optional. Specifies the template to base the new user on.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.ThrowExceptionOnNamedLicenseNotAvailable">
            <summary>
                Specifies if a <see cref="T:Hyland.Unity.NamedLicenseNotAvailableException" /> should be thrown is a
                Named License is specified but not available.
            </summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.UserGroups">
            <summary>Optional. A collection of UserGroups to add a new user to.</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.Password">
            <summary>The Password to assign to a new user</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.UserName">
            <summary>The UserName to assign to a new user</summary>
        </member>
        <member name="P:Hyland.Unity.NewUserProperties.IntegratedSecurityLogonOnly">
            <summary>Specifies if a new user will be configured for Integrated Security Logon Only</summary>
        </member>
        <member name="M:Hyland.Unity.NewUserProperties.#ctor(System.String,System.String)">
            <summary>
                Constructs a NewUserProperties object.  A username and password are required to create a
                new user.
            </summary>
            <param name="userName">UserName for the new User.  29 characters maximum</param>
            <param name="password">Password for the new User.</param>
        </member>
        <member name="T:Hyland.Unity.UserAdministration">
            <summary>User Administration.  Used for creating/updating User Configuration Data</summary>
        </member>
        <member name="T:Hyland.Unity.UserAdministration.LicenseToggle">
            <summary>
                A value to indicate whether a License should be assigned or removed when editing a User's
                properties.
            </summary>
        </member>
        <member name="F:Hyland.Unity.UserAdministration.LicenseToggle.Assign">
            <summary>Assign the License</summary>
        </member>
        <member name="F:Hyland.Unity.UserAdministration.LicenseToggle.Remove">
            <summary>Remove the License</summary>
        </member>
        <member name="T:Hyland.Unity.UserAdministration.NamedUserLicense">
            <summary>
                The Named Licenses that are available to assign or remove from Users.  Note: This
                enumeration is not intended to be operated as a flag field.
            </summary>
        </member>
        <member name="F:Hyland.Unity.UserAdministration.NamedUserLicense.NamedUser">
            <summary>Named User Client License</summary>
        </member>
        <member name="F:Hyland.Unity.UserAdministration.NamedUserLicense.NamedWorkflowUser">
            <summary>Named Workflow User</summary>
        </member>
        <member name="F:Hyland.Unity.UserAdministration.NamedUserLicense.NamedWorkViewUser">
            <summary>Named Workview User</summary>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.AddSecurityKeyword(Hyland.Unity.User,Hyland.Unity.Keyword,Hyland.Unity.SecurityKeywordOperator)">
            <summary>Adds a SecurityKeyword to a User's collection</summary>
            <param name="user">The User who will have the SecurityKeyword added </param>
            <param name="keyword">The Keyword to add to the User's collection</param>
            <param name="keywordOperator">
                The SecurityKeywordOperator.. Either SecurityKeywordOperator.Equal or
                SecurityKeywordOperator.NotEqual
            </param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.AddSecurityKeyword(Hyland.Unity.UserGroup,Hyland.Unity.Keyword,Hyland.Unity.SecurityKeywordOperator)">
            <summary>Adds a SecurityKeyword to a UserGroup's collection</summary>
            <param name="userGroup">The UserGroup who will have the SecurityKeyword added </param>
            <param name="keyword">The value of the new SecurityKeyword</param>
            <param name="keywordOperator">
                The SecurityKeywordOperator.. Either SecurityKeywordOperator.Equal or
                SecurityKeywordOperator.NotEqual
            </param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.AddUsernameSecurityKeyword(Hyland.Unity.User,Hyland.Unity.KeywordType,Hyland.Unity.SecurityKeywordOperator)">
            <summary>Adds a Username SecurityKeyword to a User's collection</summary>
            <param name="user">The User who will have the SecurityKeyword added </param>
            <param name="keywordType">The Keyword Type to add to the User's collection</param>
            <param name="keywordOperator">
                The SecurityKeywordOperator.. Either SecurityKeywordOperator.Equal or
                SecurityKeywordOperator.NotEqual
            </param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.AddUsernameSecurityKeyword(Hyland.Unity.UserGroup,Hyland.Unity.KeywordType,Hyland.Unity.SecurityKeywordOperator)">
            <summary>Adds a Username SecurityKeyword to a UserGroup's collection</summary>
            <param name="userGroup">The UserGroup who will have the SecurityKeyword added</param>
            <param name="keywordType">The Keyword to add to the UserGroup's collection</param>
            <param name="keywordOperator">
                The SecurityKeywordOperator.. Either SecurityKeywordOperator.Equal or
                SecurityKeywordOperator.NotEqual
            </param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.AddUserToGroups(Hyland.Unity.User,System.Collections.Generic.IEnumerable{Hyland.Unity.UserGroup})">
            <summary>Adds a User to one or more UserGroups.</summary>
            <param name="user">The user to add to one or more UserGroups</param>
            <param name="userGroups">A collection of UserGroups to add the user to.  </param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.ChangeUserProperties(Hyland.Unity.User,Hyland.Unity.EditableUserProperties)">
            <summary>Change a User's Properties.</summary>
            <param name="user">The User to make property edits to</param>
            <param name="editableUserProperties">
                If a property is not blank nor null the User's property will
                be updated to the supplied value.  If a property is passed as null or empty (in the case the
                property is a string) that property will not be modified.
            </param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.CreateEditableUserProperties">
            <summary>
                Creates and returns a new EditableUserProperties object.  The EditableUserProperties
                object is a container of properties that can be changed about a User.
            </summary>
            <returns>A new EditableUserProperties object</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.CreateNewUserGroupProperties(Hyland.Unity.UserGroup,System.String)">
            <summary>
                Creates a NewUserGroupProperties object that is a container for properties pertaining to
                creating a new UserGroup.
            </summary>
            <param name="existingUserGroup">
                The existing UserGroup to use as a template when creating the new
                UserGroup.
            </param>
            <param name="userGroupName">The name to be assigned to the new UserGroup.</param>
            <returns>
                A NewUserGroupProperties object that is passed as a parameter to the CreateUserGroup()
                method.
            </returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.CreateNewUserProperties(System.String,System.String)">
            <summary>
                Creates a NewUserProperties object that is a container for properties pertaining to
                creating a new User.  A username and password are required.
            </summary>
            <param name="userName">username to assign to new user.  Required.</param>
            <param name="password">password to assign to new user.  Required.</param>
            <returns>A NewUserProperties object that is passed as a parameter to the CreateUser method.</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.CreateNewUserProperties(System.String,System.String,Hyland.Unity.User)">
            <summary>
                Creates a <see cref="T:Hyland.Unity.NewUserProperties" /> object that is a container for properties
                pertaining to creating a new User.  A username and password are required.
            </summary>
            <param name="userName">username to assign to new user.  Required.</param>
            <param name="password">password to assign to new user.  Required.</param>
            <param name="template">User to use as a template. Optional.</param>
            <returns>A NewUserProperties object that is passed as a parameter to the CreateUser method.</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.CreateNewUserProperties(System.String)">
            <summary>
                Creates a <see cref="T:Hyland.Unity.NewUserProperties" /> object that is a container for properties
                pertaining to creating a new User configured for Integrated Security Logon Only.
            </summary>
            <param name="userName">username to assign to new user.  Required.</param>
            <returns>A NewUserProperties object that is passed as a parameter to the CreateUser method.</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.CreateNewUserProperties(System.String,Hyland.Unity.User)">
            <summary>
                Creates a <see cref="T:Hyland.Unity.NewUserProperties" /> object that is a container for properties
                pertaining to creating a new User configured for Integrated Security Logon Only.
            </summary>
            <param name="userName">username to assign to new user.  Required.</param>
            <param name="template">User to use as a template.  Optional.</param>
            <returns>A NewUserProperties object that is passed as a parameter to the CreateUser method.</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.CreateUser(Hyland.Unity.NewUserProperties)">
            <summary>
                Adds a new User to the system.  This method requires a NewUserProperties object to be passed
                to it. The NewUserProperties object can be created via the CreateNewUserProperties() method.
            </summary>
            <param name="newUserProperties">Properties to assign to a new user</param>
            <returns>The newly created user</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.CreateUserGroup(Hyland.Unity.NewUserGroupProperties)">
            <summary>
                Adds a new UserGroup to the system.  This method requires a NewUserGroupProperties object
                to be passed to it.  The NewUserGroupProperties object can be created via the
                CreateNewUserGroupProperties() method. The new UserGroup configurations and privileges will be
                copied from the template UserGroup. The new UserGroup will not contain any members, and the
                name and id will also be unique. Once the new UserGroup is created, members can be added via
                the AddUserToGroups() method.
            </summary>
            <param name="newUserGroupProperties">Properties to assign to a new UserGroup.</param>
            <returns>The newly created UserGroup.</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.DeleteUser(Hyland.Unity.User)">
            <summary>Delete a User from the system.</summary>
            <param name="user">The user to be deleted</param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.GetSecurityKeywords(Hyland.Unity.UserGroup)">
            <summary>Gets the SecurityKeywords assigned to a UserGroup.</summary>
            <param name="userGroup">The UserGroup's who SecurityKeywords are to be retrieved</param>
            <returns>A collection of SecurityKeywords</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.GetSecurityKeywords(Hyland.Unity.User)">
            <summary>Gets the SecurityKeywords assigned to a User.</summary>
            <param name="user">The User's who SecurityKeywords are to be retrieved</param>
            <returns>A collection of SecurityKeywords</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.GetUserGroups">
            <summary>
                Gets the UserGroups that the current user is allowed to administer.
            </summary>
            <value>The UserGroups that the user is allowed to administer.</value>
            <returns>
                The <see cref="T:Hyland.Unity.UserGroupList" /> object containing all the UserGroups the current user is
                allowed to administer.
            </returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.GetUsers">
            <summary>
                Gets the users in the specified UserGroup.
            </summary>
            <value>The users that the user is allowed to administer.</value>
            <returns>
                The <see cref="T:Hyland.Unity.UserList" /> object containing all the users the current user is allowed to
                administer.
            </returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.GetUsers(Hyland.Unity.UserGroup)">
            <summary>
                Gets the users in the specified UserGroup. 
                Note: The current user must have the user setting 'UserGroup Administrator' enabled to access users in groups they are not members of.
            </summary>
            <param name="usergroup">The specified usergroup.</param>
            <returns>The <see cref="T:Hyland.Unity.UserList" /> object containing all the users in the specified UserGroup.</returns>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.LockUserAccount(Hyland.Unity.User)">
            <summary>Lock a User's Account</summary>
            <param name="user">The user to be locked.</param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.RemoveSecurityKeyword(Hyland.Unity.SecurityKeyword)">
            <summary>Removes a SecurityKeyword.</summary>
            <param name="securityKeyword">The SecurityKeyword to remove</param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.RemoveUserFromGroups(Hyland.Unity.User,System.Collections.Generic.IEnumerable{Hyland.Unity.UserGroup})">
            <summary>Remove a User from one or more UserGroups</summary>
            <param name="user">The user to remove from one or more UserGroups</param>
            <param name="userGroups">The UserGroup to remove the User from</param>
        </member>
        <member name="M:Hyland.Unity.UserAdministration.UnlockUserAccount(Hyland.Unity.User)">
            <summary>Unlock a User's account</summary>
            <param name="user">The User to be unlocked</param>
        </member>
        <member name="T:Hyland.Unity.Application">
            <summary>
                This is the starting point for all Unity operation. A Unity API Application object also
                encapsulates a connected session. To create an Application object use the
                <see cref="M:Hyland.Unity.Application.Connect(Hyland.Unity.AuthenticationProperties)" /> method.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Application.Cache">
            <summary>
                A Cache tied to the lifetime of a Session. In client-side scripts, the Cache is available
                for the lifetime of the client. This Cache is not shared between client and server.
            </summary>
            <remarks>
                This is only useful in the case of OnBase Automation and provides no value when used in
                Integration scenarios.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Application.Collaboration">
            <summary>
                Gets the <see cref="T:Hyland.Unity.Collaboration.Collaboration" /> object that is used to
                perform collaboration operations.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Application.Configuration">
            <summary>Provides dynamic configuration information for use in automation scripts.</summary>
        </member>
        <member name="P:Hyland.Unity.Application.Core">
            <summary>
                Gets the <see cref="T:Hyland.Unity.Core" /> object that is used to perform all the important
                document management operations.
            </summary>
            <value>The core object.</value>
            <remarks>This object is always available and never null.</remarks>
        </member>
        <member name="P:Hyland.Unity.Application.CurrentUser">
            <summary>Gets the current <see cref="T:Hyland.Unity.User" />.</summary>
            <value>The current user.</value>
            <remarks>This user is loaded on demand in a disconnected mode application.</remarks>
        </member>
        <member name="P:Hyland.Unity.Application.Diagnostics">
            <summary>Provides ability to write to Hyland Diagnostics console</summary>
        </member>
        <member name="P:Hyland.Unity.Application.DigitalSignatures">
            <summary>
                Gets the <see cref="T:Hyland.Unity.DigitalSignatures.DigitalSignatures" /> object that is
                used to perform digital signature operations.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Application.DocumentComposition">
            <summary>
                Gets the <see cref="T:Hyland.Unity.DocumentComposition.DocumentComposition" /> object that
                is used to perform all Document Composition operations.
            </summary>
            <value>The document composition object.</value>
            <remarks>This object is always available and never null.</remarks>
        </member>
        <member name="P:Hyland.Unity.Application.GlobalCache">
            <summary>
                A cache tied to the specific DataSource, items from this cache are never removed and
                therefore this cache should be used with care to avoid leaking of resources.
            </summary>
            <remarks>
                DataSource caching is not available in client-side scripts; use Cache instead. This is
                only useful in the case of OnBase Automation and provides no value when used in Integration
                scenarios.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Application.IdentitySettings">
            <summary>The <see cref="P:Hyland.Unity.Application.IdentitySettings" /> used to identify the <see cref="T:Hyland.Unity.Application" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Application.IsConnected">
            <summary>Returns a bool indicating if the Application is now connected. To test whether the Application is successfully connected to the Application Server, please use <see cref="M:Hyland.Unity.Application.Ping"/> instead.</summary>
            <value>Returns <c>true</c> if the Application can make requests to the Application Server; <c>false</c> otherwise.</value>
        </member>
        <member name="P:Hyland.Unity.Application.IsDisconnectEnabled">
            <summary>Designates whether or not the backing session can be disconnected.</summary>
            <remarks>
                When true and the application is connected, the Disconnect or Dispose call will disconnect
                the application and the session on the server.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Application.Mobile">
            <summary>
                Gets the <see cref="T:Hyland.Unity.Mobile.Mobile" /> object that is used to perform Mobile
                operations.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Application.PhysicalRecords">
            <summary>
                Gets the <see cref="T:Hyland.Unity.PhysicalRecords.PhysicalRecords" /> object that is used
                to perform physical records operations.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Application.ServiceClient">
            <summary>Gets the current service client.</summary>
            <value>The current service client.</value>
        </member>
        <member name="P:Hyland.Unity.Application.SessionID">
            <summary>Returns a session ID.</summary>
            <value>The session ID.</value>
        </member>
        <member name="P:Hyland.Unity.Application.SystemProperties">
            <summary>SystemProperties</summary>
        </member>
        <member name="P:Hyland.Unity.Application.Timeout">
            <summary>
                The timeout value in milliseconds for the SOAP over HTTP request. This returns 0 if the
                service client is not a SOAP based service client. Note: This is only the client side timeout
                setting the server can still timeout the connection.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Application.TranslationSettings">
            <summary>The TranslationSettings used to obtain string translations.</summary>
        </member>
        <member name="P:Hyland.Unity.Application.Workflow">
            <summary>
                Gets the <see cref="T:Hyland.Unity.Workflow.Workflow" /> object that is used to perform all
                workflow operations.
            </summary>
            <value>The workflow object.</value>
            <remarks>This object is always available and never null.</remarks>
        </member>
        <member name="P:Hyland.Unity.Application.WorkView">
            <summary>
                Gets the <see cref="T:Hyland.Unity.WorkView.WorkView" /> object that is used to perform all
                WorkView operations.
            </summary>
            <value>The workview object.</value>
            <remarks>This object is always available and never null.</remarks>
        </member>
        <member name="P:Hyland.Unity.Application.DocumentLocks">
            <summary>This helps track documents locked during client side script execution.</summary>
        </member>
        <member name="P:Hyland.Unity.Application.StaticCacheManager">
            <summary>Gets the StaticCacheManager object which provides access to the static cache.</summary>
        </member>
        <member name="M:Hyland.Unity.Application.Finalize">
            <summary>Finalizer/Destructor for application</summary>
        </member>
        <member name="M:Hyland.Unity.Application.Dispose(System.Boolean)">
            <summary>Disposes the Application object from finalizer</summary>
        </member>
        <member name="M:Hyland.Unity.Application.Connect(Hyland.Unity.AuthenticationProperties)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="connectProperties">
                The <see cref="T:Hyland.Unity.AuthenticationProperties" /> that contains all the
                properties used to connect
            </param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.Connect(System.String,System.String,System.String,System.String)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL of the application server.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="datasource">The datasource.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.Connect(System.String,System.String,System.String,System.String,Hyland.Unity.LicenseType)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL of the application server.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="datasource">The datasource.</param>
            <param name="licenseType">The license type to be used.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.Connect(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL of the application server.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="datasource">The datasource.</param>
            <param name="disconnectedMode">
                if set to <c>true</c> application is in disconnected or stateless
                mode.
            </param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.Connect(Hyland.Public.IServiceClient,System.String,System.String,System.String)">
            <summary>
                This method exists to allow connecting to the Application Server using other service
                clients that may be developed in the future.
            </summary>
            <param name="serviceClient">
                A service client that will be used by Unity to execute service
                requests.
            </param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="datasource">The datasource.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.Connect(Hyland.Public.IServiceClient,System.String,System.String,System.String,Hyland.Unity.LicenseType)">
            <summary>
                This method exists to allow connecting to the Application Server using other service
                clients that may be developed in the future.
            </summary>
            <param name="serviceClient">
                A service client that will be used by Unity to execute service
                requests.
            </param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="datasource">The datasource.</param>
            <param name="licenseType">The license type to be used.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.Connect(System.String,System.String,System.Boolean)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL of the application server.</param>
            <param name="sessionID">The session ID of the current session.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <param name="sessionCanBeDisconnected">
                if set to <c>true</c> the session will be disconnected when
                a <c>Disconnect</c> is called.
            </param>
        </member>
        <member name="M:Hyland.Unity.Application.Connect(Hyland.Public.IServiceClient,System.String,System.Boolean)">
            <summary>
                This method exists to allow connecting to the Application Server using other service
                clients that may be developed in the future.
            </summary>
            <param name="serviceClient">
                A service client that will be used by Unity to execute service
                requests.
            </param>
            <param name="sessionID">The session ID of the current session.</param>
            <param name="sessionCanBeDisconnected">
                if set to <c>true</c> the session will be disconnected when
                a <c>Disconnect</c> is called.
            </param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.Application.ConnectUsingDomainAuthentication(System.String,System.String)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL.</param>
            <param name="datasource">The datasource.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode with NT/LDAP Authentication
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.ConnectUsingDomainAuthentication(System.String,System.String,Hyland.Unity.LicenseType)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL.</param>
            <param name="datasource">The datasource.</param>
            <param name="licenseType">The license type to be used.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode with NT/LDAP Authentication
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.ConnectUsingDomainAuthentication(System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL.</param>
            <param name="datasource">The datasource.</param>
            <param name="domain">The domain of the user</param>
            <param name="username">The NT/LDAP username</param>
            <param name="password">The NT/LDAP password</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode with NT/LDAP Authentication
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.ConnectUsingDomainAuthentication(System.String,System.String,System.String,System.String,System.String,Hyland.Unity.LicenseType)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL.</param>
            <param name="datasource">The datasource.</param>
            <param name="domain">The domain of the user</param>
            <param name="username">The NT/LDAP username</param>
            <param name="password">The NT/LDAP password</param>
            <param name="licenseType">The license type to be used.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode with NT/LDAP Authentication
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.ConnectUsingSingleSignOn(System.String,System.String)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL.</param>
            <param name="datasource">The datasource.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode with SSO Authentication
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.ConnectUsingSingleSignOn(System.String,System.String,Hyland.Unity.LicenseType)">
            <summary>Initializes and connects a new instance of the <see cref="T:Hyland.Unity.Application" /> class to OnBase.</summary>
            <param name="url">The URL.</param>
            <param name="datasource">The datasource.</param>
            <returns>A connected <see cref="T:Hyland.Unity.Application" /> object</returns>
            <param name="licenseType">The license type to be used.</param>
            <remarks>
                New application should only be created when a connected Application is not provided. The
                correct use case of this method is when Unity is used outside OnBase. This method uses
                connected mode with SSO Authentication
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Application.CreateDomainAuthenticationProperties(System.String,System.String)">
            <summary>Create a new <see cref="T:Hyland.Unity.DomainAuthenticationProperties" /> object.</summary>
            <param name="url">The URL.</param>
            <param name="datasource">The datasource.</param>
            <returns>Returns a new <see cref="T:Hyland.Unity.DomainAuthenticationProperties" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.Application.CreateOnBaseAuthenticationProperties(System.String,System.String,System.String,System.String)">
            <summary>Create a new <see cref="T:Hyland.Unity.OnBaseAuthenticationProperties" /> object.</summary>
            <param name="url">The URL of the application server.</param>
            <param name="username">The username. For institution login, the user code.</param>
            <param name="password">The password.</param>
            <param name="datasource">The datasource.</param>
            <returns>A new <see cref="T:Hyland.Unity.OnBaseAuthenticationProperties" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.Application.CreateSessionIDAuthenticationProperties(System.String,System.String,System.Boolean)">
            <summary>Create a <see cref="T:Hyland.Unity.SessionIDAuthenticationProperties" /> object.</summary>
            <param name="url">The URL of the application server.</param>
            <param name="sessionID">The session ID of the current session.</param>
            <param name="isDisconnectEnabled">if set to <c>true</c> the session will be disconnected when a
                <c>Disconnect</c> is called.</param>
            <returns>A <see cref="T:Hyland.Unity.SessionIDAuthenticationProperties" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.Application.CreateSingleSignOnAuthenticationProperties(System.String,System.String)">
            <summary>Create a new <see cref="T:Hyland.Unity.SingleSignOnAuthenticationProperties" /> object.</summary>
            <param name="url">The URL.</param>
            <param name="datasource">The datasource.</param>
            <returns>Returns a new <see cref="T:Hyland.Unity.SingleSignOnAuthenticationProperties" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.Application.Disconnect">
            <summary>Disconnects this application from the Application Server.</summary>
        </member>
        <member name="M:Hyland.Unity.Application.GetAutomation``1">
            <summary>
                Returns the IAutomation object of the type specified. Returns null if it is not able to
                successfully create the object.
            </summary>
            <typeparam name="T">Must be Automation.IAutomation</typeparam>
            <returns>A automation class of the type specified or null</returns>
        </member>
        <member name="M:Hyland.Unity.Application.HasPasswordExpired">
            <summary>Verify if the current user's password has expired.</summary>
            <returns>Returns <c>true</c> if the password has expired for the current user, <c>false</c>
                otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.Application.Ping">
            <summary>Pings to the Application Server to test if Unity API requests can be made to the Server.</summary>
            <returns>A boolean that indicates if the ping to server has succeeded.</returns>
        </member>
        <member name="M:Hyland.Unity.Application.Dispose">
            <summary>Disposes the Application object</summary>
        </member>
        <member name="T:Hyland.Unity.ArgumentExceptions">
            <summary>
                Static helper class to standardize and centralize the creation of the thrown
                ArgumentExceptions.
            </summary>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.AboveMaximumRange(System.String,System.Int64,System.Int64)">
            <summary>Throws an exception because of a value that above the maximum range required.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <param name="actual">The actual value of the parameter.</param>
            <param name="high">The upper bound of the range.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is out of the expected range.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.BelowMinimumRange(System.String,System.Int64,System.Int64)">
            <summary>Throws an exception because of a value that is below the minimum range required.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <param name="actual">The actual value of the parameter.</param>
            <param name="low">The lower bound of the range.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is out of the expected range.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.Custom(System.String,System.String)">
            <summary>Throws an exception for a string being long than the max length <see cref="T:System.String" />.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <param name="message">The message for the exception. Cannot be null.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is empty.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.ObjectNull(System.String)">
            <summary>Throws an exception for a <see cref="T:System.Object" /> without a value.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is null.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.ObjectNull(System.String,System.String)">
            <summary>Throws an exception for a <see cref="T:System.Object" /> without a value.</summary>
            <param name="parent">The name of the parent of the parameter. Cannot be null.</param>
            <param name="parameter">The parameter name. Cannot be null or empty.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is empty.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.OutOfRange(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>Throws an exception because of a value that is out of range.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <param name="actual">The actual value of the parameter.</param>
            <param name="low">The lower bound of the range.</param>
            <param name="high">The upper bound of the range.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is out of the expected range.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.StringMaxLengthExceeded(System.String,System.Int64)">
            <summary>Throws an exception for a string being long than the max length <see cref="T:System.String" />.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <param name="max">The max length of the string</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is empty.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.StringNullOrEmpty(System.String,System.String)">
            <summary>Throws an exception for an empty or null <see cref="T:System.String" />.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <param name="value">The value of the string.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is null or empty.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.StringNullOrEmpty(System.String,System.String,System.String)">
            <summary>Throws an exception for an empty or null <see cref="T:System.String" />.</summary>
            <param name="parent">The name of the parent of the parameter. Cannot be null.</param>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <param name="value">The value of the string.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is empty.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.UndefinedEnum``1(System.String,``0)">
            <summary>Throws an exception due to an undefined enum.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <param name="value">The undefined enum constant value.</param>
            <exception cref="T:System.Exception">Value is undefined.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.StringEmpty(System.String)">
            <summary>Throws an exception for an empty <see cref="T:System.String" />.</summary>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is empty.</exception>
        </member>
        <member name="M:Hyland.Unity.ArgumentExceptions.StringEmpty(System.String,System.String)">
            <summary>Throws an exception for an empty <see cref="T:System.String" />.</summary>
            <param name="parent">The name of the parent of the parameter. Cannot be null.</param>
            <param name="parameter">The parameter name. Cannot be null.</param>
            <exception cref="T:System.Exception"><paramref name="parameter" /> is empty.</exception>
        </member>
        <member name="T:Hyland.Unity.AuthenticationProperties">
            <summary>The properties used to authenticate with OnBase.</summary>
        </member>
        <member name="P:Hyland.Unity.AuthenticationProperties.Datasource">
            <summary>The datasource name the application server must connect to.</summary>
        </member>
        <member name="P:Hyland.Unity.AuthenticationProperties.IdentitySettings">
            <summary>The <see cref="P:Hyland.Unity.AuthenticationProperties.IdentitySettings" /> used to identify the <see cref="T:Hyland.Unity.Application" />.</summary>
        </member>
        <member name="P:Hyland.Unity.AuthenticationProperties.IsDisconnectEnabled">
            <summary>Designates whether or not the Session used by the Unity API can be disconnected.</summary>
            <remarks>When set, the only way to disconnect the session is by using
                <see cref="T:Hyland.Unity.SessionIDAuthenticationProperties" /> and setting IsDisconnectEnabled to true.</remarks>
        </member>
        <member name="P:Hyland.Unity.AuthenticationProperties.LicenseToken">
            <summary>The License Token String to be used for connection.</summary>
        </member>
        <member name="P:Hyland.Unity.AuthenticationProperties.LicenseType">
            <summary>The LicenseType to be used. This is optional.</summary>
        </member>
        <member name="P:Hyland.Unity.AuthenticationProperties.ServiceClient">
            <summary>
                The service client to be used by Unity API. When this is set the URL is not used and URL
                is set to null
            </summary>
        </member>
        <member name="P:Hyland.Unity.AuthenticationProperties.TranslationSettings">
            <summary>The TranslationSettings used to obtain string translations.</summary>
        </member>
        <member name="P:Hyland.Unity.AuthenticationProperties.URL">
            <summary>The URL of the application server.</summary>
        </member>
        <member name="M:Hyland.Unity.AuthenticationProperties.CreateIdentitySettings(System.String)">
            <summary>Create a new <see cref="P:Hyland.Unity.AuthenticationProperties.IdentitySettings" /> object with the specified
                <paramref name="name" />.</summary>
            <param name="name">The name of the application. Cannot be null or empty.</param>
            <returns>An <see cref="P:Hyland.Unity.AuthenticationProperties.IdentitySettings" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.AuthenticationProperties.CreateTranslationSettings(System.Globalization.CultureInfo)">
            <summary>Create a new TranslationSettings object with the specified CultureInfo.</summary>
            <param name="cultureInfo">The CultureInfo to use in translations.</param>
            <returns>A TranslationSettings object.</returns>
        </member>
        <member name="T:Hyland.Unity.Automation.IAutomation">
            <summary>
                Marker interface for marking a class that is used for automating a client. Has no
                functions.
            </summary>
        </member>
        <member name="T:Hyland.Unity.BasePagingEnumerable`1">
            <summary>
                This supports the Unity internal infrastructure and it not intended to be used from your
                code.
            </summary>
            <typeparam name="T">UnityObject represented in Enumerable</typeparam>
        </member>
        <member name="P:Hyland.Unity.BasePagingEnumerable`1.Application">
            <summary>Application object.</summary>
        </member>
        <member name="P:Hyland.Unity.BasePagingEnumerable`1.CachedItems">
            <summary>Cached list of items.</summary>
        </member>
        <member name="P:Hyland.Unity.BasePagingEnumerable`1.EnumerableName">
            <summary>Name of the enumerable to be used in error messages.</summary>
        </member>
        <member name="P:Hyland.Unity.BasePagingEnumerable`1.PageSize">
            <summary>Page size to use.</summary>
        </member>
        <member name="P:Hyland.Unity.BasePagingEnumerable`1.PagingGuid">
            <summary>ID for paging.</summary>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.Dispose(System.Boolean)">
            <summary>Dispose the enumerator.</summary>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.ClearPagingInstance">
            <summary>Abstract method to clear the paging instance on the server.</summary>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.Initialize">
            <summary>Initialization to be called in the constructor</summary>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.LoadPageItems">
            <summary>Load a page of items.</summary>
            <returns>Number of items loaded.</returns>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.PostEnumeration">
            <summary>Runs after the enumerator is complete.</summary>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.SetMaximumItemCount(System.Int64)">
            <summary>Used to update the maximum item count.</summary>
            <param name="maximumItemCount">Maximum Number of items that should be returned.</param>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.Dispose">
            <summary>Dispose the enumerator.</summary>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an System.Collections.IEnumerator that iterates through the items.</summary>
            <returns>An System.Collections.IEnumerator for the items.</returns>
        </member>
        <member name="M:Hyland.Unity.BasePagingEnumerable`1.GetEnumerator">
            <summary>Gets an enumerator of items.</summary>
            <returns>An enumerator of items of the specific type.</returns>
        </member>
        <member name="T:Hyland.Unity.Cache">
            <summary>Cache object used in the Unity. This object is thread safe.</summary>
        </member>
        <member name="P:Hyland.Unity.Cache.SyncRoot">
            <summary>Gets the object that is used to lock cache access.</summary>
            <value>The object used for locking.</value>
        </member>
        <member name="P:Hyland.Unity.Cache.Item(System.Object)">
            <summary>Gets or sets the object in the cache for the specified key.</summary>
            <remarks>
                If the specified key is not found, attempting to get the value for it returns a null
                reference and attempting to set its value creates a new cache entry using the specified key. If
                the key already exists attempting to set its value will clear the old value. The old value is
                released (same as the <see cref="M:Hyland.Unity.Cache.RemoveItem(System.Object)" /> method). Setting the value to null is
                equivalent to calling <see cref="M:Hyland.Unity.Cache.RemoveItem(System.Object)" />. The old value is released and cannot be used
                after this call.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Cache.#ctor">
            <summary>Initializes a new instance of the <see cref="P:Hyland.Unity.Cache.Items" /> sealed class.</summary>
        </member>
        <member name="M:Hyland.Unity.Cache.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:Hyland.Unity.Cache.AddItem(System.Object,System.Object)">
            <summary>
                Add an object to the cache. If the key already exists in the cache, an exception is
                thrown.
            </summary>
            <param name="key">The cached object's key.</param>
            <param name="value">The object to cache.</param>
        </member>
        <member name="M:Hyland.Unity.Cache.AddItem(System.Object,System.Object,System.Boolean)">
            <summary>Add an object to the cache.</summary>
            <param name="key">The cached object's key.</param>
            <param name="value">The object to cache.</param>
            <param name="remove">
                If true, the old value is removed from the cache. If false and the key already
                exists in the cache, an exception is thrown.
            </param>
        </member>
        <member name="M:Hyland.Unity.Cache.ContainsKey(System.Object)">
            <summary>Determine if a key exists in the cache.</summary>
            <param name="key">The cached object's key.</param>
            <returns><c>true</c> if an object is cached for the given key, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.Cache.Detach(System.Object)">
            <summary>
                Removes an object from the cache without disposing the object. The caller is responsible
                to release the object when finished.
            </summary>
            <param name="key">The cached object's key.</param>
            <returns>The cached object or null if the key was not in the cache.</returns>
        </member>
        <member name="M:Hyland.Unity.Cache.GetItem(System.Object)">
            <summary>Gets the object in the cache for the specified key.</summary>
            <param name="key">The key of the item to retrieve from the cache.</param>
            <returns>The object stored in the cache for the given key.</returns>
            <remarks>
                If the specified key is not found, attempting to get the value for it returns a null
                reference.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Cache.RemoveItem(System.Object)">
            <summary>
                Removes an object from the cache. The object is released before its reference is removed
                from the cache! The object cannot be used after this operation. To use the object after
                removing it from the cache, do not call Remove. Use <see cref="M:Hyland.Unity.Cache.Detach(System.Object)" /> instead.
            </summary>
            <param name="key">The cached object's key.</param>
            <remarks>
                If the object in the cache is a COM object, <see cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)" /> is
                called on it. If the object implements <see cref="T:System.IDisposable" />,
                <see cref="M:System.IDisposable.Dispose" /> is invoked on it.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Cache.TryGetItem(System.Object,System.Object@)">
            <summary>Returns false if the object was not found.</summary>
            <param name="key">Key</param>
            <param name="item">The value to return.</param>
            <returns>False if not found.</returns>
        </member>
        <member name="M:Hyland.Unity.Cache.Dispose">
            <summary>Releases the cache and all items in the cache.</summary>
        </member>
        <member name="T:Hyland.Unity.CodeAnalysis.RuleNames">
            <summary>Code analysis rule names</summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.OB2001_LOCK_DOCUMENT_BEFORE_MAKING_MODIFICATIONS">
            <summary>Rule OB2001: Lock <see cref="T:Hyland.Unity.Document" /> before making modifications.</summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.OB2002_LOCK_SCANBATCH_BEFORE_INDEXING">
            <summary>Rule OB2002: Lock <see cref="T:Hyland.Unity.ScanBatch" /> before indexing.</summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.OB2003_RELEASE_LOCK_BEFORE_LOSING_SCOPE">
            <summary>Rule OB2003: Release Lock (such as <see cref="T:Hyland.Unity.DocumentLock" /> and
                <see cref="T:Hyland.Unity.BatchLock" />) object before losing scope.</summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.OB2004_EDITABLE_OBJECT_NEVER_PASSED_INTO_MODIFIER">
            <summary>
                Rule OB2004: Editable*** UnityObject should be passed in its corresponding modifier or any
                method/constructor invocations.
            </summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.OB2005_ASSEMBLIES_SHOULD_NOT_GENERATED">
            <summary>Rule OB2005: Microsoft CodeDom APIs should not be used to generate assemblies.</summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.OB2006_PASS_EXCEPTION_OBJECT_TO_DIAGNOSTICS_WRITE_METHODS">
            <summary>Rule OB2006: Pass Exception object instead of its property Message to
                <see cref="T:Hyland.Unity.Diagnostics" /> Write methods, when the Exception object is available.</summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.OB2007_ASYNC_ONEXECUTE_METHOD">
            <summary>
                Rule OB2007: Making script methods async will cause control to be returned back to the
                client or server even though the script is still executing.
            </summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.OB2008_TRANSITIONING_BATCH_NOT_ALLOWED">
            <summary>
                Rule OB2008: Transitioning batches within ScanQueueCustomProcessingScripts is not
                permitted.
            </summary>
        </member>
        <member name="F:Hyland.Unity.CodeAnalysis.RuleNames.ALL">
            <summary>All code analysis rules</summary>
        </member>
        <member name="T:Hyland.Unity.CodeAnalysis.SuppressRuleAttribute">
            <summary>Suppresses reporting of specific code analysis rule violation in source.</summary>
        </member>
        <member name="P:Hyland.Unity.CodeAnalysis.SuppressRuleAttribute.Justification">
            <summary>Gets or sets the justification for suppressing the code analysis rule.</summary>
        </member>
        <member name="P:Hyland.Unity.CodeAnalysis.SuppressRuleAttribute.SuppressON">
            <summary>Gets the rule name to suppress on.</summary>
        </member>
        <member name="M:Hyland.Unity.CodeAnalysis.SuppressRuleAttribute.#ctor(Hyland.Unity.CodeAnalysis.RuleNames)">
            <summary>
                Suppress a specific code analysis rule. Specify Justification for suppressing the code
                analysis rule as needed.
            </summary>
            <param name="suppressOn">Rule name to suppress on</param>
        </member>
        <member name="T:Hyland.Unity.Collaboration.Collaboration">
            <summary>The class that contains the API methods for Collaboration.</summary>
        </member>
        <member name="M:Hyland.Unity.Collaboration.Collaboration.CopyDiscussionThreads(Hyland.Unity.Document,Hyland.Unity.Document)">
            <summary>Copies the Discussion Threads from the sourceDocument to the targetDocument</summary>
            <param name="sourceDocument">Source of Discussion Threads</param>
            <param name="targetDocument">Target of Discussion Threads</param>
        </member>
        <member name="M:Hyland.Unity.Collaboration.Collaboration.CreateDiscussionThreadQuery">
            <summary>Create a Discussion Thread Query to retrieve Discussion Threads.</summary>
            <returns>A DiscussionThreadQuery object to specify the criteria of the Discussion Thread search.</returns>
        </member>
        <member name="T:Hyland.Unity.Collaboration.DiscussionThread">
            <summary>A Discussion Thread</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThread.CreatedBy">
            <summary>User who created this Discussion Thread.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThread.DateCreated">
            <summary>Date and Time this Discussion Thread was created.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThread.IsSecurityEnabled">
            <summary>Whether or not Security is enabled for this Discussion Thread.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThread.Message">
            <summary>The message in this Discussion Thread.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThread.Subject">
            <summary>The Subject of this Discussion Thread.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThread.ID">
            <summary>The ID of the Discussion Thread.</summary>
        </member>
        <member name="M:Hyland.Unity.Collaboration.DiscussionThread.CanI(Hyland.Unity.Collaboration.DiscussionThreadPrivileges)">
            <summary>Checks whether or not the current user has the specified rights on this DiscussionThread.</summary>
            <param name="privileges">The privileges to check.</param>
            <returns>True if user has rights specified, otherwise false.</returns>
        </member>
        <member name="M:Hyland.Unity.Collaboration.DiscussionThread.GetChildren">
            <summary>Retrieve all the responses to this thread.</summary>
            <returns>All responses to this thread.</returns>
        </member>
        <member name="T:Hyland.Unity.Collaboration.DiscussionThreadQuery">
            <summary>Query to retrieve Discussion Threads.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThreadQuery.Document">
            <summary>The Document for which to retrieve Discussion Threads.</summary>
        </member>
        <member name="M:Hyland.Unity.Collaboration.DiscussionThreadQuery.Execute">
            <summary>Execute the query and return the results.</summary>
            <returns>A list of discussion threads meeting the specified criteria.</returns>
        </member>
        <member name="M:Hyland.Unity.Collaboration.DiscussionThreadQuery.Execute(System.Boolean)">
            <summary>Execute the query and return the results.</summary>
            <param name="cacheQueryResults">Set to false to avoid caching the query results. It is set to true if not specified.</param>
            <returns>A list of discussion threads meeting the specified criteria.</returns>
        </member>
        <member name="T:Hyland.Unity.Collaboration.DiscussionThreadQueryResult">
            <summary>Results of a Discussion Thread Query.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThreadQueryResult.DiscussionThreads">
            <summary>Discussion Threads meeting the query specifications.</summary>
        </member>
        <member name="T:Hyland.Unity.Collaboration.DiscussionThreads">
            <summary>An enumeration of Discussion Threads</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.DiscussionThreads.EnumerableName">
            <summary>Name of the enumerable to be used in error messages.</summary>
        </member>
        <member name="M:Hyland.Unity.Collaboration.DiscussionThreads.ClearPagingInstance">
            <summary>Clears the paging instance on the server.</summary>
        </member>
        <member name="M:Hyland.Unity.Collaboration.DiscussionThreads.LoadPageItems">
            <summary>Load a page of items.</summary>
            <returns>Number of items loaded.</returns>
        </member>
        <member name="T:Hyland.Unity.Collaboration.DiscussionThreadPrivileges">
            <summary>Security options set by the thread owner.</summary>
        </member>
        <member name="F:Hyland.Unity.Collaboration.DiscussionThreadPrivileges.None">
            <summary>None</summary>
        </member>
        <member name="F:Hyland.Unity.Collaboration.DiscussionThreadPrivileges.View">
            <summary>View</summary>
        </member>
        <member name="T:Hyland.Unity.Collaboration.Post">
            <summary>A Post in response to a DiscussionThread.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.Post.Children">
            <summary>The message in this Post.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.Post.CreatedBy">
            <summary>User who created this Discussion Thread.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.Post.DateCreated">
            <summary>Date and Time this Discussion Thread was created.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.Post.Message">
            <summary>The message in this Post.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.Post.Subject">
            <summary>The Subject in this Post.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.Post.ID">
            <summary>The ID of the Post.</summary>
        </member>
        <member name="T:Hyland.Unity.Collaboration.PostList">
            <summary>A list of Posts.</summary>
        </member>
        <member name="T:Hyland.Unity.Collaboration.Posts">
            <summary>An enumeration of Posts.</summary>
        </member>
        <member name="P:Hyland.Unity.Collaboration.Posts.EnumerableName">
            <summary>Name of Enumerable</summary>
        </member>
        <member name="M:Hyland.Unity.Collaboration.Posts.ClearPagingInstance">
            <summary>Makes a request to clear the paging instance.</summary>
        </member>
        <member name="M:Hyland.Unity.Collaboration.Posts.LoadPageItems">
            <summary>Load a page of Posts.</summary>
            <returns>Count of Posts loaded.</returns>
        </member>
        <member name="T:Hyland.Unity.ConfigurationManager">
            <summary>The object used to obtain Unity configuration items from the database.</summary>
        </member>
        <member name="P:Hyland.Unity.ConfigurationManager.Item(System.String)">
            <summary>Gets the configuration value stored in the database with the specified key.</summary>
            <value>The value stored in the database.</value>
        </member>
        <member name="M:Hyland.Unity.ConfigurationManager.GetConnection(System.String)">
            <summary>Create a new DB connection based on the connection string stored with the specified name.</summary>
            <param name="name">The name of the connection string in the database.</param>
            <remarks>
                This is only available in a server-based automation context (e.g.
                <see cref="T:Hyland.Unity.IWorkflowScript" />, <see cref="T:Hyland.Unity.IExternalAutofillKeysetScript" />,
                <see cref="T:Hyland.Unity.IExternalKeywordDataSetScript" />, etc.). It will return null in client-based
                automation scripts, or in the Unity Integration Toolkit.
            </remarks>
            <returns>
                A new DBConnection if the connection string with specified name was found. Null if the
                connection string was not found.
            </returns>
        </member>
        <member name="M:Hyland.Unity.ConfigurationManager.TryGetValue(System.String,System.String@)">
            <summary>Tries to the get value stored in the database with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="value">The value stored in the database.</param>
            <returns>true if the key was found and false if the key was not found.</returns>
            <remarks>
                This is only available in the context of a Unity Script. If run from the Unity Integration
                Toolkit, false will be returned.
            </remarks>
        </member>
        <member name="T:Hyland.Unity.CoreContext">
            <summary>
                Entry point for interfaceing with the core. It will dynamically return "ServiceAccess"
                class implementations that will be used to interact with core logic. Only services logic should
                be included in these classes and no business logic.
            </summary>
        </member>
        <member name="T:Hyland.Unity.AddOnlyKeywordModifier">
            <summary>This is for internal use only.</summary>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(Hyland.Unity.Keyword)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keyword">Keyword to add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.Int64,System.String)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.Int64,System.Decimal)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.Int64,System.Double)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.Int64,System.DateTime)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.Int64,System.Int64)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.String,System.String)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.String,System.Decimal)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.String,System.Double)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.String,System.DateTime)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeyword(System.String,System.Int64)">
            <summary>Adds a Keyword to the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.AddKeywordRecord(Hyland.Unity.EditableKeywordRecord)">
            <summary>
                Adds a Multi-instance KeywordRecord. This will throw an exception if another KeywordRecord
                type is used.
            </summary>
            <param name="keywordRecord">The keyword record.</param>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.GetRecordType(Hyland.Unity.Keyword)">
            <summary>Gets the Record Type of the Record that the Keyword is a member of</summary>
            <param name="keyword">Keyword to find the RecordType of.</param>
            <returns>The RecordType of the Keyword</returns>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.GetRecordType(Hyland.Unity.KeywordType)">
            <summary>Gets the Record Type of the Record that the KeywordType is a member of</summary>
            <param name="keywordType">KeywordType to find the RecordType of.</param>
            <returns>The RecordType of the KeywordType</returns>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.ChangesApplied">
            <summary>Set a flag to mark a change has been applied</summary>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.VerifyDocumentType">
            <summary>Verifies that the Modifier's DocumentType specified correctly</summary>
        </member>
        <member name="M:Hyland.Unity.AddOnlyKeywordModifier.VerifyNotApplied">
            <summary>Verifies that the Modifier is not applied</summary>
        </member>
        <member name="T:Hyland.Unity.BatchLock">
            <summary>The batch lock object represents a lock obtained on the batch.</summary>
        </member>
        <member name="T:Hyland.Unity.BatchLock.BatchLockStatusType">
            <summary>The Status types of Batch Locks</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLock.BatchLockStatusType.NoLockInPlace">
            <summary>No lock is in place for the object</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLock.BatchLockStatusType.LockObtained">
            <summary>The Batch was not locked before and is now locked.</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLock.BatchLockStatusType.AlreadyLocked">
            <summary>The Batch is already locked.</summary>
        </member>
        <member name="P:Hyland.Unity.BatchLock.Status">
            <summary>Gets the document current lock status.</summary>
            <value>The lock status.</value>
        </member>
        <member name="P:Hyland.Unity.BatchLock.UserHoldingLock">
            <summary>
                Gets the user holding lock if a user was holding the lock. Null if no user is holding the
                lock.
            </summary>
            <value>The user holding lock.</value>
        </member>
        <member name="M:Hyland.Unity.BatchLock.Release">
            <summary>Unlocks the batch</summary>
        </member>
        <member name="M:Hyland.Unity.BatchLock.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                managed and unmanaged resources.
            </summary>
        </member>
        <member name="T:Hyland.Unity.BatchManagement">
            <summary>Defines methods and properties for Batches.</summary>
        </member>
        <member name="P:Hyland.Unity.BatchManagement.indexableBatchStatusList">
            <summary>Batch Statuses available for indexing via the Unity API.</summary>
        </member>
        <member name="P:Hyland.Unity.BatchManagement.ScanFormats">
            <summary>The list of configured scan formats.</summary>
        </member>
        <member name="P:Hyland.Unity.BatchManagement.ScanQueues">
            <summary>Returns the session cached collection of OnBase Scan Queues.</summary>
        </member>
        <member name="M:Hyland.Unity.BatchManagement.CreateEditableScanBatchProperties(Hyland.Unity.ScanBatch)">
            <summary>Properties for updating the specified batch</summary>
            <param name="scanBatch">The scan batch to be updated</param>
            <returns>EditableScanBatchProperties</returns>
        </member>
        <member name="M:Hyland.Unity.BatchManagement.CreateNewScanBatchProperties(Hyland.Unity.ScanQueue)">
            <summary>Properties for creating a new batch</summary>
            <param name="queue">The ScanQueue this batch will be assigned to</param>
            <returns>ScanBatchProperties containing the batch name and scan queue</returns>
            <remarks>The UseAutoNameString property will be set to true.</remarks>
        </member>
        <member name="M:Hyland.Unity.BatchManagement.CreateNewScanBatchProperties(System.String,Hyland.Unity.ScanQueue)">
            <summary>Properties for creating a new batch</summary>
            <param name="batchName">The name of the batch</param>
            <param name="queue">The ScanQueue this batch will be assigned to</param>
            <returns>ScanBatchProperties containing the batch name and scan queue</returns>
        </member>
        <member name="M:Hyland.Unity.BatchManagement.CreateScanBatch(Hyland.Unity.ScanBatchProperties)">
            <summary>Creates a new ScanBatch object and initializes its attributes.</summary>
            <returns>A new Batch object</returns>
            <param name="props">Properties used to create the batch</param>
            <remarks>
                New batches will be created with BatchStatus.Unknown as the status. This status lies
                before any other configured in the ScanQueue and a transition is needed to get to any batch
                operations (i.e. AwaitingFullTextOCR, AwaitingIndex).
            </remarks>
        </member>
        <member name="M:Hyland.Unity.BatchManagement.CreateScanBatchQuery">
            <summary>Create ScanBatchQuery to specify options to query Scan Batches.</summary>
            <returns>A ScanBatchQuery object.</returns>
        </member>
        <member name="M:Hyland.Unity.BatchManagement.GetBatchByID(System.Int64,Hyland.Unity.BatchType)">
            <summary>Gets the batch by ID and Type.</summary>
            <param name="batchID">The batch id.</param>
            <param name="type">The batch type.</param>
            <returns>A <see cref="T:Hyland.Unity.IBatch" /> specified by the ID and Type.</returns>
        </member>
        <member name="M:Hyland.Unity.BatchManagement.GetScanBatches(Hyland.Unity.BatchStatus)">
            <summary>
                Retrieves a list of Scan Batches of the specified status with respect to the session's
                user privileges.
            </summary>
            <param name="status">The status of the batches to be returned</param>
            <returns>
                A <see cref="T:Hyland.Unity.ScanBatchList" /> object that contains all the <see cref="T:Hyland.Unity.ScanBatch" />
                objects that are of the specific status
            </returns>
        </member>
        <member name="M:Hyland.Unity.BatchManagement.UpdateBatchProperties(Hyland.Unity.EditableScanBatchProperties)">
            <summary>Updates the batch with updated properties</summary>
            <param name="props">The EditableScanBatchProperties that will be applied to the batch</param>
        </member>
        <member name="T:Hyland.Unity.EditableScanBatchProperties">
            <summary>The class that represents the batch properties that can be edited.</summary>
        </member>
        <member name="T:Hyland.Unity.IBatch">
            <summary>Defines methods and properties that are to be used for Batches</summary>
        </member>
        <member name="P:Hyland.Unity.IBatch.CreatedBy">
            <summary>The creator of the batch</summary>
        </member>
        <member name="P:Hyland.Unity.IBatch.EndDate">
            <summary>Gets or sets the batch processing end date</summary>
        </member>
        <member name="P:Hyland.Unity.IBatch.ID">
            <summary>Batch ID</summary>
        </member>
        <member name="P:Hyland.Unity.IBatch.Name">
            <summary>Batch Name</summary>
        </member>
        <member name="P:Hyland.Unity.IBatch.StartDate">
            <summary>Gets or sets the batch processing start date</summary>
        </member>
        <member name="P:Hyland.Unity.IBatch.Status">
            <summary>The current Status of the Batch Object</summary>
        </member>
        <member name="M:Hyland.Unity.IBatch.AddDocuments(System.Collections.Generic.IEnumerable{Hyland.Unity.Document})">
            <summary>Adds a document to the batch and applies a document status to the document.</summary>
            <param name="documents">The collection of documents to be added</param>
        </member>
        <member name="M:Hyland.Unity.IBatch.Lock">
            <summary>Locks the batch</summary>
            <returns>A <see cref="T:Hyland.Unity.BatchLock" /> object that represents the lock.</returns>
        </member>
        <member name="M:Hyland.Unity.IBatch.Transition">
            <summary>
                Transitions the batch to appropriate status. Once a batch is transitioned it will attempt
                to determine the correct status to be applied to itself.
            </summary>
            <returns>
                The new status. Note: This could be the same status as the original status depending on
                the status of the batch.
            </returns>
        </member>
        <member name="T:Hyland.Unity.IndexableBatchStatusList">
            <summary>Batch Statuses available for indexing via the Unity API.</summary>
        </member>
        <member name="T:Hyland.Unity.IndexingBatch">
            <summary>An Indexing Batch.</summary>
        </member>
        <member name="P:Hyland.Unity.IndexingBatch.ID">
            <summary>Batch ID.</summary>
        </member>
        <member name="P:Hyland.Unity.IndexingBatch.Name">
            <summary>Batch Name.</summary>
        </member>
        <member name="M:Hyland.Unity.IndexingBatch.GetUnindexedDocuments(System.Boolean)">
            <summary>Retrieve and enumerate through the UnindexedDocuments in the Batch.</summary>
            <param name="loadKeywords">
                Specifies whether or not Keyword Records should be loaded for the
                Unindexed Documents. Should be set to true only if the keywords are going to be processed for
                every Unindexed Document.
            </param>
            <returns>Unindexed Documents in this IndexingBatch.</returns>
        </member>
        <member name="M:Hyland.Unity.IndexingBatch.GetUnindexedDocuments(System.Boolean,System.Boolean)">
            <summary>Retrieve and enumerate through the UnindexedDocuments in the Batch.</summary>
            <param name="loadKeywords">
              Specifies whether or not Keyword Records should be loaded for the Unindexed Documents.
              Should be set to true only if the keywords are going to be processed for every Unindexed Document.
            </param>
            <param name="cacheResults">Set it to false to not cache the results. It is set to true if not specified.</param>
            <returns>Unindexed Documents in this IndexingBatch.</returns>
        </member>
        <member name="T:Hyland.Unity.UnindexedDocument">
            <summary>Unindexed Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.CreatedBy">
            <summary>The Creator of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.DateStored">
            <summary>The Storage Date of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.DocumentDate">
            <summary>The DocumentDate of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.DocumentType">
            <summary>The DocumentType of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.FileType">
            <summary>The FileType of the Document.</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.KeywordRecords">
            <summary>The KeywordRecords of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.ScanBatch">
            <summary>Scan Batch of the Unindexed Document.</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.Status">
            <summary>The status of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.ID">
            <summary>The ID of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocument.Name">
            <summary>The Name of the Document</summary>
        </member>
        <member name="M:Hyland.Unity.UnindexedDocument.CreateUnindexedDocumentModifier">
            <summary>
                Creates an UnindexedDocument Modifier using the existing DocumentType. If no DocumentType
                has been specified for this UnindexedDocument, no Keyword-specific operations can be performed.
            </summary>
            <returns>A new UnindexedDocumentModifier object.</returns>
        </member>
        <member name="M:Hyland.Unity.UnindexedDocument.CreateUnindexedDocumentModifier(Hyland.Unity.DocumentType)">
            <summary>
                Creates an UnindexedDocument Modifier and specifies a new DocumentType for the
                UnindexedDocument.
            </summary>
            <param name="documentType">
                Create a modifier specifying a new DocumentType for the
                UnindexedDocument.
            </param>
            <returns>A new UnindexedDocumentModifier object with the new DocumentType specified.</returns>
        </member>
        <member name="M:Hyland.Unity.UnindexedDocument.FromID(Hyland.Unity.Application,System.Int64,System.Int64)">
            <summary>Gets an UnindexedDocument with the specified ID contained in the specified batch.</summary>
            <param name="app">Connected Application object.</param>
            <param name="id">ID of the UnindexedDocument.</param>
            <param name="batchID">ID of the batch containing the UnindexedDocument.</param>
            <returns>An UnindexedDocument, or null if none could be found.</returns>
            <remarks>This method will throw an exception if the batch is not in an unindexed status.</remarks>
        </member>
        <member name="M:Hyland.Unity.UnindexedDocument.FromID(Hyland.Unity.Application,System.Int64)">
            <summary>
                Gets an UnindexedDocument with the specified ID, and finds the batch containing the
                UnindexedDocument.
            </summary>
            <param name="app">Connected Application object.</param>
            <param name="id">ID of the UnindexedDocument.</param>
            <returns>An UnindexedDocument, or null if none could be found.</returns>
            <remarks>
                This method will throw an exception if the UnindexedDocument's batch is not in an
                unindexed status.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.UnindexedDocument.FromIDAndMaybeBatchID(Hyland.Unity.Application,System.Int64,System.Int64)">
            <summary>
                Gets an UnindexedDocument with the specified ID contained in the specified batch if the
                batch id is not 0.
            </summary>
            <param name="app">Connected Application object.</param>
            <param name="id">ID of the UnindexedDocument.</param>
            <param name="batchID">ID of the batch containing the UnindexedDocument, or 0 for unknown.</param>
            <returns>An UnindexedDocument, or null if none could be found.</returns>
            <remarks>This method will throw an exception if the batch is not in an unindexed status.</remarks>
        </member>
        <member name="T:Hyland.Unity.UnindexedDocumentModifier">
            <summary>Modifier to change properties of an UnindexedDocument.</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocumentModifier.DocumentDate">
            <summary>The DocumentDate of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocumentModifier.DocumentType">
            <summary>Document Type</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocumentModifier.ExpandKeysets">
            <summary>Determines if the document should expand its keysets when it is stored.</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocumentModifier.IndexingComplete">
            <summary>
                True if indexing is complete for this document. If DocumentType has not been set on this
                document, setting this value to true will result in an exception. Indexing must be complete for
                all documents in a batch in order for the batch to be transitioned past the IndexingInProgress
                status. This value is set to false by default.
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnindexedDocumentModifier.ApplyChanges">
            <summary>Applies the changes of the UnindexedDocumentModifer to the UnindexedDocument.</summary>
        </member>
        <member name="T:Hyland.Unity.UnindexedDocuments">
            <summary>Unindexed Documents Collection</summary>
        </member>
        <member name="P:Hyland.Unity.UnindexedDocuments.EnumerableName">
            <summary>Name of this object.</summary>
        </member>
        <member name="M:Hyland.Unity.UnindexedDocuments.ClearPagingInstance">
            <summary>Clears the paging instance on the server.</summary>
        </member>
        <member name="M:Hyland.Unity.UnindexedDocuments.LoadPageItems">
            <summary>Load an UnindexedDocument page</summary>
            <returns>Count Loaded</returns>
        </member>
        <member name="T:Hyland.Unity.ProcessorBatch">
            <summary>ProcessorBatch</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatch.CreatedBy">
            <summary>Not implemented.</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatch.EndDate">
            <summary>Not implemented.</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatch.ID">
            <summary>The identifier for the ProcessorBatch.</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatch.Name">
            <summary>The name of the ProcessorBatch.</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatch.StartDate">
            <summary>Not implemented.</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatch.Status">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Hyland.Unity.ProcessorBatch.#ctor(Hyland.Unity.Application)">
            <summary>
                Used for loading up the batchscan object from BatchResults. Batch.CreateBatch() should be
                called if the caller is trying to create a new batch in the DMS.
            </summary>
        </member>
        <member name="M:Hyland.Unity.ProcessorBatch.GetDocumentCounts">
            <summary>Gets the total and unindexed document counts for a ScanBatch</summary>
            <returns>
                ScanBatchDocumentCounts object which holds the TotalDocumentCount, UnindexedDocumentCount,
                and ScanBatchID
            </returns>
        </member>
        <member name="M:Hyland.Unity.ProcessorBatch.AddDocuments(System.Collections.Generic.IEnumerable{Hyland.Unity.Document})">
            <summary>Not implemented.</summary>
            <param name="documents">The collection of documents to be added</param>
        </member>
        <member name="M:Hyland.Unity.ProcessorBatch.Lock">
            <summary>Not implemented.</summary>
            <returns>The BatchLock object.</returns>
        </member>
        <member name="M:Hyland.Unity.ProcessorBatch.Transition">
            <summary>Not implemented.</summary>
            <returns>The new status.</returns>
        </member>
        <member name="T:Hyland.Unity.ProcessorBatchList">
            <summary>A list of ScanBatches</summary>
        </member>
        <member name="T:Hyland.Unity.ProcessorBatchDocumentCounts">
            <summary>Holds the total and unindexed document count for a particular batch</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatchDocumentCounts.ProcessorBatch">
            <summary>The ProcessorBatch</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatchDocumentCounts.TotalDocumentCount">
            <summary>Total documents in the batch</summary>
        </member>
        <member name="P:Hyland.Unity.ProcessorBatchDocumentCounts.UnindexedDocumentCount">
            <summary>Total unindexed in the batch</summary>
        </member>
        <member name="T:Hyland.Unity.ScanBatch">
            <summary>ScanBatch</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatch.ScanQueue">
            <summary>The scan queue that this batch belongs to</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatch.CreatedBy">
            <summary>The creator of the batch</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatch.EndDate">
            <summary>Gets the batch processing end date</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatch.ID">
            <summary>The identifier for the ScanBatch.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatch.Name">
            <summary>The name of the ScanBatch.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatch.StartDate">
            <summary>Gets the batch processing start date</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatch.Status">
            <summary>Returns the status of the ScanBatch.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanBatch.#ctor(Hyland.Unity.Application)">
            <summary>
                Used for loading up the batchscan object from BatchResults. Batch.CreateBatch() should be
                called if the caller is trying to create a new batch in the DMS.
            </summary>
        </member>
        <member name="M:Hyland.Unity.ScanBatch.CreateIndexingBatch">
            <summary>
                Retrieves an IndexingBatch providing functionality to modify UnindexedDocuments in this
                ScanBatch.
            </summary>
            <remarks>Not supported for custom process batches.</remarks>
            <returns>
                The IndexingBatch for this ScanBatch if the BatchStatus is supported for indexing
                (AwaitingIndex, IndexingInProgress).
            </returns>
        </member>
        <member name="M:Hyland.Unity.ScanBatch.GetDocumentCounts">
            <summary>Gets the total and unindexed document counts for a ScanBatch</summary>
            <returns>
                ScanBatchDocumentCounts object which holds the TotalDocumentCount, UnindexedDocumentCount,
                and ScanBatchID
            </returns>
        </member>
        <member name="M:Hyland.Unity.ScanBatch.AddDocuments(System.Collections.Generic.IEnumerable{Hyland.Unity.Document})">
            <summary>Adds a document to the batch and applies a document status to the document.</summary>
            <remarks>
                Valid document statuses are Active and Unindexed.
                <para />
                For batches in custom processes, this method can add documents only if the batch has not been
                transitioned yet.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if no documents are present in the collection.</exception>
            <param name="documents">The collection of documents to be added</param>
        </member>
        <member name="M:Hyland.Unity.ScanBatch.Lock">
            <summary>Locks the batch</summary>
            <returns>
                A BatchLock object.  If the lock was obtained or failed the BatchLock will contain
                information about the lock.
            </returns>
            <remarks>The batch will be locked with the Archive LockType</remarks>
        </member>
        <member name="M:Hyland.Unity.ScanBatch.Transition">
            <summary>
                Transitions the batch to appropriate status. Once a batch is transitioned it will attempt
                to determine the correct status to be applied to itself.
            </summary>
            <returns>
                The new status. Note: This could be the same status as the original status depending on
                the status of the batch.
            </returns>
        </member>
        <member name="T:Hyland.Unity.ScanBatchList">
            <summary>A list of ScanBatches</summary>
        </member>
        <member name="T:Hyland.Unity.ScanBatchDocumentCounts">
            <summary>Holds the total and unindexed document count for a particular batch</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatchDocumentCounts.ScanBatch">
            <summary>The ScanBatch</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatchDocumentCounts.TotalDocumentCount">
            <summary>Total documents in the batch</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatchDocumentCounts.UnindexedDocumentCount">
            <summary>Total unindexed in the batch</summary>
        </member>
        <member name="T:Hyland.Unity.ScanBatchProperties">
            <summary>ScanBatchProperties</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatchProperties.BatchName">
            <summary>Batch Name</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatchProperties.ScanQueue">
            <summary>Scan Queue ID</summary>
        </member>
        <member name="P:Hyland.Unity.ScanBatchProperties.UseAutoNameString">
            <summary>Updated the batch name string to use the Scan Queue AutoName</summary>
        </member>
        <member name="T:Hyland.Unity.ScanBatchQuery">
            <summary>Options for retrieving a Scan Batch or Batches.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanBatchQuery.AddBatchStatus(Hyland.Unity.BatchStatus)">
            <summary>Add a Status to query for Scan Batches.</summary>
            <param name="batchStatus">BatchStatus to add to Query.</param>
        </member>
        <member name="M:Hyland.Unity.ScanBatchQuery.AddIndexableBatchStatuses">
            <summary>Adds the list of <see cref="T:Hyland.Unity.IndexableBatchStatusList" /> to the query.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanBatchQuery.AddScanQueue(Hyland.Unity.ScanQueue)">
            <summary>Add a Scan Queue to query for Scan Batches.</summary>
            <param name="scanQueue">Scan Queue to add to Query.</param>
        </member>
        <member name="M:Hyland.Unity.ScanBatchQuery.Execute">
            <summary>Execute the ScanBatchQuery using the options specified.</summary>
            <returns>The resulting ScanBatchList.</returns>
        </member>
        <member name="T:Hyland.Unity.Core">
            <summary>Core Operations</summary>
        </member>
        <member name="P:Hyland.Unity.Core.AutoFillKeywordSets">
            <summary>Gets all the AutoFill Keysets.</summary>
        </member>
        <member name="P:Hyland.Unity.Core.BatchManagement">
            <summary>Access to Batch API methods</summary>
        </member>
        <member name="P:Hyland.Unity.Core.CurrencyFormats">
            <summary>The list of CurrencyFormats for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.CustomQueries">
            <summary>The Custom Queries for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.DocumentTypeGroups">
            <summary>The list of Document Type Groups for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.DocumentTypes">
            <summary>The list of Document Types for the current user.</summary>
            <remarks>
                Calling DocumentTypes.Find(by id or name) will return only that document type from the
                application server for quick access. Looping through DocumentTypes with a foreach statement
                will access all of the user's document types from the application server and cache them.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Core.EditableAutoFillKeywordSets">
            <summary>Gets the list of Autofill Keysets that the user has rights for.</summary>
        </member>
        <member name="P:Hyland.Unity.Core.EDMManagement">
            <summary>Access to EDM methods</summary>
        </member>
        <member name="P:Hyland.Unity.Core.EFormTemplates">
            <summary>The list of Electronic Form templates configured for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.EnvelopeManagement">
            <summary>Access to Envelope methods</summary>
        </member>
        <member name="P:Hyland.Unity.Core.FileTypes">
            <summary>The list of File Types for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.FolderManagement">
            <summary>Access to Foldering methods</summary>
        </member>
        <member name="P:Hyland.Unity.Core.GatewayServers">
            <summary>Gateway Servers</summary>
        </member>
        <member name="P:Hyland.Unity.Core.KeywordRecordTypes">
            <summary>The list of KeywordRecord Types for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.KeywordTypes">
            <summary>The list of Keyword Types for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.LogManagement">
            <summary>Access to Log API methods</summary>
        </member>
        <member name="P:Hyland.Unity.Core.MailManagement">
            <summary>Access to Mail methods</summary>
        </member>
        <member name="P:Hyland.Unity.Core.NoteTypes">
            <summary>The list of Note Types for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.PrintManagement">
            <summary>Access to Print API methods</summary>
        </member>
        <member name="P:Hyland.Unity.Core.Retrieval">
            <summary>Retrieval Operations</summary>
        </member>
        <member name="P:Hyland.Unity.Core.Roles">
            <summary>Gets the roles that are currently configured in OnBase.</summary>
            <value>The roles.</value>
        </member>
        <member name="P:Hyland.Unity.Core.Storage">
            <summary>Storage Operations</summary>
        </member>
        <member name="P:Hyland.Unity.Core.UnityFormTemplates">
            <summary>The list of Unity Form Templates configured for the current user</summary>
        </member>
        <member name="P:Hyland.Unity.Core.UserAdministration">
            <summary>User Administration</summary>
        </member>
        <member name="P:Hyland.Unity.Core.UserGroups">
            <summary>Gets the user groups that are currently configured in OnBase.</summary>
            <value>The user groups.</value>
        </member>
        <member name="M:Hyland.Unity.Core.CreateDocumentQuery">
            <summary>Creates a <see cref="T:Hyland.Unity.DocumentQuery" /> object.</summary>
            <returns>A document query object.</returns>
        </member>
        <member name="M:Hyland.Unity.Core.GetDocumentByID(System.Int64)">
            <summary>Gets the document by ID.</summary>
            <param name="id">The document id.</param>
            <returns>A <see cref="T:Hyland.Unity.Document" /> specified by the ID.</returns>
        </member>
        <member name="M:Hyland.Unity.Core.GetDocumentByID(System.Int64,Hyland.Unity.DocumentRetrievalOptions)">
            <summary>Gets the document by ID.</summary>
            <param name="id">The document id.</param>
            <param name="options">
                Used to set additional retrieval options. Note that some options may reduce
                performance; see specific options on <c>DocumentRetrievalOptions</c> for further details.
            </param>
            <returns>The <see cref="T:Hyland.Unity.Document" />.</returns>
        </member>
        <member name="M:Hyland.Unity.Core.GetUser(System.Int64)">
            <summary>Gets the user.</summary>
            <param name="id">The user id.</param>
            <returns>A <see cref="T:Hyland.Unity.User" /> or null if no user has the specified user id</returns>
            <remarks>
                The <see cref="T:Hyland.Unity.User" /> object returned in this method should not be used for
                administration purposes. Use UserAdministration.GetUsers() for administration.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Core.GetUser(System.String)">
            <summary>Gets the user.</summary>
            <param name="name">The username.</param>
            <returns>A <see cref="T:Hyland.Unity.User" /> or null if no user has the specified username</returns>
            <remarks>
                The <see cref="T:Hyland.Unity.User" /> object returned in this method should not be used for
                administration purposes. Use UserAdministration.GetUsers() for administration.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Core.ValidateKeywordValue(Hyland.Unity.KeywordType,System.String)">
            <summary>Checks if a value is valid for a KeywordType.</summary>
            <param name="keywordType">The KeywordType which the value is being checked against.</param>
            <param name="value">The value to check.</param>
            <returns>True if the value is valid for the KeywordType.</returns>
        </member>
        <member name="T:Hyland.Unity.CurrencyFormat">
            <summary>Currency Format</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.CurrencySymbol">
            <summary>The Currency Symbol of the CurrencyFormat</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.DecimalPlaces">
            <summary>The number of decimal places of the CurrencyFormat</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.DecimalSymbol">
            <summary>The Decimal Symbol of the CurrencyFormat</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.GroupDigits">
            <summary>The number of digits in each grouping of the CurrencyFormat</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.GroupSymbol">
            <summary>The symbol delimiting the grouping of the CurrencyFormat</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.IsoName">
            <summary>The ISO Name of the CurrencyFormat</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.Mask">
            <summary>The Currency Flags of the CurrencyFormat</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.ID">
            <summary>The ID of the CurrencyFormat</summary>
        </member>
        <member name="P:Hyland.Unity.CurrencyFormat.Name">
            <summary>The Name of the CurrencyFormat</summary>
        </member>
        <member name="T:Hyland.Unity.CurrencyFormatList">
            <summary>A list of Currency Formats</summary>
        </member>
        <member name="T:Hyland.Unity.DataProvider">
            <summary>Base class for DataProviders</summary>
        </member>
        <member name="M:Hyland.Unity.DataProvider.CreatePageRangeSet(System.String)">
            <summary>
                Creates a PageRangeSet from a string such as would be used in a printing dialog e.g.
                "1-3,7,10-15"
            </summary>
            <param name="range">The string to convert.</param>
            <returns>A <see cref="T:Hyland.Unity.PageRangeSet" /> object created from the string</returns>
        </member>
        <member name="M:Hyland.Unity.DataProvider.CreatePageRangeSet">
            <summary>Creates a PageRangeSet.</summary>
            <returns>A <see cref="T:Hyland.Unity.PageRangeSet" /> object.</returns>
        </member>
        <member name="T:Hyland.Unity.DefaultDataProvider">
            <summary>Gets Data in the Default format (Auto Detect) for the Document</summary>
        </member>
        <member name="M:Hyland.Unity.DefaultDataProvider.GetDocument(Hyland.Unity.Rendition)">
            <summary>Get a Document</summary>
            <param name="rendition">The rendition that needs to be retrieved.</param>
            <returns>Page Data of requested page.</returns>
        </member>
        <member name="M:Hyland.Unity.DefaultDataProvider.GetPage(Hyland.Unity.Rendition,System.Int64)">
            <summary>Get a Page</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="page">Page number to request</param>
            <returns>Page Data of requested page.</returns>
        </member>
        <member name="M:Hyland.Unity.DefaultDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet)">
            <summary>Get Pages</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="pageRanges">Pages to request</param>
            <returns>Page Data of requested pages.</returns>
        </member>
        <member name="T:Hyland.Unity.ImageDataProvider">
            <summary>The data provider that returns the document and pages as Group-4 Tiff.</summary>
            <remarks>
                Use this document data provider only if the document contains data that can be converted
                to a Tiff.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.CreateImageGetDocumentProperties">
            <summary>Creates the <see cref="T:Hyland.Unity.ImageGetDocumentProperties" />
            </summary>
            <returns>The ImageGetDocumentProperties created.</returns>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.GetDocument(Hyland.Unity.Rendition)">
            <summary>
                Gets the entire document as a single pagedata after converting it to a Tiff. The returning
                Tiff would be a Group-4 Tiff if the rendition is text or Group-4 Tiff. Otherwise, it would be a
                LZW Tiff.
            </summary>
            <param name="rendition">The rendition.</param>
            <returns>The entire document as a single Tiff pagedata.</returns>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.GetDocument(Hyland.Unity.Rendition,Hyland.Unity.ImageGetDocumentProperties)">
            <summary>
                Gets the entire document as a single pagedata after converting it to a Tiff. The returning
                Tiff would be a Group-4 Tiff if the rendition is text or Group-4 Tiff. Otherwise, it would be a
                LZW Tiff.
            </summary>
            <param name="rendition">The rendition.</param>
            <param name="optionalProperties">The optional properties.</param>
            <returns>The entire document as a single Tiff pagedata.</returns>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.GetDocument(Hyland.Unity.Rendition,Hyland.Unity.ImageGetDocumentProperties,Hyland.Unity.ImageContentType)">
            <summary>Gets the entire document as a single pagedata after converting it to a specific Tiff.</summary>
            <param name="rendition">The rendition.</param>
            <param name="optionalProperties">The optional properties.</param>
            <param name="imageContentType">The specific Tiff content type to convert into.</param>
            <returns>The entire document as a single specific Tiff pagedata.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the specified image content type is unsupported Tiff
                format or not Tiff.
            </exception>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.GetPage(Hyland.Unity.Rendition,System.Int64)">
            <summary>
                Gets the pagedata for the specified page of a document after converting it to a Tiff. The
                returning Tiff would be a Group-4 Tiff if the rendition is text or Group-4 Tiff. Otherwise, it
                would be a LZW Tiff.
            </summary>
            <param name="rendition">The rendition.</param>
            <param name="page">The page.</param>
            <returns>The Pagedata that contains the tiff converted page.</returns>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.GetPage(Hyland.Unity.Rendition,System.Int64,Hyland.Unity.ImageContentType)">
            <summary>
                Gets the pagedata for the specified page of a document after converting it to the
                specified Content Type.
            </summary>
            <param name="rendition">The rendition.</param>
            <param name="page">The page.</param>
            <param name="imageContentType">The image content type to retrieve.</param>
            <returns>The Pagedata that contains the converted page as the specified Content Type.</returns>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet)">
            <summary>
                Gets the pagedata collection for the specified pages of a document after converting them
                to a Tiff. The returning Tiff would be a Group-4 Tiff if the rendition is text or Group-4 Tiff.
                Otherwise, it would be a LZW Tiff.
            </summary>
            <param name="rendition">The rendition.</param>
            <param name="pageRanges">The page ranges.</param>
            <returns>The Pagedata collection that contains the tiff converted pages.</returns>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet,Hyland.Unity.ImageGetDocumentProperties)">
            <summary>
                Gets the pagedata collection for the specified pages of a document after converting them
                to a Tiff. The returning Tiff would be a Group-4 Tiff if the rendition is text or Group-4 Tiff.
                Otherwise, it would be a LZW Tiff.
            </summary>
            <param name="rendition">The rendition.</param>
            <param name="pageRanges">The page ranges.</param>
            <param name="optionalProperties">The optional properties.</param>
            <returns>The Pagedata collection that contains the tiff converted pages.</returns>
        </member>
        <member name="M:Hyland.Unity.ImageDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet,Hyland.Unity.ImageGetDocumentProperties,Hyland.Unity.ImageContentType)">
            <summary>Gets the pagedata collection for the specified pages of a document.</summary>
            <param name="rendition">The rendition.</param>
            <param name="pageRanges">The page ranges.</param>
            <param name="optionalProperties">The optional properties.</param>
            <param name="imageContentType">The image content type to retrieve.</param>
            <returns>The Pagedata that contains the converted page as the specified Content Type.</returns>
        </member>
        <member name="T:Hyland.Unity.ImageGetDocumentProperties">
            <summary>The optional properties used to get document data.</summary>
        </member>
        <member name="P:Hyland.Unity.ImageGetDocumentProperties.DotsPerInch">
            <summary>Gets or sets the DPI for the rendered image.</summary>
            <value>DotsPerInch should be greater than or equal to 0.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is set to be negative.</exception>
        </member>
        <member name="P:Hyland.Unity.ImageGetDocumentProperties.Overlay">
            <summary>Gets or sets a value indicating whether document should have overlay.</summary>
            <value><c>true</c> if overlay required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Hyland.Unity.ImageGetDocumentProperties.OverlayAllPages">
            <summary>Gets or sets a value indicating whether overlay should be added to all pages.</summary>
            <remarks>
                This property is only respected if the Document Type setting 'Overlay First Page Only' is
                set.
            </remarks>
            <value><c>true</c> if overlay added on all pages; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Hyland.Unity.ImageGetDocumentProperties.PageRanges">
            <summary>Gets or sets the page ranges.</summary>
            <value>The page ranges.</value>
        </member>
        <member name="P:Hyland.Unity.ImageGetDocumentProperties.RenderNoteAnnotations">
            <summary>
                Gets or sets a value indicating whether the note/annotation icon or shape (arrow, ellipse,
                etc.) should be returned as part of the page data.
            </summary>
        </member>
        <member name="P:Hyland.Unity.ImageGetDocumentProperties.RenderNoteText">
            <summary>
                Gets or sets a value indicating whether the associated text for a note/annotation as well
                as the note auto-name string should be returned as part of the page data.
            </summary>
        </member>
        <member name="T:Hyland.Unity.NativeDataProvider">
            <summary>
                Gets Data in the "Native Format" for the Document. Try to use Default instead of Native
                there are limitation to NativeDataProvider.
            </summary>
        </member>
        <member name="M:Hyland.Unity.NativeDataProvider.GetDocument(Hyland.Unity.Rendition)">
            <summary>Gets the first file of the Document as stored in the disk group</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <returns>Page Data of first file of the document.</returns>
            <remarks>
                When you want all pages of a image document stored in multiple files use Default and not
                Native or use GetPages instead of GetDocument. Native GetDocument will only provide the first
                page.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.NativeDataProvider.GetPage(Hyland.Unity.Rendition,System.Int64)">
            <summary>
                Gets a Page Note: This method is only a best effort to provide data as it is in the disk
                group without any processing. But there are cases when the data will be processed in before
                returned to the user.
            </summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="page">Page number to request</param>
            <returns>Page Data of requested page.</returns>
        </member>
        <member name="M:Hyland.Unity.NativeDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet)">
            <summary>
                Gets Pages Note: This method is only a best effort to provide data as it is in the disk
                group without any processing. But there are cases when the data will be processed in before
                returned to the user.
            </summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="pageRanges">Pages to request</param>
            <returns>Page Data of requested pages.</returns>
        </member>
        <member name="T:Hyland.Unity.PDFDataProvider">
            <summary>Gets Data in the PDF format for the Document</summary>
        </member>
        <member name="M:Hyland.Unity.PDFDataProvider.CreatePDFGetDocumentProperties">
            <summary>Get a PDF Properties</summary>
            <returns>The PDFGetDocumentProperties created.</returns>
        </member>
        <member name="M:Hyland.Unity.PDFDataProvider.GetDocument(Hyland.Unity.Rendition)">
            <summary>Get a Document</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <returns>Page Data of requested page.</returns>
        </member>
        <member name="M:Hyland.Unity.PDFDataProvider.GetDocument(Hyland.Unity.Rendition,Hyland.Unity.PDFGetDocumentProperties)">
            <summary>Get a Document</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="optionalProperties">PDF Optional Properties</param>
            <returns>Page Data of requested page.</returns>
            <remarks>
                This method does not support the PageRange property off of PDFGetDocumentProperties for
                PDF documents; it will return the full PDF document regardless.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.PDFDataProvider.GetPage(Hyland.Unity.Rendition,System.Int64)">
            <summary>Get a Page</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="page">Page number to request</param>
            <returns>Page Data of requested page.</returns>
        </member>
        <member name="M:Hyland.Unity.PDFDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet)">
            <summary>Get Pages</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="pageRanges">Pages to request</param>
            <returns>Page Data of requested pages.</returns>
        </member>
        <member name="M:Hyland.Unity.PDFDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet,Hyland.Unity.PDFGetDocumentProperties)">
            <summary>Gets Pages</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="pageRanges">Pages to request</param>
            <param name="optionalProperties">PDF Optional Properties</param>
            <returns>Page Data of requested pages.</returns>
        </member>
        <member name="T:Hyland.Unity.PDFGetDocumentProperties">
            <summary>PDF Get Document Properties</summary>
        </member>
        <member name="F:Hyland.Unity.PDFGetDocumentProperties.Overlay">
            <summary>Add an overlay to the PDF Document</summary>
        </member>
        <member name="F:Hyland.Unity.PDFGetDocumentProperties.OverlayAllPages">
            <summary>Overlay all pages for the PDF Document</summary>
        </member>
        <member name="F:Hyland.Unity.PDFGetDocumentProperties.PageRanges">
            <summary>The PageRangeSet to use for the PDF Document</summary>
            <remarks>*Property not supported by GetDocument method for PDF documents.</remarks>
        </member>
        <member name="P:Hyland.Unity.PDFGetDocumentProperties.CompressionQuality">
            <summary>
                CompressionQuality to use for the PDF Document (defaults to value from web.config, or if
                non-existent, 100)
            </summary>
            <value>Percentage of compression. Valid range is between 1 and 100.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if value is set to be a number out of the
                range between 1 and 100.
            </exception>
        </member>
        <member name="P:Hyland.Unity.PDFGetDocumentProperties.RenderNoteAnnotations">
            <summary>
                Gets or sets a value indicating whether the note/annotation icon or shape (arrow, ellipse,
                etc.) should be returned as part of the page data.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PDFGetDocumentProperties.RenderNoteText">
            <summary>
                Gets or sets a value indicating whether the associated text for a note/annotation as well
                as the note auto-name string should be returned as part of the page data.
            </summary>
        </member>
        <member name="T:Hyland.Unity.TextDataProvider">
            <summary>Provides data in the text/plain format.</summary>
        </member>
        <member name="M:Hyland.Unity.TextDataProvider.CreateTextGetDocumentProperties">
            <summary>Creates the <see cref="T:Hyland.Unity.TextGetDocumentProperties" />
            </summary>
            <returns>The TextGetDocumentProperties created.</returns>
        </member>
        <member name="M:Hyland.Unity.TextDataProvider.GetDocument(Hyland.Unity.Rendition)">
            <summary>Gets the Document</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <returns>Page Data of requested page.</returns>
        </member>
        <member name="M:Hyland.Unity.TextDataProvider.GetDocument(Hyland.Unity.Rendition,Hyland.Unity.TextGetDocumentProperties)">
            <summary>Gets the Document</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="optionalProperties">Text Optional Properties</param>
            <returns>Page Data of requested page.</returns>
        </member>
        <member name="M:Hyland.Unity.TextDataProvider.GetPage(Hyland.Unity.Rendition,System.Int64)">
            <summary>Gets a Page</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="page">Page number to request</param>
            <returns>Page Data of requested page.</returns>
        </member>
        <member name="M:Hyland.Unity.TextDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet)">
            <summary>Gets Pages</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="pageRanges">Pages to request</param>
            <returns>Page Data of requested pages.</returns>
        </member>
        <member name="M:Hyland.Unity.TextDataProvider.GetPages(Hyland.Unity.Rendition,Hyland.Unity.PageRangeSet,Hyland.Unity.TextGetDocumentProperties)">
            <summary>Gets Pages</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="pageRanges">Pages to request</param>
            <param name="optionalProperties">Text Optional Properties</param>
            <returns>Page Data of requested pages.</returns>
        </member>
        <member name="M:Hyland.Unity.TextDataProvider.TextSearch(Hyland.Unity.Rendition,System.String,Hyland.Unity.TextSearchOptions)">
            <summary>Perform a text search</summary>
            <param name="rendition">Rendition of Document to get Pages from</param>
            <param name="searchString">The text to search for.</param>
            <param name="options">Options in performing a text search.</param>
            <returns>The search results.</returns>
        </member>
        <member name="T:Hyland.Unity.TextGetDocumentProperties">
            <summary>The optional properties used to get Text Document data.</summary>
        </member>
        <member name="P:Hyland.Unity.TextGetDocumentProperties.PreserveFormFeeds">
            <summary>Preserve Form Feeds for the Text Document</summary>
        </member>
        <member name="T:Hyland.Unity.Document">
            <summary>Document</summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Document.CreatedBy">
            <summary>The Creator of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.Document.DateStored">
            <summary>The Storage Date of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.Document.DefaultFileType">
            <summary>The DefaultFileType of the DocumentType of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.Document.DefaultRenditionOfLatestRevision">
            <summary>Returns the default rendition of the latest allowed revision.</summary>
            <value>The default rendition of latest revision.</value>
            <remarks>
                If there are no viewable revision this returns null. This property is lazy loaded unless
                the Document was loaded with <c>DocumentRetrievalOptions.LoadRevisionsAndVersions</c>.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Document.DocumentDate">
            <summary>The DocumentDate of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.Document.DocumentType">
            <summary>The DocumentType of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.Document.EForm">
            <summary>Gets the EForm object for the Default Rendition of the Latest Revision of the document.</summary>
            <remarks>
                This property is null if the default rendition is not an EForm rendition. If there is no
                viewable revision this returns null. This property is lazy loaded unless the Document was
                loaded with <c>DocumentRetrievalOptions.LoadRevisionsAndVersions</c>.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Document.Imaging">
            <summary>Gets the imaging object associated with the default rendition of the latest revision.</summary>
            <value>The imaging object.</value>
            <remarks>
                This property is null if the default rendition is not an image rendition. If there is no
                viewable revision this returns null. This property is lazy loaded unless the Document was
                loaded with <c>DocumentRetrievalOptions.LoadRevisionsAndVersions</c>.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Document.LatestAllowedRevisionID">
            <summary>Returns the latest allowed revision id.</summary>
            <remarks>
                If the document does not have any viewable revision then this value is -1. Note: Revisions
                are a 0 based index.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Document.LatestRevision">
            <summary>Get the latest revision of the document.</summary>
            <remarks>
                LatestRevision is null if the user does not have any viewable revision. This property is
                lazy loaded unless the Document was loaded with
                <c>DocumentRetrievalOptions.LoadRevisionsAndVersions</c>.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Document.Notes">
            <summary>The notes of the Document</summary>
            <remarks>This property is lazy loaded unless the Document was loaded with
                <c>DocumentRetrievalOptions.LoadNotes</c>.</remarks>
        </member>
        <member name="P:Hyland.Unity.Document.Revisions">
            <summary>Gets the revisions available in the document.</summary>
            <remarks>
                This collection can be empty of the user is only allowed to see version. This property is
                lazy loaded unless the Document was loaded with
                <c>DocumentRetrievalOptions.LoadRevisionsAndVersions</c>.
            </remarks>
            <value>The revisions.</value>
        </member>
        <member name="P:Hyland.Unity.Document.Status">
            <summary>The status of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.Document.UnityForm">
            <summary>
                Gets the Unity Form object for the Default Rendition of the Latest Revision of the
                document.
            </summary>
            <remarks>
                This property is null if the default rendition is not an UnityForm. This property is lazy
                loaded unless the Document was loaded with
                <c>DocumentRetrievalOptions.LoadRevisionsAndVersions</c>.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Document.Versions">
            <summary>
                Returns only the versions of the document. Returns null if the document is not
                versionable.
            </summary>
            <remarks>
                This property is lazy loaded unless the Document was loaded with
                <c>DocumentRetrievalOptions.LoadRevisionsAndVersions</c>.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Document.ID">
            <summary>The ID of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.Document.Name">
            <summary>The Name of the Document</summary>
        </member>
        <member name="P:Hyland.Unity.Document.KeywordRecords">
            <summary>The KeywordRecords of the Document</summary>
            <remarks>This property is lazy loaded unless the Document was loaded with
                <c>DocumentRetrievalOptions.LoadKeywords</c>.</remarks>
        </member>
        <member name="M:Hyland.Unity.Document.CreateDocumentPropertiesModifier">
            <summary>Creates a DocumentPropertiesModifier for the Document</summary>
            <returns>The DocumentPropertiesModifier created.</returns>
        </member>
        <member name="M:Hyland.Unity.Document.CreateKeywordModifier">
            <summary>Creates a KeywordModifier for the Document</summary>
            <returns>The KeywordModifier created.</returns>
        </member>
        <member name="M:Hyland.Unity.Document.CreateNoteModifier">
            <summary>Creates a <see cref="T:Hyland.Unity.NoteModifier" /> for the document.</summary>
            <returns>A <see cref="T:Hyland.Unity.NoteModifier" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.Document.CrossReference(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Performs a CrossReference for the Document</summary>
            <param name="maxHits">The Maximum number of hits to gather.</param>
            <param name="page">Page Number to cross reference on.</param>
            <param name="xOffset">
                The X offset on the page to be evaluated in determining which cross reference
                to use.
            </param>
            <param name="yOffset">
                The Y offset on the page to be evaluated in determining which cross reference
                to use.
            </param>
            <returns>Documents that match the cross reference.</returns>
        </member>
        <member name="M:Hyland.Unity.Document.GetBatch(Hyland.Unity.BatchType)">
            <summary>
                Retrieves a Batch object of the specified type with respect to the session's user
                privileges.
            </summary>
            <param name="type">The type of batch.</param>
            <returns>The Batch that this document belong to.</returns>
        </member>
        <member name="M:Hyland.Unity.Document.GetFolders">
            <summary>Retrieves associated Folders</summary>
            <returns>A FolderList of found folders.</returns>
        </member>
        <member name="M:Hyland.Unity.Document.GetHistory">
            <summary>
                Retrieves Document History for the Document. Use <see cref="T:Hyland.Unity.LogManagement" /> for
                additional options.
            </summary>
            <returns>List of Document History Items for the Document.</returns>
        </member>
        <member name="M:Hyland.Unity.Document.LockDocument">
            <summary>Lock Document will attempt to lock a document for keyword modification.</summary>
            <remarks>
                The returned lock must be released to ensure that the document is not left locked. Use the
                DocumentLock object in a using statement to ensure proper release of the lock.
            </remarks>
            <returns>The DocumentLock object</returns>
        </member>
        <member name="M:Hyland.Unity.Document.Refresh">
            <summary>
                Flushes the internal cache of the document and allow updated value to be loaded from the
                database. Currently this flushes the internal notes, keywords, revisions information.
            </summary>
        </member>
        <member name="M:Hyland.Unity.Document.TryGetExistingLock(Hyland.Unity.DocumentLock@)">
            <summary>
                Attempts to get a document lock that was previously created on the document.
            </summary>
            <param name="documentLock">
                DocumentLock object that will contain a DocumentLock if we return true.
                null otherwise.
            </param>
            <returns>true if a Document lock is found.  false otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.DocumentList">
            <summary>A list of Documents</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentList.FindAll(System.String)">
            <summary>Finds all the documents that have the provided name.</summary>
            <param name="name">The name to search the document list.</param>
            <returns>
                A DocumentList that contains documents with the specified name. Returns a empty list if
                there is no match.
            </returns>
        </member>
        <member name="T:Hyland.Unity.DocumentLock">
            <summary>The document lock object represents a lock obtained on the document.</summary>
            <remarks>
                This lock should be release by calling Release method or it must be disposed to unlock the
                lock.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.DocumentLock.LockTime">
            <summary>Gets the time the document lock was created. Returns null if no lock exists.</summary>
            <value>Time stamp of the document lock</value>
        </member>
        <member name="P:Hyland.Unity.DocumentLock.Status">
            <summary>Gets the document current lock status.</summary>
            <value>The lock status.</value>
        </member>
        <member name="P:Hyland.Unity.DocumentLock.UserHoldingLock">
            <summary>
                Gets the user holding lock if a user was holding the lock. Null if no user is holding the
                lock.
            </summary>
            <value>The user holding lock.</value>
        </member>
        <member name="M:Hyland.Unity.DocumentLock.Release">
            <summary>Releases this document lock.</summary>
            <remarks>Locks that are obtained only with the current session can be released. </remarks>
        </member>
        <member name="M:Hyland.Unity.DocumentLock.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting
                managed and unmanaged resources.
            </summary>
        </member>
        <member name="T:Hyland.Unity.DocumentPropertiesModifier">
            <summary>The modifier of Document Properties for a Document</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentPropertiesModifier.Document">
            <summary>Document of which properties are being modified.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentPropertiesModifier.DocumentDate">
            <summary>Gets or sets the Document Date.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentPropertiesModifier.ApplyChanges">
            <summary>Applies the Document Property changes to the Document</summary>
        </member>
        <member name="T:Hyland.Unity.RenderingProperties">
            <summary>
                Returns properties that a rendering component may use to render this document. Access to
                such properties may require additional database calls. Retrieval of this type of property
                should be limited to clients that may perform a rendering operation.
            </summary>
        </member>
        <member name="T:Hyland.Unity.DocumentType">
            <summary>Document Type</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.AutoFillKeyset">
            <summary>The AutoFill Keyset assigned to this Document Type</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.DefaultFileType">
            <summary>The Document Type's Default File Type</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.DocumentDateDisplayName">
            <summary>The Document Type's Document Date Display Name</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.DocumentTypeGroup">
            <summary>The Document Type's Group</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.HiddenKeywordTypes">
            <summary>
                The collection of KeywordTypes that are configured to be hidden on this document type.
                Note: This is not enforced by the Unity API and if the programmer wants to enforce it this
                collection must be used to enforce it.
            </summary>
            <remarks>
                Hidden keywords vary for user based on the Access Restricted Keywords privilege. Users who
                have that privilege will never have any keyword types in this collection.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.DocumentType.Icon">
            <summary>Contains the icon that is to be used to represent documents of this type.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.KeywordTypesRequiredForArchival">
            <summary>
                The collection of KeywordTypes that are configured to be required when archiving a
                document of this document type. Note: This is not enforced by the Unity API and if the
                programmer wants to enforce it this collection must be used to enforce it.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.KeywordTypesRequiredForRetrieval">
            <summary>
                The collection of KeywordTypes that are configured to be required when retrieving a
                document of this document type. Note: This is not enforced by the Unity API and if the
                programmer wants to enforce it this collection must be used to enforce it.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.KeywordTypesUsedForNewDocumentUniqueness">
            <summary>
                The collection of KeywordTypes that are configured to determine if a document is unique.
                This is used by OnBase Clients when archiving new documents to decide if the document must be a
                new revision instead of a new document. Note: In Unity API, document archival will not create
                revision unless the new revision method is used explicitly  and if the programmer wants to
                create a revision based on if specific keywords match existing document they have to program
                this themselves using a document query API.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.ReadOnlyKeywordTypes">
            <summary>
                The collection of KeywordTypes that are configured to be read only on this document type.
                Note: This is not enforced by the Unity API and if the programmer wants to enforce it this
                collection must be used to enforce it.
            </summary>
            <remarks>
                Read only keywords vary for user based on the Access Restricted Keywords privilege. Users
                who have that privilege will never have any keyword types in this collection.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.DocumentType.RedactedDocumentType">
            <summary>The Document Type's Redaction Document Type</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.Renditionable">
            <summary>If the Document is Renditionable</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.Revisable">
            <summary>If the Document is Revisable</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.TranslatedName">
            <summary>The Document Type's translated name or Name if there is no translation.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.ID">
            <summary>The Document Type's ID</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.Name">
            <summary>The Document Type's Name</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentType.KeywordRecordTypes">
            <summary>The Document Type's Keyword Record Types</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentType.CanI(Hyland.Unity.DocumentTypePrivileges)">
            <summary>Privileges allowed for the current user for this Document Type</summary>
            <param name="privilege">The privilege to determine that the current user has.</param>
            <returns>If the privilege is granted to the current user.</returns>
        </member>
        <member name="T:Hyland.Unity.DocumentTypeList">
            <summary>A list of Document Type</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentTypeGroup">
            <summary>Document Type Group</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentTypeGroup.DocumentTypes">
            <summary>The Document Types of the Document Type Group</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentTypeGroup.GroupSearch">
            <summary>Group Search setting of the Document Type Group</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentTypeGroup.KeywordRecordTypes">
            <summary>
                Returns KeywordRecordTypes that are common for all DocumentTypes in the group.  This only
                has items if GroupSearch is <c>true</c>.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.KeywordRecordTypeList" /> that contains all the KeywordRecords that are
                common to all documents.
            </returns>
        </member>
        <member name="P:Hyland.Unity.DocumentTypeGroup.QueryWarningLevel">
            <summary>The Query Warning Level of the Document Type Group</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentTypeGroup.TranslatedName">
            <summary>The translated Name of the Document Type Group or Name if there is no translation.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentTypeGroup.ID">
            <summary>The ID of the Document Type Group</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentTypeGroup.Name">
            <summary>The Name of the Document Type Group</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentTypeGroupList">
            <summary>A list of Document Type Groups</summary>
        </member>
        <member name="T:Hyland.Unity.EditableKeywordModifier">
            <summary>This is for internal use only.</summary>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordModifier.RemoveKeyword(Hyland.Unity.Keyword)">
            <summary>Removes a Keyword from the Standalone or Single-Instance KeywordRecords</summary>
            <param name="keyword">Keyword to remove.</param>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordModifier.RemoveKeywordRecord(Hyland.Unity.KeywordRecord)">
            <summary>
                Removes a Multi-instance KeywordRecord. This will throw an exception if another
                KeywordRecord type is used.
            </summary>
            <param name="keywordRecord">KeywordRecord to remove.</param>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordModifier.UpdateKeyword(Hyland.Unity.Keyword,Hyland.Unity.Keyword)">
            <summary>Updates a Keyword from the Standalone or Single-Instance KeywordRecords</summary>
            <param name="oldKeyword">Old Keyword that needs updating.</param>
            <param name="newKeyword">New Keyword to use to when updating.</param>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordModifier.UpdateKeywordRecord(Hyland.Unity.EditableKeywordRecord)">
            <summary>
                Updates a Multi-instance KeywordRecord. This will throw an exception if another
                KeywordRecord type is used.
            </summary>
            <param name="keywordRecord">EditableKeywordRecord to use to update an existing KeywordRecord.</param>
        </member>
        <member name="T:Hyland.Unity.EditableKeywordRecord">
            <summary>A KeywordRecord used for Editing in Keyword Modification</summary>
        </member>
        <member name="P:Hyland.Unity.EditableKeywordRecord.KeywordRecordType">
            <summary>The KeywordRecordType of the Editable KeywordRecord</summary>
        </member>
        <member name="P:Hyland.Unity.EditableKeywordRecord.Keywords">
            <summary>The Keywords on the Editable KeywordRecord</summary>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(Hyland.Unity.Keyword)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keyword">Keyword to add.</param>
            <returns>The current EditableKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.Int64,System.String)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.Int64,System.Decimal)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.Int64,System.Double)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.Int64,System.DateTime)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.Int64,System.Int64)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.String,System.String)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.String,System.Decimal)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.String,System.Double)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.String,System.DateTime)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.AddKeyword(System.String,System.Int64)">
            <summary>Add a Keyword to the Editable KeywordRecord</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current EditableKeywordRecord,</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.RemoveKeyword(Hyland.Unity.Keyword)">
            <summary>Remove a Keyword from the Editable KeywordRecord</summary>
            <param name="keyword">Keyword to Remove</param>
            <returns>If the keyword was removed.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.UpdateKeyword(Hyland.Unity.Keyword,Hyland.Unity.Keyword)">
            <summary>Update a Keyword on the Editable KeywordRecord</summary>
            <param name="oldKeyword">Old Keyword that needs updating.</param>
            <param name="newKeyword">New Keyword to use to when updating.</param>
            <exception cref="T:System.InvalidOperationException">
                Throws if Old KeywordType and New KeywordType do not
                match.
            </exception>
            <returns>If the old was found to be replaced.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.Equals(System.Object)">
            <summary>Equals operator for the Editable KeywordRecord</summary>
            <param name="obj">Other EditableKeywordRecord to determine equality against.</param>
            <returns>If the EditableKeywordRecords were equivalent.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.GetHashCode">
            <summary>Get HashCode for the Editable KeywordRecord</summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.Clone">
            <summary>Clone the EditableKeywordRecord</summary>
            <returns>The cloned EditableKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecord.Equals(Hyland.Unity.EditableKeywordRecord)">
            <summary>Equals operator for the Editable KeywordRecord</summary>
            <param name="other">Other EditableKeywordRecord to determine equality against.</param>
            <returns>If the EditableKeywordRecords were equivalent.</returns>
        </member>
        <member name="T:Hyland.Unity.EditableKeywordRecordList">
            <summary>A list of Editable KeywordRecords</summary>
        </member>
        <member name="P:Hyland.Unity.EditableKeywordRecordList.Count">
            <summary>The count of the list</summary>
        </member>
        <member name="P:Hyland.Unity.EditableKeywordRecordList.IsReadOnly">
            <summary>Is the list read only</summary>
        </member>
        <member name="P:Hyland.Unity.EditableKeywordRecordList.Item(System.Int32)">
            <summary>Indexer for the Editable KeywordRecord List</summary>
            <param name="index">Index to use.</param>
            <returns>EditableKeywordRecord at the index.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.Add(Hyland.Unity.EditableKeywordRecord)">
            <summary>Add a Editable KeywordRecord</summary>
            <param name="item">EditableKeywordRecord to add.</param>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.Clear">
            <summary>Clear the list</summary>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.Contains(Hyland.Unity.EditableKeywordRecord)">
            <summary>Does the list contain an Editable KeywordRecord</summary>
            <param name="item">EditableKeywordRecord to test if it contained.</param>
            <returns>IF the EditableKeywordRecord is in the list.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.CopyTo(Hyland.Unity.EditableKeywordRecord[],System.Int32)">
            <summary>Copy the contents to the array.</summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Index in the array to start the copy at.</param>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.Remove(Hyland.Unity.EditableKeywordRecord)">
            <summary>Remove an Editable KeywordRecord from the list</summary>
            <param name="item">EditableKeywordRecord to remove.</param>
            <returns>If removal was successful.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.GetEnumerator">
            <summary>Gets an enumerator for the list</summary>
            <returns>The enumerator of the list.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.IndexOf(Hyland.Unity.EditableKeywordRecord)">
            <summary>Gets the Index of the Editable KeywordRecord</summary>
            <param name="item">EditableKeywordRecord to find index of.</param>
            <returns>The index or -1 if not found.</returns>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.Insert(System.Int32,Hyland.Unity.EditableKeywordRecord)">
            <summary>Insert a Editable KeywordRecord</summary>
            <param name="index">Index to insert at</param>
            <param name="item">EditableKeywordRecord to insert</param>
        </member>
        <member name="M:Hyland.Unity.EditableKeywordRecordList.RemoveAt(System.Int32)">
            <summary>Remove a Editable KeywordRecord</summary>
            <param name="index">Index to remove.</param>
        </member>
        <member name="T:Hyland.Unity.CheckOutData">
            <summary>The class that represents a persistent checkout.</summary>
        </member>
        <member name="P:Hyland.Unity.CheckOutData.CheckedOutUser">
            <summary>The current user who has checked out the document</summary>
        </member>
        <member name="P:Hyland.Unity.CheckOutData.CheckOutComment">
            <summary>The comments that were used when checking out this document.</summary>
        </member>
        <member name="P:Hyland.Unity.CheckOutData.Document">
            <summary>The document that corresponds to this checked out</summary>
        </member>
        <member name="P:Hyland.Unity.CheckOutData.CheckedOutUserID">
            <summary>The user id of the user has the checkout</summary>
        </member>
        <member name="M:Hyland.Unity.CheckOutData.CheckIn(Hyland.Unity.StoreRevisionProperties,Hyland.Unity.PageData)">
            <summary>Checks in the current checked out document with a new page data for new revision.</summary>
            <param name="revisionProperties">The properties that are used to check in the document.</param>
            <param name="newPageData">
                The pagadata containing the bytes for the checkin. This bytes in this
                pagedata will be come the latest revision.
            </param>
        </member>
        <member name="M:Hyland.Unity.CheckOutData.CreateStoreRevisionProperties(Hyland.Unity.FileType)">
            <summary>Creates a new <see cref="T:Hyland.Unity.StoreRevisionProperties" /> required for checkin.</summary>
            <param name="fileType">The fileType of the bytes of the checkin.</param>
            <returns>A newly created <see cref="T:Hyland.Unity.StoreRevisionProperties" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.CheckOutData.GetPageData">
            <summary>
                Returns the document bytes corresponding to checked out document. It returns the bytes of
                the default rendition of the latest revision.
            </summary>
            <returns>The pagedata containing the latest bytes of the document revision.</returns>
        </member>
        <member name="M:Hyland.Unity.CheckOutData.UndoCheckout">
            <summary>The document checkout is released and the document is no longer checked out.</summary>
        </member>
        <member name="T:Hyland.Unity.CheckOutDataList">
            <summary>A list of CheckOutData.</summary>
        </member>
        <member name="M:Hyland.Unity.CheckOutDataList.Find(Hyland.Unity.Document)">
            <summary>
                Searches the collection and returns the CheckoutData that corresponds to the specified
                document.
            </summary>
            <param name="document">Document used for the search</param>
            <returns>The <see cref="T:Hyland.Unity.CheckOutData" /> if one was found or null</returns>
        </member>
        <member name="M:Hyland.Unity.CheckOutDataList.FindAll(Hyland.Unity.User)">
            <summary>
                Searches the collection and returns a collection of all CheckoutData that is checked out
                by the specified user.
            </summary>
            <param name="user">The user used to filter the list</param>
            <returns>
                A <see cref="T:Hyland.Unity.CheckOutDataList" /> that contains all the <see cref="T:Hyland.Unity.CheckOutData" /> that
                matches the criteria
            </returns>
        </member>
        <member name="T:Hyland.Unity.CheckOutResult">
            <summary>The result of a checkout operation.</summary>
        </member>
        <member name="P:Hyland.Unity.CheckOutResult.CheckedOutUser">
            <summary>
                If the CheckOutStatus is <c>Succeeded</c> or <c>CheckedOutByDifferentUser</c>, then
                returns the user who has checked out. otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:Hyland.Unity.CheckOutResult.CheckOutData">
            <summary>Returns a <see cref="P:Hyland.Unity.CheckOutResult.CheckOutData" /> object if the checkout was successful.</summary>
        </member>
        <member name="P:Hyland.Unity.CheckOutResult.Status">
            <summary>
                The CheckOutStatus of the checkout operation. This should be checked before the
                CheckOutData is used.
            </summary>
        </member>
        <member name="T:Hyland.Unity.EDMManagement">
            <summary>Class that contains all the EDM related methods</summary>
        </member>
        <member name="M:Hyland.Unity.EDMManagement.CheckOut(Hyland.Unity.Document,System.String)">
            <summary>Tries to check out a document using the specified comment.</summary>
            <param name="document">The document that is to be checkout.</param>
            <param name="checkOutComment">A optional comment used when the document is checked out</param>
            <returns>
                A <see cref="T:Hyland.Unity.CheckOutResult" /> object that represents the result of the checkout
                operation.
            </returns>
        </member>
        <member name="M:Hyland.Unity.EDMManagement.GetAllCheckOuts">
            <summary>
                Returns all the checkout the current user has rights to. It can include the checkouts by
                other users. If the user is not a checkout administrator this method only returns the documents
                that are checkout by the user
            </summary>
            <returns>A <see cref="T:Hyland.Unity.CheckOutDataList" /></returns>
        </member>
        <member name="M:Hyland.Unity.EDMManagement.GetCheckOuts">
            <summary>
                Returns all the checkout associated with the current user. Even if the user is a checkout
                administrator this method only returns the documents that are checkout by the user
            </summary>
            <returns>A <see cref="T:Hyland.Unity.CheckOutDataList" /></returns>
        </member>
        <member name="M:Hyland.Unity.EDMManagement.GetExistingCheckOut(Hyland.Unity.Document)">
            <summary>Returns CheckOutData associated with the specified document.</summary>
            <param name="document">The document the checkouts belong to.</param>
            <returns>A <see cref="T:Hyland.Unity.CheckOutData" /> if a checkout exists for the document, otherwise returns
                <c>null</c>.</returns>
        </member>
        <member name="M:Hyland.Unity.EDMManagement.StampVersion(Hyland.Unity.Rendition,System.String)">
            <summary>Stamps a specific rendition of a document as a new version.</summary>
            <param name="rendition">The rendition to be stamped</param>
            <param name="versionName">The optional name of the version</param>
        </member>
        <member name="T:Hyland.Unity.EFormTemplate">
            <summary>A class that represents a EForm template</summary>
        </member>
        <member name="P:Hyland.Unity.EFormTemplate.Document">
            <summary>The document associated with the template.</summary>
        </member>
        <member name="P:Hyland.Unity.EFormTemplate.DocumentType">
            <summary>The document type that the template is associated with.</summary>
        </member>
        <member name="P:Hyland.Unity.EFormTemplate.Revision">
            <summary>The revision associated with the template</summary>
        </member>
        <member name="T:Hyland.Unity.EFormTemplateList">
            <summary>A collection of <see cref="T:Hyland.Unity.EFormTemplate" />.</summary>
        </member>
        <member name="T:Hyland.Unity.BatchStatus">
            <summary>Batch Status</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.Custom">
            <summary>Custom</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingIndex">
            <summary>Awaiting Index</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.IndexingInProgress">
            <summary>Indexing In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.Uncommitted">
            <summary>Uncommitted</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.IncompleteCommit">
            <summary>Incomplete commit</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.Committed">
            <summary>Committed</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.PurgeInProgress">
            <summary>Purge In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingFullTextOCR">
            <summary>Awaiting Full-Text OCR</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.DisconnectedScanningIncomplete">
            <summary>Disconnected Scanning Incomplete</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.IncompleteArchive">
            <summary>Incomplete Archive</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingIndexSecondary">
            <summary>Awaiting Secondary, or double-Blind, Indexing</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.SecondaryIndexingInProgress">
            <summary>Secondary Index In Progress or Double-Blind  Index In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.FailedFullTextOCR">
            <summary>Failed Full-Text OCR</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.DocumentSeparationQueue">
            <summary>Document Separation Queue</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ImageSegmentArchiverQueue">
            <summary>Image Segment Archiver Queue</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.Reindex">
            <summary>Reindex</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ReindexInProgress">
            <summary>Reindex In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.QAImageQuality">
            <summary>QA Image Quality</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.QAReview">
            <summary>QA Review</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.QANeedRescan">
            <summary>QA Need Rescan</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ManagerResolution">
            <summary>Manager Resolution</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.QAReindex">
            <summary>QA Reindex</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.QAReindexInProgress">
            <summary>QA Reindex In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.PDFConversion">
            <summary>PDF Conversion</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingArchiveLink">
            <summary>Awaiting Archive Link</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ExternalIndexing">
            <summary>External Indexing</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingBarcode">
            <summary>Awaiting Barcode</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingImageProcessing">
            <summary>Awaiting Image Processing</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.CustomBatchProcess">
            <summary>Custom Batch Process (Now known as Awaiting Custom Processing)</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingAutomatedIndex">
            <summary>Awaiting Automated Index</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.QAReviewInProgress">
            <summary>QA Review In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingIntelligentCaptureAP">
            <summary>
                Awaiting Intelligent Capture AP (formerly the AwaitingIntelligentIndex status, please
                update going forward)
            </summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingIntelligentIndex">
            <summary> Awaiting Intelligent Index </summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingQueueSorting">
            <summary>Awaiting Queue Sorting</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ArchivePreIndexEIS">
            <summary>Awaiting Pre-Index EIS</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ArchivePostIndexEIS">
            <summary>Awaiting Post-Index EIS</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ArchivePreCommitEIS">
            <summary>Awaiting Pre-Commit EIS</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingPostIndexQueueSorting">
            <summary>Awaiting Scan Queue Post-Index Sorting</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.FullPageOCRInProgress">
            <summary>Full-page OCR in Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.IntelligentAPInProgress">
            <summary>Intelligent AP in Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AdvancedCaptureInProgress">
            <summary>Advanced Capture In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingDocumentClassification">
            <summary>Awaiting Document Classification</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.DocumentClassificationInProgress">
            <summary>Document Classification In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingIntelligentCaptureEOB">
            <summary>Awaiting Intelligent Capture for EOB</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.IntelligentEOBInProgress">
            <summary>Intelligent Capture for EOB In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ImageProcessingInProgress">
            <summary>Image Processing In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.CustomBatchProcessInProgress">
            <summary>Custom Batch Process In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.AwaitingClassificationVerification">
            <summary>Awaiting gClassification Verification</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ClassificationVerificationInProgress">
            <summary>Classification Verification In Progress</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.ICAPVerification">
            <summary>ICAP Verification</summary>
        </member>
        <member name="F:Hyland.Unity.BatchStatus.SAPArchiveLinkComplete">
            <summary>Archive Link Complete</summary>
        </member>
        <member name="T:Hyland.Unity.BatchType">
            <summary>Batch Types</summary>
        </member>
        <member name="F:Hyland.Unity.BatchType.Undefined">
            <summary>Undefined batch type</summary>
        </member>
        <member name="F:Hyland.Unity.BatchType.Processor">
            <summary>Batch Type used for processing</summary>
        </member>
        <member name="F:Hyland.Unity.BatchType.Scan">
            <summary>Batch Type used for scanning</summary>
        </member>
        <member name="T:Hyland.Unity.CheckOutStatus">
            <summary>Enumeration that represents the status of CheckOut</summary>
        </member>
        <member name="F:Hyland.Unity.CheckOutStatus.Succeeded">
            <summary>The checkout was successful</summary>
        </member>
        <member name="F:Hyland.Unity.CheckOutStatus.AlreadyCheckedOut">
            <summary>The document is already checked out by this user</summary>
        </member>
        <member name="F:Hyland.Unity.CheckOutStatus.CheckedOutByDifferentUser">
            <summary>The document is already checked out by a different user</summary>
        </member>
        <member name="F:Hyland.Unity.CheckOutStatus.UserNotAuthorizedToCheckOut">
            <summary>The user was not authorized to perform checkout</summary>
        </member>
        <member name="F:Hyland.Unity.CheckOutStatus.DocumentDoesNotAllowCheckOuts">
            <summary>The document is configured to allow checkout</summary>
        </member>
        <member name="F:Hyland.Unity.CheckOutStatus.CheckOutFailed">
            <summary>
                The checkout failed. There are more than once reason why a checkout may have failed, use
                the diagnostics console with tracing turned on to see the issue.
            </summary>
        </member>
        <member name="T:Hyland.Unity.CurrencyFlags">
            <summary>Flags used for Currency Formats</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.None">
            <summary>None</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.CurrencySymbol">
            <summary>Currency Symbol</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.SymbolAfter">
            <summary>Symbol After</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.Whitespace">
            <summary>Whitespace</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.MinusSign">
            <summary>Minus Sign</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.MinusAfter">
            <summary>Minus After</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.SymbolInsideNegative">
            <summary>Symbol Inside Negative</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.LeadingZero">
            <summary>Leading Zero</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.GroupSeparator">
            <summary>Group Separator</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.SymbolAfterOnNegative">
            <summary>Symbol After On Negative</summary>
        </member>
        <member name="F:Hyland.Unity.CurrencyFlags.WhitespaceOnNegative">
            <summary>Whitespace On Negative</summary>
        </member>
        <member name="T:Hyland.Unity.CustomQueryType">
            <summary>Custom Query Type</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.Undefined">
            <summary>Undefined</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.DocumentType">
            <summary>DocumentType</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.DocumentTypeGroup">
            <summary>DocumentTypeGroup</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.Keyword">
            <summary>Keyword</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.Custom">
            <summary>Custom</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.HTMLDocumentType">
            <summary>HTML DocumentType</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.HTMLDocumentTypeGroup">
            <summary>HTML DocumentTypeGroup</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.HTMLKeyword">
            <summary>HTML Keyword</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.FullText">
            <summary>FullText</summary>
        </member>
        <member name="F:Hyland.Unity.CustomQueryType.HTMLFullText">
            <summary>HTML FullText</summary>
        </member>
        <member name="T:Hyland.Unity.DisplayColumnType">
            <summary>Display Column Types that can be specified on a query.</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.Keyword">
            <summary>Can't actually be added this way; here for use in DisplayColumn.Type</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.Unknown">
            <summary>Unknown Display Type</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.DocumentID">
            <summary>Display the Document Handle</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.DocumentName">
            <summary>Display the Document Name</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.DocumentTypeID">
            <summary>Display the Document Type ID</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.DocumentDate">
            <summary>Display the Document Date</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.ArchivalDate">
            <summary>Display the Document Archival Date</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.Institution">
            <summary>Display the Institution</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.AuthorID">
            <summary>Display the Document's Author ID</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.Batch">
            <summary>Display the Document's Batch ID</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.RevisionCount">
            <summary>Display the Document's Revision Count</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.DocumentTypeGroup">
            <summary>Display the Document Type Group</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.DocumentTypeName">
            <summary>Display the Document Type Name</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.AuthorName">
            <summary>The name of the Author</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.NoteContents">
            <summary>Display the Document's Note Contents</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.NoteCount">
            <summary>Display the number of notes on the Document.</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.NoteTypeName">
            <summary>Display the Document's Note Type Name</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.WorkflowQueue">
            <summary>Display the Document's Current Workflow Queue</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.ArrivalTime">
            <summary>Display the Document's Arrival Time in a Workflow Queue</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.FullTextScore">
            <summary>
                Display the Document's FullText Score. This will always be blank if the DocumentQuery does
                not have a valid call to AddTextSearchConstraint().
            </summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.FullTextFileTypeName">
            <summary>
                Display the Document's FullText File Type Name. This will always be blank if the
                DocumentQuery does not have a valid call to AddTextSearchConstraint().
            </summary>
        </member>
        <member name="F:Hyland.Unity.DisplayColumnType.FullTextSummary">
            <summary>
                Display the Document's FullText Summary. This will always be blank if the DocumentQuery
                does not have a valid call to AddTextSearchConstraint().
            </summary>
        </member>
        <member name="T:Hyland.Unity.DisplayType">
            <summary>OnBase Display Types</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.DestroyedByRecordsManagement">
            <summary>Destroyed By Records Management</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.NoVersions">
            <summary>No Versions</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Undefined">
            <summary>Undefined</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Text">
            <summary>Text</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Image">
            <summary>Image</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.KeyView">
            <summary>Key View</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Executable">
            <summary>Executable</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Database">
            <summary>Database</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Monarch">
            <summary>Monarch</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Reserved">
            <summary>Reserved</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.HPPcl">
            <summary>HP Pcl</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.VIP">
            <summary>VIP</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.OleServer">
            <summary>Ole Server</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.OleActivePage">
            <summary>Ole Active Page</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Pdf">
            <summary>Pdf</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Html">
            <summary>Html</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PCLFilter">
            <summary>PCL Filter</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.HitHighlights">
            <summary>Hit Highlights</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.ElectronicForm">
            <summary>Electronic Form</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.ApproveITElectronicSignature">
            <summary>Approve IT Electronic Signature</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.VirtualEForm">
            <summary>Virtual EForm</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.DynamicDocument">
            <summary>Dynamic Document</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.AFP">
            <summary>AFP</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PclDictionary">
            <summary>Pcl Dictionary</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.DJDE">
            <summary>DJDE</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PclFullSize">
            <summary>Pcl Full Size</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Xml">
            <summary>Xml</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Verity">
            <summary>Verity</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Outlook">
            <summary>Outlook</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PclSelfContain">
            <summary>Pcl Self Contain</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PclOld">
            <summary>Pcl Old</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PdfTemplate">
            <summary>PDF Template</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PhysicalRecord">
            <summary>Physical Record</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.LotusNotes">
            <summary>Lotus Notes</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.InternalXML">
            <summary>Internal XML</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PendingVerity">
            <summary>Pending Verity</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.HtmlUnicode">
            <summary>Html Unicode</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.SpicerDocument">
            <summary>Spicer Document</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.HPPcl2">
            <summary>HP Pcl2</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.HL7Waveform">
            <summary>HL7 Waveform</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.FormDocs">
            <summary>Form Docs</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.DICOMStudy">
            <summary>DICOM Study</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.XDP">
            <summary>Adobe XDP</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.Midmark">
            <summary>Midmark</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.MeditechArchiveReport">
            <summary>Meditech Archive Report</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.EngineeringDrawing">
            <summary>Engineering Drawing</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.MidmarkStressSDC">
            <summary>Midmark Stress SDC</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.UnityForm">
            <summary>Unity Form</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.UnityFormImage">
            <summary>Unity Form Image</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.ImageRenderedPdf">
            <summary>Image Rendered PDF</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.ZippedHtmlArchive">
            <summary>Zipped HTML Archive</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.HitHighlightedImage">
            <summary>HitHighlighted Image</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.RawText">
            <summary>Raw Text Report</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.EML">
            <summary>EML</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.OnBaseVNADICOM">
            <summary>OnBase VNA DICOM</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.MediaStream">
            <summary>OnBase Media Stream</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.ClassificationConfig">
            <summary>Classification engine configuration file</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.GeolocationMapState">
            <summary>Geolocation Map State</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.CADDocument">
            <summary>CAD Document</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.ZipCompressionArchive">
            <summary>Zip Compression Archive</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.ConfigurationPackage">
            <summary>Configuration Package</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.SolutionPackage">
            <summary>Solution Package</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PlaceholderFile">
            <summary>Placeholder File</summary>
        </member>
        <member name="F:Hyland.Unity.DisplayType.PclOverlay">
            <summary>PCL Overlay</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentLockStatus">
            <summary>The Status types of Document Locks</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentLockStatus.LockObtained">
            <summary>The Document was not locked before and is now locked for modifying keywords.</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentLockStatus.AlreadyLocked">
            <summary>The Document is already locked.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentRetrievalOptions">
            <summary>Options used to specify how document retrieval should work</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentRetrievalOptions.None">
            <summary>No option specified</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentRetrievalOptions.LoadKeywords">
            <summary>
                Load keywords along with the document information. Note: This reduces performance and
                should be set to true only if you understand the database and application server load that
                could be caused by this. Should be set to true only if the keywords of each document are going
                to be processed.
            </summary>
        </member>
        <member name="F:Hyland.Unity.DocumentRetrievalOptions.LoadRevisionsAndVersions">
            <summary>
                Load the revisions and any versions along with the document information. Note: This
                reduces performance and should be set to true only if you understand the database and
                application server load that could be caused by this. Should be set to true only if the
                revisions and/or versions of each document are going to be processed.
            </summary>
        </member>
        <member name="F:Hyland.Unity.DocumentRetrievalOptions.LoadNotes">
            <summary>
                Load notes along with the document information. Note: This reduces performance and should
                be set to true only if you understand the database and application server load that could be
                caused by this. Should be set to true only if the notes of each document are going to be
                processed.
            </summary>
        </member>
        <member name="T:Hyland.Unity.DocumentStatus">
            <summary>Document status enumeration</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentStatus.Active">
            <summary>Document is Active</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentStatus.Unindexed">
            <summary>Document is not yet assigned</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentStatus.Deleted">
            <summary>Document is deleted</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentTypePrivileges">
            <summary>User Privileges for DocumentTypes</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.None">
            <summary>No special privileges</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.DocumentCreation">
            <summary>Document Creation</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.DocumentViewing">
            <summary>Document Viewing</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.DocumentDeletion">
            <summary>Document Deletion</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.DocumentModification">
            <summary>Document Modification</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.DocumentRotation">
            <summary>Document Rotation</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.ReindexDocument">
            <summary>Reindex Document</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.PrintDocument">
            <summary>Print Document</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.MailDocument">
            <summary>Mail Document</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.MailInternalDocument">
            <summary>Mail Internal Document</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.RevisionControl">
            <summary>Revision Control</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.CreateDeleteRevisions">
            <summary>Create/Delete Revisions</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.ModifyKeywords">
            <summary>Modify Keywords. This privilege is always enforced by OnBase.</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.ViewKeywords">
            <summary>View Keywords</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.ViewVersions">
            <summary>View Versions</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.CreateVersions">
            <summary>Create Versions</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.AccessRestrictedKeywords">
            <summary>Access Restricted Keywords</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.CreateReference">
            <summary>Create Reference</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.DocumentHistory">
            <summary>View Document History</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.CopyToClipboard">
            <summary>Allow copy to clipboard</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentTypePrivileges.DeleteDocumentPage">
            <summary>Delete Document Pages</summary>
        </member>
        <member name="T:Hyland.Unity.EnvelopePermissions">
            <summary>Permissions for an Envelope</summary>
        </member>
        <member name="F:Hyland.Unity.EnvelopePermissions.NoShare">
            <summary>Envelope is not shared to another user</summary>
        </member>
        <member name="F:Hyland.Unity.EnvelopePermissions.View">
            <summary>Envelope can be viewed by another user</summary>
        </member>
        <member name="F:Hyland.Unity.EnvelopePermissions.Add">
            <summary>Another user can add documents to the envelope</summary>
        </member>
        <member name="F:Hyland.Unity.EnvelopePermissions.Delete">
            <summary>Another user can delete documents from the envelope</summary>
        </member>
        <member name="F:Hyland.Unity.EnvelopePermissions.FullControl">
            <summary>Another user has full control of the envelope</summary>
        </member>
        <member name="T:Hyland.Unity.FolderContentType">
            <summary>Describes the kinds of contents this folder can hold</summary>
        </member>
        <member name="F:Hyland.Unity.FolderContentType.NoneConfigured">
            <summary>Nothing--misconfiguration or system folder type</summary>
        </member>
        <member name="F:Hyland.Unity.FolderContentType.DynamicDocType">
            <summary>Documents (dynamically)</summary>
        </member>
        <member name="F:Hyland.Unity.FolderContentType.Static">
            <summary>Documents (statically)</summary>
        </member>
        <member name="F:Hyland.Unity.FolderContentType.DynamicStatic">
            <summary>Documents (both dynamically and statically)</summary>
        </member>
        <member name="F:Hyland.Unity.FolderContentType.DynamicDocTypeGroup">
            <summary>Documents (based on doc type group, dynamically)</summary>
        </member>
        <member name="F:Hyland.Unity.FolderContentType.RecordsManaged">
            <summary>Records Management-based</summary>
        </member>
        <member name="T:Hyland.Unity.FolderRetrievalOptions">
            <summary>Options used to specify how folder retrieval should work</summary>
        </member>
        <member name="F:Hyland.Unity.FolderRetrievalOptions.None">
            <summary>No option specified</summary>
        </member>
        <member name="F:Hyland.Unity.FolderRetrievalOptions.LoadKeywords">
            <summary>Load keywords along with the folder information</summary>
        </member>
        <member name="T:Hyland.Unity.FolderTypePrivileges">
            <summary>User privileges for folder types</summary>
        </member>
        <member name="F:Hyland.Unity.FolderTypePrivileges.None">
            <summary>No privilege</summary>
        </member>
        <member name="F:Hyland.Unity.FolderTypePrivileges.FolderSystem">
            <summary>Ability to open foldering</summary>
        </member>
        <member name="F:Hyland.Unity.FolderTypePrivileges.View">
            <summary>View folders and their contents</summary>
        </member>
        <member name="F:Hyland.Unity.FolderTypePrivileges.Delete">
            <summary>Delete folders</summary>
        </member>
        <member name="F:Hyland.Unity.FolderTypePrivileges.ModifyKeywords">
            <summary>Modify folder keywords. This privilege is always enforced by OnBase.</summary>
        </member>
        <member name="F:Hyland.Unity.FolderTypePrivileges.Create">
            <summary>Create folders</summary>
        </member>
        <member name="F:Hyland.Unity.FolderTypePrivileges.AddItems">
            <summary>Add items to folders</summary>
        </member>
        <member name="F:Hyland.Unity.FolderTypePrivileges.RemoveItems">
            <summary>Remove items from folders</summary>
        </member>
        <member name="T:Hyland.Unity.ImageContentType">
            <summary>Available Image Content Types</summary>
        </member>
        <member name="F:Hyland.Unity.ImageContentType.Tiff">
            <summary>
                Tiff Image. This is used as the ImageContentType if none is specified. Rendered pageData
                will be Group 4 Tiff if the original document is Group 4 Tiff or a text document.  Otherwise,
                the rendered pageData will be LZW Tiff, which may result in a larger file.
            </summary>
        </member>
        <member name="F:Hyland.Unity.ImageContentType.Jpeg">
            <summary>Jpeg Image (not supported by GetDocument)</summary>
        </member>
        <member name="F:Hyland.Unity.ImageContentType.TiffLossless">
            <summary>
                Lossless Tiff Image. If the document is a colorless image (bit depth equal to 1), the
                rendered pageData will be Group 4 Tiff.  If the document is a color image (bit depth greater
                than 8), the rendered pageDdata will be old-styled JPEG compressed tiff. Otherwise (bit depth
                of 2 to 8), the document will be rendered as LZW tiff.
            </summary>
        </member>
        <member name="F:Hyland.Unity.ImageContentType.TiffGroupIV">
            <summary>Group IV Tiff Image</summary>
        </member>
        <member name="F:Hyland.Unity.ImageContentType.DetermineByBitDepth">
            <summary>
                Use this to dynamically determine the appropriate file type to return based on the bit
                depth of the image. Using this will use the ImageRenderingStrategy.DetermineImageTypeForClient
                logic. If BW will return Group IV Tiff, if less than 8 bits but not bi-tonal will return LZW
                TIFF, if greater than 8 but less than 32 bits will return a JPEG, if greater than 32 bits will
                return a PNG.
            </summary>
        </member>
        <member name="T:Hyland.Unity.KeywordDataType">
            <summary>The Data types for Keywords</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.Undefined">
            <summary>Unknown</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.Numeric9">
            <summary>A 9 digit number</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.Numeric20">
            <summary>A 20 digit number</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.AlphaNumeric">
            <summary>A string</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.Currency">
            <summary>Currency</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.SpecificCurrency">
            <summary>A Specific Currency</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.Date">
            <summary>Date only</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.DateTime">
            <summary>Date and Time</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordDataType.FloatingPoint">
            <summary>A floating point number</summary>
        </member>
        <member name="T:Hyland.Unity.KeywordOperator">
            <summary>Keyword Operations to Values</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordOperator.Equal">
            <summary>Equal</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordOperator.LessThan">
            <summary>Less Than</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordOperator.GreaterThan">
            <summary>Greater Than</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordOperator.LessThanEqual">
            <summary>Less Than Equal</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordOperator.GreaterThanEqual">
            <summary>Greater Than Equal</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordOperator.NotEqual">
            <summary>Not Equal</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordOperator.Literal">
            <summary>Literal</summary>
        </member>
        <member name="T:Hyland.Unity.KeywordRelation">
            <summary>Keyword Relations to each other for querying</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordRelation.And">
            <summary>And</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordRelation.Or">
            <summary>Or</summary>
        </member>
        <member name="F:Hyland.Unity.KeywordRelation.To">
            <summary>To</summary>
        </member>
        <member name="T:Hyland.Unity.LicenseType">
            <summary>The license type to be used when connecting</summary>
        </member>
        <member name="F:Hyland.Unity.LicenseType.Default">
            <summary>Use the default licensing, usually concurrent client license.</summary>
        </member>
        <member name="F:Hyland.Unity.LicenseType.EnterpriseCoreAPI">
            <summary>Use the Enterprise Core API license.</summary>
        </member>
        <member name="F:Hyland.Unity.LicenseType.QueryMetering">
            <summary>
                Use the query metering license. The license is also referred to as Core Query API
                (Retrievals Per Hour).
            </summary>
        </member>
        <member name="T:Hyland.Unity.NamedLicenseType">
            <summary>The type of User License</summary>
        </member>
        <member name="F:Hyland.Unity.NamedLicenseType.NamedClient">
            <summary>Named Client License</summary>
        </member>
        <member name="F:Hyland.Unity.NamedLicenseType.NamedWorkflow">
            <summary>Named Workflow License</summary>
        </member>
        <member name="F:Hyland.Unity.NamedLicenseType.NamedWorkViewUser">
            <summary>Named WorkView License</summary>
        </member>
        <member name="T:Hyland.Unity.NoteFlavor">
            <summary>Different types of Notes</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.Note">
            <summary>None</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.Highlight">
            <summary>Highlight</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.Compound">
            <summary>Compound</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.Redaction">
            <summary>Redaction</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.Arrow">
            <summary>Arrow</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.Ellipse">
            <summary>Ellipse</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.OverlappedText">
            <summary>OverlappedText</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.IconStamp">
            <summary>IconStamp</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.Staple">
            <summary>Staple</summary>
        </member>
        <member name="F:Hyland.Unity.NoteFlavor.BackStaple">
            <summary>BackStaple</summary>
        </member>
        <member name="T:Hyland.Unity.NotePrivilege">
            <summary>Note Privileges</summary>
        </member>
        <member name="F:Hyland.Unity.NotePrivilege.None">
            <summary>None</summary>
        </member>
        <member name="F:Hyland.Unity.NotePrivilege.Create">
            <summary>Create</summary>
        </member>
        <member name="F:Hyland.Unity.NotePrivilege.Modify">
            <summary>Modify</summary>
        </member>
        <member name="F:Hyland.Unity.NotePrivilege.Delete">
            <summary>Delete</summary>
        </member>
        <member name="F:Hyland.Unity.NotePrivilege.View">
            <summary>View</summary>
        </member>
        <member name="T:Hyland.Unity.NoteTypeDisplaySettings">
            <summary>Note Display Options</summary>
        </member>
        <member name="F:Hyland.Unity.NoteTypeDisplaySettings.None">
            <summary>None</summary>
        </member>
        <member name="F:Hyland.Unity.NoteTypeDisplaySettings.RepeatOnAllRevisions">
            <summary>Repeat on All Revisions</summary>
        </member>
        <member name="T:Hyland.Unity.PageRotation">
            <summary>Defines the Rotation applied on a Page</summary>
        </member>
        <member name="F:Hyland.Unity.PageRotation.Rotate_0">
            <summary>No rotation</summary>
        </member>
        <member name="F:Hyland.Unity.PageRotation.Rotate_90">
            <summary>90 degree clockwise rotation</summary>
        </member>
        <member name="F:Hyland.Unity.PageRotation.Rotate_180">
            <summary>180 degree clockwise rotation</summary>
        </member>
        <member name="F:Hyland.Unity.PageRotation.Rotate_270">
            <summary>90 degree counter-clockwise rotation</summary>
        </member>
        <member name="T:Hyland.Unity.PrintOrientation">
            <summary>The orientation of the documents</summary>
        </member>
        <member name="F:Hyland.Unity.PrintOrientation.Portrait">
            <summary>Portrait mode</summary>
        </member>
        <member name="F:Hyland.Unity.PrintOrientation.Landscape">
            <summary>Landscape mode</summary>
        </member>
        <member name="T:Hyland.Unity.PrintRange">
            <summary>The range of documents to print</summary>
        </member>
        <member name="F:Hyland.Unity.PrintRange.All">
            <summary>All pages are printed. PageStart and PageEnd are ignored.</summary>
        </member>
        <member name="F:Hyland.Unity.PrintRange.Range">
            <summary>Pages between PageStart and PageEnd are printed</summary>
        </member>
        <member name="T:Hyland.Unity.PurgeFlags">
            <summary>Flags used to indicate specific behaviors of a purge action</summary>
        </member>
        <member name="F:Hyland.Unity.PurgeFlags.None">
            <summary>Flag indicating no actions to be done during purge</summary>
        </member>
        <member name="F:Hyland.Unity.PurgeFlags.Document">
            <summary>Flag indicating to purge the document record</summary>
        </member>
        <member name="F:Hyland.Unity.PurgeFlags.Keywords">
            <summary>Flag indicating to purge the keywords for the document</summary>
        </member>
        <member name="F:Hyland.Unity.PurgeFlags.Pages">
            <summary>Flag indicating to purge the document page entries for the document</summary>
        </member>
        <member name="F:Hyland.Unity.PurgeFlags.PageFiles">
            <summary>Flag indicating to purge the document page files for the document</summary>
        </member>
        <member name="T:Hyland.Unity.QueryWarningLevel">
            <summary>Query Warning Levels</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.Uninitialized">
            <summary>Uninitialized</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnNone">
            <summary>No warning</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnAndRunEitherDateOrKeywordRequired">
            <summary>Run Date Or Keyword Required</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnAndRunDateRequired">
            <summary>Run Date Required</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnAndRunKeywordRequired">
            <summary>Run Keyword Required</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnAndRunBothDateAndKeywordRequired">
            <summary>Run Date and Keyword Required</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnAndCancelEitherDateOrKeywordRequired">
            <summary>Cancel Date or Keyword Required</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnAndCancelDateRequired">
            <summary>Cancel Date Required</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnAndCancelKeywordRequired">
            <summary>Cancel Keyword Required</summary>
        </member>
        <member name="F:Hyland.Unity.QueryWarningLevel.WarnAndCancelBothDateAndKeywordRequired">
            <summary>Cancel with Date and Keyword Required</summary>
        </member>
        <member name="T:Hyland.Unity.QueueType">
            <summary>PrintQueue types</summary>
        </member>
        <member name="F:Hyland.Unity.QueueType.LocalPrintQueue">
            <summary>LocalPrintQueue</summary>
        </member>
        <member name="F:Hyland.Unity.QueueType.NetworkPrintQueue">
            <summary>NetworkPrintQueue</summary>
        </member>
        <member name="T:Hyland.Unity.RecordType">
            <summary>The types of KeywordRecords</summary>
        </member>
        <member name="F:Hyland.Unity.RecordType.Invalid">
            <summary>Unknown</summary>
        </member>
        <member name="F:Hyland.Unity.RecordType.SingleInstance">
            <summary>Single Instance Keyword Record</summary>
        </member>
        <member name="F:Hyland.Unity.RecordType.MultiInstance">
            <summary>Multi Instance Keyword Record</summary>
        </member>
        <member name="F:Hyland.Unity.RecordType.StandAlone">
            <summary>The Record that contains the StandAlone Keywords</summary>
        </member>
        <member name="T:Hyland.Unity.RedactionFlavor">
            <summary>The types of Redactions</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.TopazSignature">
            <summary>Topaz Signature</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.MarkupHighlight">
            <summary>Markup Highlight</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.MarkupEllipse">
            <summary>Markup Ellipse</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.MarkupArrow">
            <summary>Markup Arrow</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.MarkupText">
            <summary>Markup Text</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.MarkupRevision">
            <summary>Markup Revision</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.MarkupLine">
            <summary>Markup Line</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.RedactionBlack">
            <summary>Redaction Black</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.RedactionWhite">
            <summary>Redaction White</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.ColorRectangle">
            <summary>Color Rectangle</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.CheckMark">
            <summary>Checkmark Markup</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionFlavor.FreeHand">
            <summary>Freehand Drawn Markup</summary>
        </member>
        <member name="T:Hyland.Unity.RedactionMetric">
            <summary>Redaction Units of Measurement</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionMetric.Pixels">
            <summary>Pixels</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionMetric.Inches">
            <summary>Inches</summary>
        </member>
        <member name="F:Hyland.Unity.RedactionMetric.Centimeters">
            <summary>Centimeters</summary>
        </member>
        <member name="T:Hyland.Unity.ScanMode">
            <summary>Scan mode settings.</summary>
        </member>
        <member name="F:Hyland.Unity.ScanMode.None">
            <summary>No scan mode is selected</summary>
        </member>
        <member name="F:Hyland.Unity.ScanMode.NoIndex">
            <summary>Scan Mode - No Index</summary>
        </member>
        <member name="F:Hyland.Unity.ScanMode.PreIndex">
            <summary>Scan Mode - Pre-Index</summary>
        </member>
        <member name="F:Hyland.Unity.ScanMode.FullIndex">
            <summary>Scan Mode - Full Index</summary>
        </member>
        <member name="T:Hyland.Unity.SearchType">
            <summary>Search Types</summary>
        </member>
        <member name="F:Hyland.Unity.SearchType.Numeric">
            <summary>Numeric</summary>
        </member>
        <member name="F:Hyland.Unity.SearchType.FormattedNumeric">
            <summary>Formatted Numeric</summary>
        </member>
        <member name="F:Hyland.Unity.SearchType.Currency">
            <summary>Currency</summary>
        </member>
        <member name="F:Hyland.Unity.SearchType.Text">
            <summary>Text</summary>
        </member>
        <member name="T:Hyland.Unity.StoreDocumentOptions">
            <summary>Document Storage Options</summary>
        </member>
        <member name="F:Hyland.Unity.StoreDocumentOptions.AddToAll">
            <summary>All Document Listeners are fired</summary>
        </member>
        <member name="F:Hyland.Unity.StoreDocumentOptions.SkipWorkflow">
            <summary>Skip the Workflow Document Listener</summary>
        </member>
        <member name="F:Hyland.Unity.StoreDocumentOptions.SkipFullText">
            <summary>Skip the FullText Document Listener</summary>
        </member>
        <member name="F:Hyland.Unity.StoreDocumentOptions.SkipAutoFoldering">
            <summary>Skip the Auto Foldering Document Listener</summary>
        </member>
        <member name="T:Hyland.Unity.TextSearchOptions">
            <summary>Text search options. This is a Flag and can be combined to specify more than one option.</summary>
        </member>
        <member name="F:Hyland.Unity.TextSearchOptions.None">
            <summary>No options specified.</summary>
        </member>
        <member name="F:Hyland.Unity.TextSearchOptions.CaseSensitive">
            <summary>Case sensitive search.</summary>
        </member>
        <member name="F:Hyland.Unity.TextSearchOptions.WholeWordMatch">
            <summary>Only match whole word.</summary>
        </member>
        <member name="F:Hyland.Unity.TextSearchOptions.UseWildCards">
            <summary>Wildcard search.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkViewObjectRetrievalOptions">
            <summary>Options used to specify how workview object retrieval should work</summary>
        </member>
        <member name="F:Hyland.Unity.WorkViewObjectRetrievalOptions.None">
            <summary>No option specified</summary>
        </member>
        <member name="T:Hyland.Unity.BatchLockStatusInternal">
            <summary>The Status types for BatchLocks</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLockStatusInternal.NoLockInPlace">
            <summary>No lock is in place for the object</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLockStatusInternal.LockedBySameUserDifferentSession">
            <summary>Object is locked by the same user on a different session</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLockStatusInternal.LockedBySameUserSameSession">
            <summary>Object is locked by the same user on the same session</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLockStatusInternal.LockedByDifferentUser">
            <summary>Object is locked by a different user</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLockStatusInternal.LockObtained">
            <summary>Lock was obtained on the object</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLockStatusInternal.LockFailed">
            <summary>Object failed to obtain lock</summary>
        </member>
        <member name="F:Hyland.Unity.BatchLockStatusInternal.LockReleased">
            <summary>Object released the lock</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentLockStatusInternal">
            <summary>The Status types of Document Locks</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentLockStatusInternal.DocumentLockObtained">
            <summary>The Document is not locked</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentLockStatusInternal.DocLockLock">
            <summary>The Document is locked by a Document Lock (doclock table)</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentLockStatusInternal.DocCheckoutLock">
            <summary>The Document is locked by a Document Lock (doccheckout table)</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentLockStatusInternal.DocCheckoutLockSameSession">
            <summary>The current session has a Document Lock (doccheckout table) on the document</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentLockStatusInternal.PersistentLock">
            <summary>The document is locked by a Persistent Lock</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentLockStatusInternal.ProcessLock">
            <summary>
                The document is locked by a LockKey entry. This is an internal lock maintained by OnBase
                to prevent race conditions.
            </summary>
        </member>
        <member name="T:Hyland.Unity.FileTypes">
            <summary>OnBase FileTypes</summary>
        </member>
        <member name="T:Hyland.Unity.InternalNoteTypeDisplaySettings">
            <summary>Internal Note Type Display Options</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.None">
            <summary>None</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.Open">
            <summary>Display as Open</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.AllPages">
            <summary>Repeat on All Pages</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.RedactAsBlack">
            <summary>Redact as Black</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.RedactAsWhite">
            <summary>Redact as White</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.AllRevisions">
            <summary>Repeat on All Revisions</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.HideNoteWindow">
            <summary>Hide Note Window</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.PrivacyNoView">
            <summary>Privacy - No View</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.PrivacyNoModify">
            <summary>Privacy - No Modify</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.PrivacyNoDelete">
            <summary>Privacy - No Delete</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.FloatOnWindow">
            <summary>Float on Window</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.OpaqueInViewer">
            <summary>Opaque in Viewer</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.CreateOpenNoteWindow">
            <summary>Create Open Note Window</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.ForcePrint">
            <summary>Force Print</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.NoPrivacyOptions">
            <summary>Privacy - No Privacy Options</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.Moveable">
            <summary>Moveable</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.DeleteWithPage">
            <summary>Delete with Page</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.StampKeepOriginalSize">
            <summary>Stamp - Keep Original Size</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.StampTransparent">
            <summary>Stamp - Transparent</summary>
        </member>
        <member name="F:Hyland.Unity.InternalNoteTypeDisplaySettings.NeverPrint">
            <summary>Never Print</summary>
        </member>
        <member name="T:Hyland.Unity.Envelope">
            <summary>A sealed class representing a OnBase Envelope</summary>
        </member>
        <member name="P:Hyland.Unity.Envelope.CreatedBy">
            <summary>Returns the OnBase user than owns/created the envelope.</summary>
            <value>The user ID.</value>
        </member>
        <member name="P:Hyland.Unity.Envelope.Permissions">
            <summary>Returns the user permissions of the envelope.</summary>
            <value>The envelope user permissions.</value>
        </member>
        <member name="P:Hyland.Unity.Envelope.ID">
            <summary>Gets the envelope ID.</summary>
            <value>The envelope ID.</value>
        </member>
        <member name="P:Hyland.Unity.Envelope.Name">
            <summary>Gets the envelope name.</summary>
            <value>The envelope name.</value>
        </member>
        <member name="M:Hyland.Unity.Envelope.AddDocuments(System.Collections.Generic.IEnumerable{Hyland.Unity.Document})">
            <summary>Adds documents to current Envelope</summary>
            <param name="documents">An IEnumerable Document collection</param>
            <exception cref="T:System.ArgumentException">Thrown if no documents are present in the collection.</exception>
        </member>
        <member name="M:Hyland.Unity.Envelope.GetDocuments">
            <summary>Returns all documents from the envelope</summary>
            <returns>Documents that exist in the envelope.</returns>
        </member>
        <member name="M:Hyland.Unity.Envelope.GetSharedUsers">
            <summary>Gets shared users for the envelope.</summary>
            <returns>Returns the EnvelopeUserList of the shared users</returns>
        </member>
        <member name="M:Hyland.Unity.Envelope.GetSharePermissions(Hyland.Unity.User)">
            <summary>
                Gets share permissions of the specified user on the envelope.  The user must already have
                the envelope shared to them.
            </summary>
            <param name="shareUser">The OnBase user which the envelope is shared to</param>
            <returns>Returns the EnvelopePermissions of the shared user</returns>
        </member>
        <member name="M:Hyland.Unity.Envelope.RemoveAllDocuments">
            <summary>Removes all document from the current Envelope</summary>
        </member>
        <member name="M:Hyland.Unity.Envelope.RemoveDocuments(System.Collections.Generic.IEnumerable{Hyland.Unity.Document})">
            <summary>Removes documents from the current Envelope</summary>
            <param name="documents">An IEnumerable Document collection</param>
            <exception cref="T:System.ArgumentException">Thrown if no documents are present in the collection.</exception>
        </member>
        <member name="T:Hyland.Unity.EnvelopeList">
            <summary>A list of Envelopes</summary>
        </member>
        <member name="M:Hyland.Unity.EnvelopeList.FindAll(System.String)">
            <summary>Finds all of the envelopes that have the provided name.</summary>
            <param name="name">The name to search the envelope list.</param>
            <returns>
                A EnvelopeList that contains envelopes with the specified name. Returns a empty list if
                there is no match.
            </returns>
        </member>
        <member name="T:Hyland.Unity.EnvelopeManagement">
            <summary>Envelope Operations</summary>
        </member>
        <member name="M:Hyland.Unity.EnvelopeManagement.CreateEditableEnvelopeProperties">
            <summary>Creates an EnvelopeProperties object</summary>
            <returns>Returns EnvelopeProperties containing the envelope name</returns>
        </member>
        <member name="M:Hyland.Unity.EnvelopeManagement.CreateEnvelope(Hyland.Unity.EnvelopeProperties)">
            <summary>Creates a new envelope</summary>
            <param name="props">Envelope properties used for envelope creation</param>
            <returns>Returns an <see cref="T:Hyland.Unity.Envelope" /> object the represents the newly created envelope.</returns>
        </member>
        <member name="M:Hyland.Unity.EnvelopeManagement.CreateNewEnvelopeProperties(System.String)">
            <summary>Creates an EnvelopeProperties object</summary>
            <param name="name">Envelope name for the newly created envelope</param>
            <returns>Returns EnvelopeProperties containing the envelope name</returns>
        </member>
        <member name="M:Hyland.Unity.EnvelopeManagement.DeleteEnvelope(Hyland.Unity.Envelope)">
            <summary>Deletes specified envelope</summary>
            <param name="envelope">Envelope that is to be deleted</param>
        </member>
        <member name="M:Hyland.Unity.EnvelopeManagement.GetEnvelopes">
            <summary>
                Gets the Envelopes that belongs to the current user. This method is only valid on the
                currently logged in (the User used to establish the Unity Application/Session) User.
            </summary>
            <returns>A EnvelopeList of envelopes this user has access to.</returns>
        </member>
        <member name="M:Hyland.Unity.EnvelopeManagement.UpdateEnvelopeProperties(Hyland.Unity.Envelope,Hyland.Unity.EnvelopeProperties)">
            <summary>Updates the specified envelope with new properties</summary>
            <param name="envelope">Envelope that will be updated</param>
            <param name="props">The EditableEnvelopeProperties that will be applied to the envelope</param>
        </member>
        <member name="T:Hyland.Unity.EnvelopeProperties">
            <summary>Properties for creating and updating Envelopes</summary>
        </member>
        <member name="M:Hyland.Unity.EnvelopeProperties.#ctor">
            <summary>Constructs a EnvelopeProperties object.</summary>
        </member>
        <member name="M:Hyland.Unity.EnvelopeProperties.#ctor(System.String)">
            <summary>
                Constructs a EnvelopeProperties object.  A envelope name is required to create a new
                envelope.
            </summary>
            <param name="envelopeName">Envelope name for the new Envelope.  100 characters maximum</param>
        </member>
        <member name="M:Hyland.Unity.EnvelopeProperties.RenameEnvelope(System.String)">
            <summary>Renames the envelope</summary>
            <param name="name">New name for envelope</param>
        </member>
        <member name="M:Hyland.Unity.EnvelopeProperties.SetSharedUserPermissions(Hyland.Unity.User,Hyland.Unity.EnvelopePermissions)">
            <summary>Share the envelope to another OnBase user.</summary>
            <param name="sharedUser">The OnBase user that the envelope will be shared to</param>
            <param name="permissions">The permissions granted to the shared user</param>
        </member>
        <member name="T:Hyland.Unity.EnvelopeUser">
            <summary>This object holds information about a single User/Envelopes relationship</summary>
        </member>
        <member name="P:Hyland.Unity.EnvelopeUser.Permissions">
            <summary>Permissions for this User on the Envelope</summary>
        </member>
        <member name="P:Hyland.Unity.EnvelopeUser.UserId">
            <summary>User ID allowed for this Envelope</summary>
        </member>
        <member name="T:Hyland.Unity.EnvelopeUserList">
            <summary>A List of EnvelopeUsers</summary>
        </member>
        <member name="M:Hyland.Unity.EnvelopeUserList.GetEnvelopeUser(Hyland.Unity.User)">
            <summary>
                Gets the EnvelopeUser in the EvelopeUserList with the provided User.  If the user cannot
                be found, a null object is returned
            </summary>
            <param name="user">The User to find</param>
            <returns>The EnvelopeUser object if one is found, null otherwise</returns>
        </member>
        <member name="T:Hyland.Unity.Field">
            <summary>Represents an EForm field</summary>
        </member>
        <member name="P:Hyland.Unity.Field.Value">
            <summary>Gets the field value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:Hyland.Unity.Field.Name">
            <summary>Gets the field name.</summary>
            <value>The name.</value>
        </member>
        <member name="T:Hyland.Unity.FieldList">
            <summary>A collection of fields</summary>
        </member>
        <member name="T:Hyland.Unity.FileType">
            <summary>File Type</summary>
        </member>
        <member name="P:Hyland.Unity.FileType.DisplayType">
            <summary>The DisplayTyle of the FileType</summary>
        </member>
        <member name="P:Hyland.Unity.FileType.Extension">
            <summary>The Extension of the FileType</summary>
        </member>
        <member name="P:Hyland.Unity.FileType.MimeType">
            <summary>The MimeType of the FileType</summary>
        </member>
        <member name="P:Hyland.Unity.FileType.ID">
            <summary>The ID of the FileType</summary>
        </member>
        <member name="P:Hyland.Unity.FileType.Name">
            <summary>The Name of the FileType</summary>
        </member>
        <member name="T:Hyland.Unity.FileTypeList">
            <summary>A list of FileType</summary>
        </member>
        <member name="T:Hyland.Unity.Folder">
            <summary>Document</summary>
        </member>
        <member name="P:Hyland.Unity.Folder.CreateDate">
            <summary>The create date of the folder</summary>
        </member>
        <member name="P:Hyland.Unity.Folder.CreatedBy">
            <summary>The creator of this folder</summary>
        </member>
        <member name="P:Hyland.Unity.Folder.FolderType">
            <summary>The FolderType of the Folder</summary>
        </member>
        <member name="P:Hyland.Unity.Folder.ModifiedDate">
            <summary>The modified date of the folder</summary>
        </member>
        <member name="P:Hyland.Unity.Folder.ID">
            <summary>The ID of the folder</summary>
        </member>
        <member name="P:Hyland.Unity.Folder.Name">
            <summary>The name of the folder</summary>
        </member>
        <member name="P:Hyland.Unity.Folder.KeywordRecords">
            <summary>The KeywordRecords of the folder</summary>
        </member>
        <member name="M:Hyland.Unity.Folder.AddDocument(Hyland.Unity.Document)">
            <summary>Adds the indicated document to this folder. The folder must be static.</summary>
            <param name="doc">The document to add.</param>
        </member>
        <member name="M:Hyland.Unity.Folder.CreateKeywordModifier">
            <summary>Creates a KeywordModifier for the Document</summary>
            <returns>The KeywordModifier created.</returns>
        </member>
        <member name="M:Hyland.Unity.Folder.GetChildFolders">
            <summary>Retrieves the child folders of this folder.</summary>
            <returns>The child folders of this folder.</returns>
        </member>
        <member name="M:Hyland.Unity.Folder.GetDocuments">
            <summary>Retrieves the documents contained in this folder.</summary>
            <returns>The documents contained in this folder.</returns>
        </member>
        <member name="M:Hyland.Unity.Folder.GetParentFolder">
            <summary>Retrieves this folder's parent folder.</summary>
            <returns>The parent folder (or null, if this is a file cabinet.) </returns>
        </member>
        <member name="M:Hyland.Unity.Folder.RemoveDocument(Hyland.Unity.Document)">
            <summary>Removes the indicated document from this folder. The folder must be static.</summary>
            <param name="doc">The document to remove</param>
        </member>
        <member name="T:Hyland.Unity.FolderList">
            <summary>A list of Folders</summary>
        </member>
        <member name="T:Hyland.Unity.FolderManagement">
            <summary>Folder Operations</summary>
        </member>
        <member name="P:Hyland.Unity.FolderManagement.FolderTypes">
            <summary>The list of Folder Types for the current user.</summary>
        </member>
        <member name="M:Hyland.Unity.FolderManagement.CreateFolder(Hyland.Unity.NewFolderProperties)">
            <summary>Creates a Folder object.</summary>
            <param name="newFolderProperties">The <see cref="T:Hyland.Unity.NewFolderProperties" /> object for the new folder</param>
            <returns>The created folder.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderManagement.CreateFolderQuery">
            <summary>Creates a <see cref="T:Hyland.Unity.FolderQuery" /> object.</summary>
            <returns>A folder query object.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderManagement.CreateNewFolderProperties(Hyland.Unity.FolderType,Hyland.Unity.Folder)">
            <summary>Creates a <see cref="T:Hyland.Unity.NewFolderProperties" /> object.</summary>
            <param name="folderType">The FolderType of the new folder</param>
            <param name="parentFolder">The parent Folder of the Type of the new folder</param>
            <returns>The created NewFolderProperties object.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderManagement.DeleteFolder(Hyland.Unity.Folder)">
            <summary>Sends the indicated folder to folder maintenance.</summary>
            <param name="target">The folder to delete</param>
        </member>
        <member name="M:Hyland.Unity.FolderManagement.GetFileCabinets">
            <summary>Gets all of the file cabinets available to the current user.</summary>
            <returns>List of all available file cabinets</returns>
        </member>
        <member name="M:Hyland.Unity.FolderManagement.GetFolderByID(System.Int64,Hyland.Unity.FolderRetrievalOptions)">
            <summary>Shortcut method to query for a single folder by its ID</summary>
            <param name="id">The folder to fetch</param>
            <param name="options">Options (specifying whether or not to fetch keywords)</param>
            <returns>The target folder</returns>
        </member>
        <member name="M:Hyland.Unity.FolderManagement.GetFolderByID(System.Int64)">
            <summary>Shortcut method to query for a single folder by its ID</summary>
            <param name="id">The folder to fetch</param>
            <returns>The target folder</returns>
        </member>
        <member name="T:Hyland.Unity.NewFolderProperties">
            <summary>Creates the Hyland.Unity.FolderManagement.CreateNewFolderProperties object</summary>
        </member>
        <member name="P:Hyland.Unity.NewFolderProperties.FolderType">
            <summary>Folder Type</summary>
        </member>
        <member name="P:Hyland.Unity.NewFolderProperties.ParentFolder">
            <summary>Parent Folder</summary>
        </member>
        <member name="T:Hyland.Unity.FolderQuery">
            <summary>Folder Query object</summary>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddDateRange(System.DateTime,System.DateTime)">
            <summary>Adds a DateTime range to the FolderQuery</summary>
            <param name="fromDate">Date to start at.</param>
            <param name="toDate">Date to range to.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddFolderRange(System.Int64,System.Int64)">
            <summary>Adds a range of folder IDs to the Folder Query</summary>
            <param name="startID">First ID for the range of folders.</param>
            <param name="endID">Last ID for the range of folders.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddFolderType(Hyland.Unity.FolderType)">
            <summary>Adds a folder type to the FolderQuery</summary>
            <param name="folderType">FolderType to add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(Hyland.Unity.Keyword)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keyword">Keyword to add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(Hyland.Unity.Keyword,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keyword">Keyword to add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.String)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.Decimal)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.Double)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.DateTime)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.Int64)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.String,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.Decimal,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.Double,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.DateTime,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.Int64,System.Int64,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.String)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.Decimal)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.Double)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.DateTime)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.Int64)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.String,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.Decimal,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.Double,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.DateTime,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddKeyword(System.String,System.Int64,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the FolderQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddQueryKeywordRecord(Hyland.Unity.QueryKeywordRecord)">
            <summary>Adds a Query Keyword Record to the Folder Query</summary>
            <param name="record">QueryKeywordRecord to add.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.AddQueryKeywordRecord(Hyland.Unity.QueryKeywordRecord,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Query Keyword Record to the Folder Query</summary>
            <param name="record">QueryKeywordRecord to add.</param>
            <param name="relation">KeywordRelation to use for the QueryKeywordRecord.</param>
            <returns>The current FolderQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.Execute(System.Int64)">
            <summary>Executes the folder query</summary>
            <param name="maxFolders">Max number of folders to return</param>
            <returns>A FolderList of found folders.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderQuery.Execute(System.Int64,Hyland.Unity.FolderRetrievalOptions)">
            <summary>Executes the Folder Query</summary>
            <param name="maxFolders">Max number of folders to return</param>
            <param name="options">
                Specify the option to fetch keywords for all the folders are obtained along
                with the folder data. Note: This reduces performance and should be set to true only if you
                understand the database and application server load that could be caused by this. Should be set
                to <c>true</c> only if the keywords of each folder are going to be processed.
            </param>
            <returns>A FolderList of found folders.</returns>
        </member>
        <member name="T:Hyland.Unity.FolderType">
            <summary>Folder Type</summary>
        </member>
        <member name="P:Hyland.Unity.FolderType.ContentType">
            <summary>The Folder Type's content type (dynamic, static, etc.)</summary>
        </member>
        <member name="P:Hyland.Unity.FolderType.Icon">
            <summary>Contains the icon that is to be used to represent folders of this type.</summary>
        </member>
        <member name="P:Hyland.Unity.FolderType.KeywordTypesRequiredForArchival">
            <summary>
                The collection of KeywordTypes that are configured to be required when creating a folder
                of this folder type. Note: This is not enforced by the Unity API and if the programmer wants to
                enforce it this collection must be used to enforce it.
            </summary>
        </member>
        <member name="P:Hyland.Unity.FolderType.ID">
            <summary>The Folder Type's ID</summary>
        </member>
        <member name="P:Hyland.Unity.FolderType.Name">
            <summary>The Folder Type's Name</summary>
        </member>
        <member name="P:Hyland.Unity.FolderType.KeywordRecordTypes">
            <summary>The Folder Type's Keyword Record Types</summary>
        </member>
        <member name="M:Hyland.Unity.FolderType.CanI(Hyland.Unity.FolderTypePrivileges)">
            <summary>Privileges allowed for the current user for this Folder Type</summary>
            <param name="privilege">The privilege to determine that the current user has.</param>
            <returns>If the privilege is granted to the current user.</returns>
        </member>
        <member name="M:Hyland.Unity.FolderType.CreateFolder(Hyland.Unity.Folder)">
            <summary>Creates a new folder of this type.</summary>
            <param name="parent">The parent folder of the new folder</param>
            <returns>The created folder</returns>
        </member>
        <member name="T:Hyland.Unity.FolderTypeList">
            <summary>A list of Folder Types</summary>
        </member>
        <member name="T:Hyland.Unity.GatewayServer">
            <summary>Class representing a Gateway Server.</summary>
        </member>
        <member name="P:Hyland.Unity.GatewayServer.ID">
            <summary>ID of the Gateway Server.</summary>
        </member>
        <member name="P:Hyland.Unity.GatewayServer.Name">
            <summary>Name of the Gateway Server.</summary>
        </member>
        <member name="M:Hyland.Unity.GatewayServer.Add(Hyland.Unity.Rendition)">
            <summary>Adds the rendition to the Gateway Server.</summary>
            <param name="rendition">Rendition of the document to add to the server.</param>
        </member>
        <member name="T:Hyland.Unity.GatewayServerList">
            <summary>List of Gateway Servers.</summary>
        </member>
        <member name="T:Hyland.Unity.Icon">
            <summary>An Icon</summary>
        </member>
        <member name="P:Hyland.Unity.Icon.LargeIcon">
            <summary>Large Icon Bytes</summary>
        </member>
        <member name="P:Hyland.Unity.Icon.LargeIconID">
            <summary>The ID of the Large Icon</summary>
        </member>
        <member name="P:Hyland.Unity.Icon.SmallIcon">
            <summary>Small Icon Bytes</summary>
        </member>
        <member name="P:Hyland.Unity.Icon.SmallIconID">
            <summary>The ID of the Small Icon</summary>
        </member>
        <member name="T:Hyland.Unity.Institution">
            <summary>Represents an institution in the system.</summary>
        </member>
        <member name="P:Hyland.Unity.Institution.ID">
            <summary>A unique identifier for the institution.</summary>
        </member>
        <member name="P:Hyland.Unity.Institution.Name">
            <summary>The name given to the institution.</summary>
        </member>
        <member name="T:Hyland.Unity.Keyset">
            <summary>An OnBase Keyset.  A collection of values intended for usage on Keywords</summary>
        </member>
        <member name="P:Hyland.Unity.Keyset.CanEdit">
            <summary>Returns if the Keyset is editable by the user.</summary>
        </member>
        <member name="P:Hyland.Unity.Keyset.IsExternal">
            <summary>Returns whether the keyset is an external keyword set.</summary>
        </member>
        <member name="P:Hyland.Unity.Keyset.KeywordTypes">
            <summary>Returns the keyword type collection associated with this keyset.</summary>
        </member>
        <member name="P:Hyland.Unity.Keyset.PrimaryKeywordType">
            <summary>The primary keyword type for the keyset is always the first keyword type in the set.</summary>
        </member>
        <member name="P:Hyland.Unity.Keyset.ID">
            <summary>The ID of the Keyset</summary>
        </member>
        <member name="P:Hyland.Unity.Keyset.Name">
            <summary>The name of the Keyset</summary>
        </member>
        <member name="M:Hyland.Unity.Keyset.Create(System.Collections.Generic.List{Hyland.Unity.Keyword})">
            <summary>Creates a new KeysetData item for the Keyset, throws exception on failure.</summary>
            <param name="keywords">The keyword collection used to create the keyset.</param>
            <returns>The newly created <see cref="T:Hyland.Unity.KeysetData" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.Keyset.Delete(Hyland.Unity.KeysetData)">
            <summary>Deletes the specified KeysetData from the Keyset</summary>
            <param name="keysetData">The keysetdata that needs to be deleted.</param>
            <returns>Returns <c>true</c> if the <see cref="T:Hyland.Unity.KeysetData" /> was deleted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.Keyset.GetKeysetData(Hyland.Unity.Keyword)">
            <summary>Returns all KeysetData objects within the Keyset that match the primary Keyword value</summary>
            <param name="primaryKeyword">The primary Keyword needed to return KeysetData objects</param>
            <exception cref="T:System.ArgumentException">
                Primary Keyword Type must match the primary Keyword Type of
                this Keyset
            </exception>
            <returns>
                The <see cref="T:Hyland.Unity.KeysetDataList" /> containing all the keysets that match the primary
                keyword.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Keyset.GetKeysetData(System.Collections.Generic.ICollection{Hyland.Unity.Keyword})">
            <summary>Returns all KeysetData objects within the Keyset that match the primary Keyword values</summary>
            <param name="primaryKeywords">A list of primary Keywords needed to return KeysetData objects</param>
            <exception cref="T:System.ArgumentException">
                Primary Keyword Type must match the primary Keyword Type of
                this Keyset
            </exception>
            <returns>
                The <see cref="T:Hyland.Unity.KeysetDataList" /> containing all the keysets that match the primary
                keywords.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Keyset.Update(Hyland.Unity.KeysetData,System.Collections.Generic.ICollection{Hyland.Unity.Keyword})">
            <summary>Updates a specific data record in the specified Keyset</summary>
            <remarks>Updating a keyset will not update the primary value</remarks>
            <param name="keysetData">A specific instance of a Keyset row</param>
            <param name="keywords">
                The keyword values used to update the Keyset row.  If a value needs to be
                removed from the Keyset row then a blank keyword will need to be explicitly passed in.
                Otherwise, the current value will remain.
            </param>
        </member>
        <member name="M:Hyland.Unity.Keyset.Update(Hyland.Unity.Keyword,System.Collections.Generic.ICollection{Hyland.Unity.Keyword})">
            <summary>Updates all existing Keyset data for the matching Primary value.</summary>
            <remarks>Updating a keyset will not update the primary value</remarks>
            <param name="primaryKeyword">The primary Keyword for the Keyset</param>
            <param name="keywords">
                The keyword values used to update the Keyset row.  If a value needs to be
                removed from the Keyset row then a blank keyword will need to be explicitly passed in.
                Otherwise, the current value will remain.
            </param>
        </member>
        <member name="T:Hyland.Unity.KeysetList">
            <summary>A list of Keysets</summary>
        </member>
        <member name="T:Hyland.Unity.KeysetData">
            <summary>A single set of Data for a Keyset</summary>
        </member>
        <member name="P:Hyland.Unity.KeysetData.Keyset">
            <summary>The Keyset this belongs to</summary>
        </member>
        <member name="P:Hyland.Unity.KeysetData.Keywords">
            <summary>The Primary and Secondary values associated with the Keyset instance</summary>
        </member>
        <member name="P:Hyland.Unity.KeysetData.PrimaryKeyword">
            <summary>The Primary Value of the Keyset</summary>
        </member>
        <member name="P:Hyland.Unity.KeysetData.ID">
            <summary>The ID (keysetnum) of the KeysetData row in the AutoFill Keyset</summary>
        </member>
        <member name="T:Hyland.Unity.KeysetDataList">
            <summary>A list of KeysetData objects</summary>
        </member>
        <member name="T:Hyland.Unity.Keyword">
            <summary>The OnBase keyword sealed class</summary>
        </member>
        <member name="P:Hyland.Unity.Keyword.AlphaNumericValue">
            <summary>Gets keyword value as string.</summary>
            <returns>returns the keyword value as string</returns>
            <remarks>
                This method throw exception if the keyword is not one of the AlphaNumeric type or if the
                value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Keyword.CurrencyFormat">
            <summary>Gets or sets the currency format.</summary>
            <value>The currency format.</value>
            <remarks>The Currency format can only be set if the keyword is a SpecificCurrency keyword</remarks>
        </member>
        <member name="P:Hyland.Unity.Keyword.CurrencyValue">
            <summary>Gets keyword value as currency.</summary>
            <returns>returns the keyword value as decimal</returns>
            <remarks>
                This method throw exception if the keyword is not a Currency or SpecificCurrency or if the
                value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Keyword.DateTimeValue">
            <summary>Gets keyword value as DateTime.</summary>
            <returns>returns the keyword value as DateTime</returns>
            <remarks>
                This method throw exception if the keyword is not a Date or DateTime or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Keyword.FloatingPointValue">
            <summary>Gets keyword value as floating point.</summary>
            <returns>returns the keyword value as double</returns>
            <remarks>
                This method throw exception if the keyword is not a FloatingPoint or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Keyword.IsBlank">
            <summary>Gets a value indicating whether this instance is blank.</summary>
            <value><c>true</c> if this instance is blank; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Hyland.Unity.Keyword.KeywordType">
            <summary>Gets the KeywordType.</summary>
            <value>The KeywordType of the keyword.</value>
        </member>
        <member name="P:Hyland.Unity.Keyword.Numeric20Value">
            <summary>Gets keyword value as numeric (up to 20 digits)</summary>
            <returns>returns the keyword value as decimal</returns>
            <remarks>This method throw exception if the keyword is not a Numeric20 or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.Keyword.Numeric9Value">
            <summary>Gets keyword value as numeric (up to 9 digits).</summary>
            <returns>returns the keyword value as long</returns>
            <remarks>This method throw exception if the keyword is not a Numeric9 or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.Keyword.Value">
            <summary>Gets the keyword value as an object.</summary>
            <returns>returns the keyword value as object</returns>
            <remarks>
                This method should only be used when iterating through a KeywordList and performing the
                same generic operation. DO NOT use this method if you know the keyword data type. Use one of
                the other GetValue methods. This method throws exception if the value is blank.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException when value is blank.</exception>
        </member>
        <member name="M:Hyland.Unity.Keyword.Equals(System.Object)">
            <summary>Equals operation on a Keyword</summary>
            <param name="obj">Keyword to determine equality against.</param>
            <returns>If Keywords were equal.</returns>
        </member>
        <member name="M:Hyland.Unity.Keyword.GetHashCode">
            <summary>Gets the Hashcode of the Keyword</summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:Hyland.Unity.Keyword.ToString">
            <summary>
                Returns a the string value of the keyword. This will be the localized version of the
                keyword based on the culture of the thread that loaded the keyword.
            </summary>
            <returns>Returns a string.Empty when the keyword is blank and the string value of the keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.Keyword.Clone">
            <summary>Clones the Keyword</summary>
            <returns>The cloned Keyword</returns>
        </member>
        <member name="M:Hyland.Unity.Keyword.Equals(Hyland.Unity.Keyword)">
            <summary>Equals operation on a Keyword</summary>
            <param name="other">Keyword to determine equality against.</param>
            <returns>If Keywords were equal.</returns>
        </member>
        <member name="T:Hyland.Unity.KeywordList">
            <summary>A list of Keywords</summary>
        </member>
        <member name="M:Hyland.Unity.KeywordList.Find(System.String)">
            <summary>Returns the first keyword that is of the specified keyword type name.</summary>
            <param name="keywordTypeName">Name of the keyword type.</param>
            <returns>The first keyword of the specified type</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.Find(System.Int64)">
            <summary>Returns the first keyword that is of the specified keyword type id.</summary>
            <param name="keywordTypeID">The keyword type ID.</param>
            <returns>The first keyword of the specified type</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.Find(Hyland.Unity.KeywordType)">
            <summary>Returns the first keyword that is of the specified keyword type.</summary>
            <param name="type">The keyword type.</param>
            <returns>The first keyword of the specified type</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.FindAll(System.String)">
            <summary>Creates a keyword list based on keyword type Name specified.</summary>
            <param name="keywordTypeName">Name of the keyword type.</param>
            <returns>A filtered keyword list</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.FindAll(System.Int64)">
            <summary>Creates a keyword list based on keyword type ID specified.</summary>
            <param name="keywordTypeID">The keyword type ID.</param>
            <returns>A filtered keyword list</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.FindAll(Hyland.Unity.KeywordType)">
            <summary>Creates a keyword list based on keyword type specified.</summary>
            <param name="type">The keyword type.</param>
            <returns>A filtered keyword list</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.Equals(System.Object)">
            <summary>Equals operation on a KeywordList</summary>
            <param name="obj">KeywordList to determine equality against.</param>
            <returns>If KeywordLists were equal.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.GetHashCode">
            <summary>Gets the Hash code of the KeywordList</summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.Clone">
            <summary>Clones the KeywordList</summary>
            <returns>The cloned KeywordList</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordList.Equals(Hyland.Unity.KeywordList)">
            <summary>Equals operation on a KeywordList</summary>
            <param name="other">KeywordList to determine equality against.</param>
            <returns>If KeywordLists were equal.</returns>
        </member>
        <member name="T:Hyland.Unity.KeywordDataSet">
            <summary>A list of Keyword Data Set Items</summary>
        </member>
        <member name="T:Hyland.Unity.KeywordDataSetItem">
            <summary>KeywordDataSetItem represents an item in a KeywordDataSet.</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordDataSetItem.AlphaNumericValue">
            <summary>Gets the alpha numeric value.</summary>
            <returns>The alpha numeric value.</returns>
        </member>
        <member name="P:Hyland.Unity.KeywordDataSetItem.KeywordType">
            <summary>Gets the KeywordType object.</summary>
            <value>The KeywordType of the keyword.</value>
        </member>
        <member name="P:Hyland.Unity.KeywordDataSetItem.Numeric20Value">
            <summary>Gets the Numeric20 value.</summary>
            <returns>The Numeric20 value.</returns>
        </member>
        <member name="P:Hyland.Unity.KeywordDataSetItem.Numeric9Value">
            <summary>Gets the Numeric9 value.</summary>
            <returns>The Numeric9 value..</returns>
        </member>
        <member name="P:Hyland.Unity.KeywordDataSetItem.Value">
            <summary>Gets the KeywordDataSetItem value as an object.</summary>
            <returns>Returns the KeywordDataSetItem value as object.</returns>
            <remarks>
                This method should only be used when iterating through a KeywordDataSet and performing the
                same generic operation. DO NOT use this method if you know the keyword data type. Use one of
                the other GetValue methods.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException when value is blank.</exception>
        </member>
        <member name="M:Hyland.Unity.KeywordDataSetItem.CreateKeyword">
            <summary>Creates a Keyword based off of this Keyword Data Set Item.</summary>
            <returns>A Keyword object.</returns>
        </member>
        <member name="T:Hyland.Unity.KeywordModifier">
            <summary>Operations to modify an existing set of Keywords</summary>
        </member>
        <member name="M:Hyland.Unity.KeywordModifier.ApplyChanges">
            <summary>Applies the changes of the KeywordModifier to the Document or Folder</summary>
        </member>
        <member name="T:Hyland.Unity.KeywordRecord">
            <summary>A KeywordRecord</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordRecord.KeywordRecordType">
            <summary>The KeywordRecord Type for this KeywordRecord</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordRecord.Keywords">
            <summary>
                The Keywords of this KeywordRecord. If the record is a single instance or multi instance
                keyword record, some Keywords in this collection can be blank. The IsBlank property on each
                Keyword must be checked.
            </summary>
        </member>
        <member name="P:Hyland.Unity.KeywordRecord.ID">
            <summary>The ID of the KeywordRecord</summary>
        </member>
        <member name="M:Hyland.Unity.KeywordRecord.CreateEditableKeywordRecord">
            <summary>Clones the KeywordRecord and turns it into an EditableKeywordRecord</summary>
            <returns>The created EditableKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecord.CreateQueryKeywordRecord">
            <summary>
                Clones the KeywordRecord and turns it into an QueryKeywordRecord.  All keywords within
                have Equals Operator and And Relation
            </summary>
            <returns>The created QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecord.Equals(System.Object)">
            <summary>Equals operator for the KeywordRecord</summary>
            <param name="obj">KeywordRecord to determine equality against.</param>
            <returns>If KeywordRecords were equal.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecord.GetHashCode">
            <summary>Gets the Hashcode of the KeywordRecord</summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecord.Clone">
            <summary>Clones this KeywordRecord</summary>
            <returns>The cloned KeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecord.Equals(Hyland.Unity.KeywordRecord)">
            <summary>Equals operator for the KeywordRecord</summary>
            <param name="other">KeywordRecord to determine equality against.</param>
            <returns>If KeywordRecords were equal.</returns>
        </member>
        <member name="T:Hyland.Unity.KeywordRecordList">
            <summary>A list of KeywordRecords</summary>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordList.Find(Hyland.Unity.Keyword)">
            <summary>
                Returns the first KeywordRecord that contain the specified keyword. Throws an exception if
                the searchKeyword is blank.
            </summary>
            <param name="searchKeyword">The search keyword.</param>
            <returns>The KeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordList.Find(Hyland.Unity.KeywordRecordType)">
            <summary>Returns the first KeywordRecord that is of the specified record type.</summary>
            <param name="searchRecordType">Type of the search record.</param>
            <returns>The KeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordList.Find(Hyland.Unity.KeywordType)">
            <summary>Returns the first KeywordRecord that contain keyword of the specified keyword type.</summary>
            <param name="searchKeywordType">Type of the search keyword.</param>
            <returns>The KeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordList.FindAll(Hyland.Unity.Keyword)">
            <summary>
                Returns all the KeywordRecords that contain the specified keyword. Throws an exception if
                the searchKeyword is blank.
            </summary>
            <param name="searchKeyword">The search keyword.</param>
            <returns>The KeywordRecordList</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordList.FindAll(Hyland.Unity.KeywordRecordType)">
            <summary>Returns all the KeywordRecord that are of the specified record type.</summary>
            <param name="searchRecordType">Type of the search record.</param>
            <returns>The KeywordRecordList</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordList.FindAll(Hyland.Unity.KeywordType)">
            <summary>Returns all the KeywordRecord that contain keyword of the specified keyword type.</summary>
            <param name="searchKeywordType">Type of the search keyword.</param>
            <returns>The KeywordRecordList</returns>
        </member>
        <member name="T:Hyland.Unity.KeywordRecordType">
            <summary>KeywordRecordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordRecordType.KeywordTypes">
            <summary>The KeywordTypes for the KeywordRecordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordRecordType.RecordType">
            <summary>The RecordType of the KeywordRecordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordRecordType.TranslatedName">
            <summary>The translated Name of the KeywordRecordType or Name if there is no translation.</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordRecordType.ID">
            <summary>The ID of the KeywordRecordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordRecordType.Name">
            <summary>The Name of the KeywordRecordType</summary>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordType.CreateEditableKeywordRecord">
            <summary>Creates an empty EditableKeywordRecord</summary>
            <returns>The created EditableKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordType.CreateQueryKeywordRecord">
            <summary>Creates an empty QueryKeywordRecord</summary>
            <returns>The created QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordType.GetHashCode">
            <summary>Gets the Hashcode for the KeywordRecordType</summary>
            <returns>The hashcode</returns>
        </member>
        <member name="T:Hyland.Unity.KeywordRecordTypeList">
            <summary>A list of KeywordRecordTypes</summary>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordTypeList.FindKeywordType(System.Int64)">
            <summary>Finds a KeywordType in the KeywordRecordType by ID</summary>
            <param name="keywordTypeId">ID of Keyword Type to find.</param>
            <returns>Found KeywordType or null.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordRecordTypeList.FindKeywordType(System.String)">
            <summary>Finds a KeywordType in the KeywordRecordType by Name</summary>
            <param name="keywordTypeName">Name of Keyword Type to find.</param>
            <returns>Found KeywordType or null.</returns>
        </member>
        <member name="T:Hyland.Unity.KeywordType">
            <summary>Keyword Type</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.CaseSensitive">
            <summary>If the KeywordType is case sensitive</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.CurrencyFormat">
            <summary>The CurrencyFormat of the KeywordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.DataLength">
            <summary>The data length of the KeywordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.DataType">
            <summary>The Data Type of the KeywordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.DefaultValue">
            <summary>The Default Value of the KeywordType</summary>
            <remarks>This will always return null. Use
                <see cref="M:Hyland.Unity.KeywordType.CreateKeywordWithDefaultValue(Hyland.Unity.DocumentType)" /> instead.</remarks>
        </member>
        <member name="P:Hyland.Unity.KeywordType.FullFieldRequired">
            <summary>Indicates whether or not full field entry is required</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.KeysetID">
            <summary>The Keyset ID of the KeywordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.KeywordMustExistInDataSet">
            <summary>Indicates whether or not the Keyword is configured as Keyword Must Exist.</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.MaskedString">
            <summary>The MaskedString of the KeywordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.Static">
            <summary>The Static characters of the KeywordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.TranslatedName">
            <summary>The translated Name of the KeywordType or Name if there is no translation.</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.UseDataSet">
            <summary>If the KeywordType uses a data set.</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.AllowsDropDownList">
            <summary>
            Specifies whether the keywordType allows Drop-Down lists
            </summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.ID">
            <summary>The ID of the KeywordType</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordType.Name">
            <summary>The Name of the KeywordType</summary>
        </member>
        <member name="M:Hyland.Unity.KeywordType.CreateBlankKeyword">
            <summary>Creates a blank Keyword from the KeywordType</summary>
            <returns>Newly created Keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordType.CreateKeyword(System.Int64)">
            <summary>Creates a Keyword from the KeywordType</summary>
            <param name="value">Value to insert into Keyword.</param>
            <returns>Newly created Keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordType.CreateKeyword(System.Decimal)">
            <summary>Creates a Keyword from the KeywordType</summary>
            <param name="value">Value to insert into Keyword.</param>
            <returns>Newly created Keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordType.CreateKeyword(System.DateTime)">
            <summary>Creates a Keyword from the KeywordType</summary>
            <param name="value">Value to insert into Keyword.</param>
            <returns>Newly created Keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordType.CreateKeyword(System.Double)">
            <summary>Creates a Keyword from the KeywordType</summary>
            <param name="value">Value to insert into Keyword.</param>
            <returns>Newly created Keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordType.CreateKeyword(System.String)">
            <summary>Creates a Keyword from the KeywordType</summary>
            <param name="value">Value to insert into Keyword.</param>
            <returns>Newly created Keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordType.CreateKeywordWithDefaultValue(Hyland.Unity.DocumentType)">
            <summary>
                Creates a Keyword from the KeywordType with the KeywordType's default value for the
                specific DocumentType. A blank Keyword from the KeywordType will be returned, if the retrieved
                default value is empty.
            </summary>
            <param name="documentType">the specific Document Type</param>
            <returns>Newly created Keyword.</returns>
            <exception cref="T:System.InvalidOperationException">
                Throws InvalidOperationException, if the KeywordType is
                not a keyword type of the specific DocumentType.
            </exception>
        </member>
        <member name="M:Hyland.Unity.KeywordType.GetDropDownValues">
            <summary>
                Gets dropdown values for this keyword type. The user must have access to either a 
                document type, folder type, or custom query with this keyword attached, or the 
                function will fail.
            </summary>
            <returns>The list of dropdown values for this KeywordType. No more than 1000 will be returned.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordType.GetDropDownValues(System.String)">
            <summary>
                Gets dropdown values for this keyword type, filtered by the partialValue parameter. 
                The user must have access to either a document type, folder type, or custom query 
                with this keyword attached, or the function will fail.
            </summary>
            <param name="partialValue">
                A string used to filter the results; only results that start with this
                string will be returned.
            </param>
            <returns>The list of dropdown values for this KeywordType. No more than 1000 will be returned.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordType.GetKeywordDataSet">
            <summary>Gets the DataSet for this KeywordType.</summary>
            <returns>The list of Keyword DataSet Items for this KeywordType.</returns>
        </member>
        <member name="T:Hyland.Unity.KeywordTypeList">
            <summary>A list of Keyword Types</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentHistory">
            <summary>List of Document History Items.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentHistoryItem">
            <summary>A Document History entry.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentWorkflowHistory">
            <summary>List of Document Workflow History Items.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentWorkflowHistoryItem">
            <summary>A Document Workflow History entry.</summary>
        </member>
        <member name="T:Hyland.Unity.GetHistoryOptions">
            <summary>Options for retrieving history.</summary>
        </member>
        <member name="T:Hyland.Unity.GetWorkflowHistoryOptions">
            <summary>Options for retrieving Workflow history.</summary>
        </member>
        <member name="P:Hyland.Unity.GetWorkflowHistoryOptions.LifeCycle">
            <summary>Return Workflow History for a specific LifeCycle.</summary>
        </member>
        <member name="P:Hyland.Unity.GetWorkflowHistoryOptions.Queue">
            <summary>Return Workflow History for a specific Queue.</summary>
        </member>
        <member name="T:Hyland.Unity.HistoryItem">
            <summary>A History entry.</summary>
        </member>
        <member name="P:Hyland.Unity.HistoryItem.Action">
            <summary>Action taken on the item.</summary>
        </member>
        <member name="P:Hyland.Unity.HistoryItem.LogDate">
            <summary>Date/Time of the action.</summary>
            >
        </member>
        <member name="P:Hyland.Unity.HistoryItem.Message">
            <summary>Logged message.</summary>
        </member>
        <member name="P:Hyland.Unity.HistoryItem.User">
            <summary>User under which action was taken.</summary>
        </member>
        <member name="T:Hyland.Unity.HistoryOptions">
            <summary>base class for getHistoryOptions and getWorkflowHistoryOptions</summary>
        </member>
        <member name="P:Hyland.Unity.HistoryOptions.EndDate">
            <summary>history end date</summary>
        </member>
        <member name="P:Hyland.Unity.HistoryOptions.StartDate">
            <summary>history start date</summary>
        </member>
        <member name="P:Hyland.Unity.HistoryOptions.User">
            <summary>user</summary>
        </member>
        <member name="T:Hyland.Unity.LogManagement">
            <summary>Log Operations</summary>
        </member>
        <member name="M:Hyland.Unity.LogManagement.CreateDocumentHistoryItem(Hyland.Unity.Document,System.String)">
            <summary>Create a log entry for a Document. Uses current User and current time.</summary>
            <param name="document">The Document for which to add a document transaction log entry.</param>
            <param name="message">
                The message to log. Limited to 200 characters in length. It is considered a
                best practice to include the Document.ID and Document.Name within the message.
            </param>
            <returns>The DocumentHistoryItem created by this method.</returns>
        </member>
        <member name="M:Hyland.Unity.LogManagement.CreateGetHistoryOptions">
            <summary>Creates a GetHistoryOptions object for retrieving History.</summary>
            <returns>The GetHistoryOptions created.</returns>
        </member>
        <member name="M:Hyland.Unity.LogManagement.CreateGetWorkflowHistoryOptions">
            <summary>Creates a GetWorkflowLogOptions object for retrieving Workflow Logs.</summary>
            <returns>The GetWorkflowLogOptions created.</returns>
        </member>
        <member name="M:Hyland.Unity.LogManagement.GetDocumentHistory(Hyland.Unity.Document)">
            <summary>Retrieves the Document History for the Document.</summary>
            <param name="document">Document for which to retrieve history.</param>
            <returns>List of Document History Items for the specified Document.</returns>
        </member>
        <member name="M:Hyland.Unity.LogManagement.GetDocumentHistory(Hyland.Unity.Document,Hyland.Unity.GetHistoryOptions)">
            <summary>Retrieves the Document History for the Document.</summary>
            <param name="document">Document for which to retrieve history.</param>
            <param name="getHistoryOptions">History retrieval options.</param>
            <returns>List of Document History Items for the specified Document.</returns>
        </member>
        <member name="M:Hyland.Unity.LogManagement.GetDocumentWorkflowHistory(Hyland.Unity.Document)">
            <summary>Retrieves the Workflow History for a Document.</summary>
            <param name="document">Document for which to retrieve the Workflow Log.</param>
            <returns>List of Workflow Log Items for the specified Document.</returns>
        </member>
        <member name="M:Hyland.Unity.LogManagement.GetDocumentWorkflowHistory(Hyland.Unity.Document,Hyland.Unity.GetWorkflowHistoryOptions)">
            <summary>Retrieves the Workflow History for a Document.</summary>
            <param name="document">Document for which to retrieve Workflow History.</param>
            <param name="getWorkflowHistoryOptions">Workflow History retrieval options.</param>
            <returns>List of Workflow History Items for the specified Document.</returns>
        </member>
        <member name="M:Hyland.Unity.LogManagement.GetByteCount(System.String)">
            <summary>
                Determine the number of bytes required to store this string given the default encoding of
                the current culture.
            </summary>
            <param name="value">string value.</param>
            <returns>The number of bytes.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkflowHistoryItem">
            <summary>A Workflow History entry.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowHistoryItem.EntryDate">
            <summary>Date/Time item entered Queue.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowHistoryItem.EntryUser">
            <summary>User under which item entered Queue.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowHistoryItem.ExitDate">
            <summary>Date/Time item exited Queue.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowHistoryItem.ExitUser">
            <summary>User under which item exited Queue.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowHistoryItem.Queue">
            <summary>Workflow Queue being acted upon.</summary>
        </member>
        <member name="T:Hyland.Unity.MailManagement">
            <summary>Mail Operations</summary>
        </member>
        <member name="F:Hyland.Unity.MailManagement.MaximumMessageBodyLength">
            <summary>The maximum length of the message body, as specified by the Core.</summary>
        </member>
        <member name="F:Hyland.Unity.MailManagement.MaximumMessageSubjectLength">
            <summary>The maximum length of the message subject, as specified by the Core.</summary>
        </member>
        <member name="M:Hyland.Unity.MailManagement.CreateSendMailProperties(Hyland.Unity.User)">
            <summary>Create a SendMailProperties object for a recipient User.</summary>
            <param name="recipient">A recipient User.</param>
            <returns>A SendMailProperties object.</returns>
        </member>
        <member name="M:Hyland.Unity.MailManagement.CreateSendMailProperties(System.Collections.Generic.IEnumerable{Hyland.Unity.User})">
            <summary>Create a SendMailProperties object for an IEnumerable of recipient Users.</summary>
            <param name="recipients">An IEnumerable of recipient Users.</param>
            <returns>A SendMailProperties object.</returns>
        </member>
        <member name="M:Hyland.Unity.MailManagement.CreateSendMailProperties(Hyland.Unity.UserGroup)">
            <summary>Create a SendMailProperties object for a recipient UserGroup.</summary>
            <param name="recipientGroup">A recipient UserGroup.</param>
            <returns>A SendMailProperties object.</returns>
        </member>
        <member name="M:Hyland.Unity.MailManagement.CreateSendMailProperties(System.Collections.Generic.IEnumerable{Hyland.Unity.UserGroup})">
            <summary>Create a SendMailProperties object for an IEnumerable of recipient UserGroups.</summary>
            <param name="recipientGroups">An IEnumerable of recipient UserGroups.</param>
            <returns>A SendMailProperties object.</returns>
        </member>
        <member name="M:Hyland.Unity.MailManagement.SendMail(Hyland.Unity.SendMailProperties)">
            <summary>Send a mail message with the given properties.</summary>
            <param name="properties">The SendMailProperties defining the message to be sent.</param>
        </member>
        <member name="T:Hyland.Unity.SendMailProperties">
            <summary>The properties defining a mail message to be sent.</summary>
        </member>
        <member name="F:Hyland.Unity.SendMailProperties.BodyDefault">
            <summary>The default value of the Body property.</summary>
        </member>
        <member name="F:Hyland.Unity.SendMailProperties.RequiresReadReceiptDefault">
            <summary>The default value of the RequiresReadReceipt property.</summary>
        </member>
        <member name="F:Hyland.Unity.SendMailProperties.SubjectDefault">
            <summary>The default value of the Subject property.</summary>
        </member>
        <member name="P:Hyland.Unity.SendMailProperties.Body">
            <summary>The body of the mail message. The default is null.</summary>
        </member>
        <member name="P:Hyland.Unity.SendMailProperties.RequiresReadReceipt">
            <summary>
                Determines if the message sent requires a read receipt from the recipients. The default is
                false.
            </summary>
        </member>
        <member name="P:Hyland.Unity.SendMailProperties.Subject">
            <summary>The subject of the mail message. The default is null.</summary>
        </member>
        <member name="M:Hyland.Unity.SendMailProperties.AddAttachment(Hyland.Unity.Document)">
            <summary>Add a Document to the mail message as an attachment.</summary>
            <param name="document">A Document to attach.</param>
        </member>
        <member name="M:Hyland.Unity.SendMailProperties.AddAttachment(System.Collections.Generic.IEnumerable{Hyland.Unity.Document})">
            <summary>Add an IEnumerable of Documents to the mail message as attachments.</summary>
            <param name="documents">An IEnumerable of Documents to attach.</param>
        </member>
        <member name="M:Hyland.Unity.SendMailProperties.AddRecipient(Hyland.Unity.User)">
            <summary>Add a recipient User to the mail message.</summary>
            <param name="user">A recipient User</param>
        </member>
        <member name="M:Hyland.Unity.SendMailProperties.AddRecipient(System.Collections.Generic.IEnumerable{Hyland.Unity.User})">
            <summary>Add an IEnumerable of recipient Users to the mail message.</summary>
            <param name="users">An IEnumerable of recipient Users.</param>
        </member>
        <member name="M:Hyland.Unity.SendMailProperties.AddRecipient(Hyland.Unity.UserGroup)">
            <summary>Add a recipient UserGroup to the mail message.</summary>
            <param name="userGroup">A recipient UserGroup.</param>
        </member>
        <member name="M:Hyland.Unity.SendMailProperties.AddRecipient(System.Collections.Generic.IEnumerable{Hyland.Unity.UserGroup})">
            <summary>Add an IEnumerable of recipient UserGroups to the mail message.</summary>
            <param name="userGroups">An IEnumerable of recipient UserGroups.</param>
        </member>
        <member name="T:Hyland.Unity.Note">
            <summary>A Document's Note</summary>
        </member>
        <member name="T:Hyland.Unity.Note.DisplayFlags">
            <summary>The Note's Display Flags</summary>
        </member>
        <member name="F:Hyland.Unity.Note.DisplayFlags.PrivacyNoView">
            <summary>Not Viewable</summary>
        </member>
        <member name="F:Hyland.Unity.Note.DisplayFlags.PrivacyNoUpdate">
            <summary>Not Updatable</summary>
        </member>
        <member name="F:Hyland.Unity.Note.DisplayFlags.PrivacyNoDelete">
            <summary>Not Deletable</summary>
        </member>
        <member name="F:Hyland.Unity.Note.DisplayFlags.NormalCoordinates">
            <summary>Use Normal Coordinates for Note Position</summary>
        </member>
        <member name="F:Hyland.Unity.Note.DisplayFlags.ViewerCoordinates">
            <summary>Use the Viewer Coordinates for the Note Position</summary>
        </member>
        <member name="P:Hyland.Unity.Note.CreatedBy">
            <summary>Gets the user who created the note.</summary>
            <value>The user who created the note.</value>
        </member>
        <member name="P:Hyland.Unity.Note.CreationDate">
            <summary>Gets the creation date.</summary>
            <value>The creation date.</value>
        </member>
        <member name="P:Hyland.Unity.Note.Document">
            <summary>Gets the document.</summary>
            <value>The document.</value>
        </member>
        <member name="P:Hyland.Unity.Note.DocumentRevision">
            <summary>Gets the Document Revision the note is applied to.</summary>
            <value>The Document Revision.</value>
        </member>
        <member name="P:Hyland.Unity.Note.DocumentRevisionID">
            <summary>Gets the document revision ID.</summary>
            <value>The document revision ID.</value>
        </member>
        <member name="P:Hyland.Unity.Note.Flags">
            <summary>Gets the DisplayFlags for the note.</summary>
            <value>The DiaplayFlags.</value>
        </member>
        <member name="P:Hyland.Unity.Note.Icon">
            <summary>The Icon of the Note</summary>
        </member>
        <member name="P:Hyland.Unity.Note.NoteType">
            <summary>Gets the NoteType.</summary>
            <value>The NoteType.</value>
        </member>
        <member name="P:Hyland.Unity.Note.OtherStapleID">
            <summary>Gets the other staple ID of the staple on the related document.</summary>
            <value>The other staple ID.</value>
        </member>
        <member name="P:Hyland.Unity.Note.PageNumber">
            <summary>Gets the page number that the note belongs to.</summary>
            <value>The page number.</value>
            <remarks>Page numbers are 1-indexed.</remarks>
        </member>
        <member name="P:Hyland.Unity.Note.Position">
            <summary>The Note's Position</summary>
        </member>
        <member name="P:Hyland.Unity.Note.Size">
            <summary>Gets the size.</summary>
            <value>The size.</value>
        </member>
        <member name="P:Hyland.Unity.Note.StapledDocument">
            <summary>Gets the stapled Document.</summary>
            <value>The stapled Document.</value>
        </member>
        <member name="P:Hyland.Unity.Note.StapledDocumentID">
            <summary>Gets the document ID of the stapled document.</summary>
            <value>The stapled document ID.</value>
        </member>
        <member name="P:Hyland.Unity.Note.StapledDocumentStaple">
            <summary>Gets the staple Note from the stapled Document.</summary>
            <value>The Note from the stapled Document.</value>
        </member>
        <member name="P:Hyland.Unity.Note.Text">
            <summary>Gets the note text.</summary>
            <value>The note text.</value>
        </member>
        <member name="P:Hyland.Unity.Note.Title">
            <summary>Gets the note title.</summary>
            <value>The note title.</value>
        </member>
        <member name="P:Hyland.Unity.Note.ID">
            <summary>The Note's ID</summary>
        </member>
        <member name="T:Hyland.Unity.NoteList">
            <summary>A list of Notes</summary>
        </member>
        <member name="T:Hyland.Unity.NoteModifier">
            <summary>The modifier of Notes from a Document</summary>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.AddNote(Hyland.Unity.Note)">
            <summary>Adds a Note to the Document.</summary>
            <param name="note">Note to add.</param>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.AddNote(Hyland.Unity.Note,Hyland.Unity.Revision)">
            <summary>Adds a Note to a specific Revision of the Document.</summary>
            <param name="note">Note to add.</param>
            <param name="revision">Revision to which to add the Note.</param>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.CreateNotePosition(System.Int64,System.Int64)">
            <summary>Creates a NotePosition to be used in modification.</summary>
            <param name="x">X position</param>
            <param name="y">Y position</param>
            <returns>The created NotePosition</returns>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.CreateNoteProperties">
            <summary>Creates a NoteProperties to be used in modification.</summary>
            <returns>The created NoteProperties</returns>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.CreateNoteSize(System.Int64,System.Int64)">
            <summary>Creates a NoteSize to be used in modification.</summary>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>The created NoteSize</returns>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.CreateStaple(Hyland.Unity.StapleProperties)">
            <summary>Creates a staple between two Documents.</summary>
            <param name="properties">StapleProperties describing the staple.</param>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.CreateStapleProperties">
            <summary>Creates a StapleProperties to be used in the creation of a staple.</summary>
            <returns>The created StapleProperties</returns>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.CreateStapleProperties(Hyland.Unity.Revision)">
            <summary>
                Creates a StapleProperties to be used in the creation of a staple on a specific Document
                Revision.
            </summary>
            <param name="revision">Revision on which the StapleProperties object is created</param>
            <returns>The created StapleProperties</returns>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.RemoveNote(Hyland.Unity.Note)">
            <summary>Removes a Note from the Document</summary>
            <param name="note">Note to remove.</param>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.UpdateNote(Hyland.Unity.Note,System.String)">
            <summary>Updates text on a Note. To clear text, set to blank.</summary>
            <param name="note">Note</param>
            <param name="text">Note Text</param>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.UpdateNote(Hyland.Unity.Note,Hyland.Unity.NoteProperties)">
            <summary>Updates a Note with the given values.</summary>
            <param name="note">Note</param>
            <param name="noteProperties">Note Properties to use to update.</param>
            <remarks>Set Text to string.Empty to clear</remarks>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.UpdateNote(Hyland.Unity.Note,Hyland.Unity.NoteSize,Hyland.Unity.NotePosition)">
            <summary>Updates a Note with the given values.</summary>
            <param name="note">Note</param>
            <param name="noteSize">Note Size</param>
            <param name="notePosition">Note Position</param>
        </member>
        <member name="M:Hyland.Unity.NoteModifier.ApplyChanges">
            <summary>Applies the Note changes to the Document</summary>
        </member>
        <member name="T:Hyland.Unity.NoteProperties">
            <summary>Properties class that contains the mutable properties of a Note.</summary>
        </member>
        <member name="P:Hyland.Unity.NoteProperties.PageNumber">
            <summary>Gets the page number that the note belongs to.</summary>
            <value>The page number.</value>
            <remarks>Page numbers are 1-indexed.</remarks>
        </member>
        <member name="P:Hyland.Unity.NoteProperties.Position">
            <summary>The Note's Position</summary>
        </member>
        <member name="P:Hyland.Unity.NoteProperties.Size">
            <summary>Gets the size.</summary>
            <value>The size.</value>
        </member>
        <member name="P:Hyland.Unity.NoteProperties.Text">
            <summary>Gets the note text.</summary>
            <value>The note text.</value>
        </member>
        <member name="T:Hyland.Unity.NoteType">
            <summary>A Note Type</summary>
        </member>
        <member name="P:Hyland.Unity.NoteType.DisplaySettings">
            <summary>Note Type Display Settings</summary>
        </member>
        <member name="P:Hyland.Unity.NoteType.Flavor">
            <summary>The Flavor of this Note Type</summary>
        </member>
        <member name="P:Hyland.Unity.NoteType.Icon">
            <summary>Contains the icon that is to be used to represent notes of this type.</summary>
        </member>
        <member name="P:Hyland.Unity.NoteType.Privileges">
            <summary>The privileges for this Note Type</summary>
        </member>
        <member name="P:Hyland.Unity.NoteType.ID">
            <summary>The ID of the Note Type</summary>
        </member>
        <member name="P:Hyland.Unity.NoteType.Name">
            <summary>The name of the Note Type</summary>
        </member>
        <member name="M:Hyland.Unity.NoteType.CanI(Hyland.Unity.NotePrivilege)">
            <summary>Determine if the current user has the specified privilege.</summary>
            <param name="notePrivilege">The privilege to determine that the current user has.</param>
            <returns>If the privilege is granted to the current user.</returns>
        </member>
        <member name="M:Hyland.Unity.NoteType.CreateNote(System.String)">
            <summary>Create a Note from the Note Type</summary>
            <param name="text">Text to create the Note with.</param>
            <returns>Newly created Note.</returns>
        </member>
        <member name="M:Hyland.Unity.NoteType.CreateNote(Hyland.Unity.NoteProperties)">
            <summary>Create a Note from the Note Type</summary>
            <param name="noteProperties">NoteProperties to create the Note with.</param>
            <returns>Newly created Note.</returns>
        </member>
        <member name="M:Hyland.Unity.NoteType.ConvertInternalDisplaySettings(Hyland.Unity.InternalNoteTypeDisplaySettings)">
            <summary>Convert the internal display options to the public display options.</summary>
            <param name="internalDisplaySettings">The internal flags for current display settings</param>
            <returns>Valid public Note Type Display Setting flags</returns>
        </member>
        <member name="T:Hyland.Unity.NoteTypeList">
            <summary>A list of Note Types</summary>
        </member>
        <member name="T:Hyland.Unity.PageData">
            <summary>Page Data</summary>
        </member>
        <member name="P:Hyland.Unity.PageData.Extension">
            <summary>The extension of the Document data</summary>
        </member>
        <member name="P:Hyland.Unity.PageData.Stream">
            <summary>The stream of Document data</summary>
        </member>
        <member name="M:Hyland.Unity.PageData.Dispose">
            <summary>Dispose the PageData</summary>
        </member>
        <member name="T:Hyland.Unity.PageDataList">
            <summary>A list of PageData</summary>
        </member>
        <member name="M:Hyland.Unity.PageDataList.Dispose">
            <summary>Dispose the PageDataList</summary>
        </member>
        <member name="T:Hyland.Unity.PageDataStream">
            <summary>Stream used by Page Data.</summary>
        </member>
        <member name="P:Hyland.Unity.PageDataStream.Length">
            <summary>Length of the Stream. Use of this Property is not recommended.</summary>
        </member>
        <member name="M:Hyland.Unity.PageDataStream.#ctor(Hyland.Unity.Application,System.Guid)">
            <summary>Do not call unless this is a SoapServiceClient.</summary>
        </member>
        <member name="T:Hyland.Unity.OverlappingPageRangeException">
            <summary>Exception that is thrown when the Page Range has an overlap in the given ranges of a set.</summary>
        </member>
        <member name="T:Hyland.Unity.PageRangeSet">
            <summary>Used to represent a series of 1-based pages. (i.e. 1-4, 6, 8-10)</summary>
        </member>
        <member name="M:Hyland.Unity.PageRangeSet.AddRange(System.Int64,System.Int64)">
            <summary>Add a range of pages.  (1 and 4 to add 1-4, 2 and 2 to add page 2)</summary>
            <param name="start">Start</param>
            <param name="end">End</param>
        </member>
        <member name="M:Hyland.Unity.PageRangeSet.ToString">
            <summary>ToString operation on a KeywordList</summary>
            <returns>The created string</returns>
        </member>
        <member name="M:Hyland.Unity.PageRangeSet.ToPageList">
            <summary>Creates a List of all pages that are in this range</summary>
            <returns></returns>
        </member>
        <member name="T:Hyland.Unity.PrintFormat">
            <summary>PrintFormat</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.BottomMargin">
            <summary>The height of the bottom margin.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.HorizontalGutter">
            <summary>The size of the internal spacing between rows on printed items.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.LeftMargin">
            <summary>The width of the left margin.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.NumberOfPrintColumns">
            <summary>
                Returns the number of columns to divide a physical page into when printing multiple
                statements per page.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.NumberOfPrintRows">
            <summary>
                Returns the number of rows to divide a physical page into when printing multiple
                statements per page.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.Orientation">
            <summary>
                Indicates if the document should be printed in landscape mode. See the Orientation
                enumeration for possible values.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.OverlayDocument">
            <summary>The document of the overlay to use when printing items.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.OverlayFaxCompatible">
            <summary>Indicates if overlays should be rendered as a fax-compatible format.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.PrintAnnotationOnDocument">
            <summary>Indicates whether or not annotations should be printed on the document.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.PrintCurrentPageInHeader">
            <summary>Indicates whether the current page number is to be included when printing a header</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.PrintDateInHeader">
            <summary>Indicates whether the date is to be included in the header</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.PrintNoteTextAfterDocument">
            <summary>Indicates whether or not the note text should be printed after a document.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.PrintNoteTextOnDocument">
            <summary>Indicates whether or not the note icon should be printed on the document.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.PrintTimeInHeader">
            <summary>Indicates whether the current time is to be included when printing a header.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.PrintTotalPagesInHeader">
            <summary>
                Indicates whether to print the total number of pages for the current document in the
                header. This will also include the current page of the total in the header.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.RightMargin">
            <summary>The width of the right margin.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.ShowDocumentOverlay">
            <summary>
                Indicates if documents should be printed with their own overlays. If true then the value
                for overlayID will not be used.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.TopMargin">
            <summary>The height of the top margin.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.VerticalGutter">
            <summary>The size of the internal spacing between columns on printed items.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.ID">
            <summary>Returns the print format's ID.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.Name">
            <summary>Returns the print format's name.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintFormat.FontID">
            <summary>The font identifier of the font to use when printing items.</summary>
        </member>
        <member name="T:Hyland.Unity.PrintFormatList">
            <summary>Represents a list of OnBase print format objects.</summary>
        </member>
        <member name="T:Hyland.Unity.PrintJob">
            <summary>PrintJob</summary>
        </member>
        <member name="P:Hyland.Unity.PrintJob.ID">
            <summary>PrintJob ID</summary>
        </member>
        <member name="P:Hyland.Unity.PrintJob.Name">
            <summary>PrintJob Name</summary>
        </member>
        <member name="T:Hyland.Unity.PrintManagement">
            <summary>PrintManagement</summary>
        </member>
        <member name="P:Hyland.Unity.PrintManagement.PrintFormats">
            <summary>Gets the print formats available to the session</summary>
        </member>
        <member name="P:Hyland.Unity.PrintManagement.PrintQueues">
            <summary>Returns a list of print queues available to the session</summary>
        </member>
        <member name="M:Hyland.Unity.PrintManagement.CreatePrintRequestProperties(System.Collections.Generic.ICollection{Hyland.Unity.Document},Hyland.Unity.PrintQueue)">
            <summary>Creates a new PrintRequestProperties</summary>
            <param name="documentsToPrint">The list of documents to be printed.</param>
            <param name="printQueue">The print queue where the documents should be queued</param>
            <returns>The newly created <see cref="T:Hyland.Unity.PrintRequestProperties" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.PrintManagement.EnqueuePrintRequest(Hyland.Unity.PrintRequestProperties)">
            <summary>Enqueue the print request</summary>
            <param name="printRequestProperties">
                The <see cref="T:Hyland.Unity.PrintRequestProperties" /> that contains the
                details of the PrintRequest
            </param>
            <returns>The <see cref="T:Hyland.Unity.PrintJob" /> that represents the enqueued request</returns>
        </member>
        <member name="T:Hyland.Unity.PrintQueue">
            <summary>PrintQueue</summary>
        </member>
        <member name="P:Hyland.Unity.PrintQueue.Icon">
            <summary>Contains the icon that is to be used to represent this print queue.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintQueue.PrintQueueType">
            <summary>
                Returns a PrintQueue.QueueType enumeration for the type of print queue this object
                represents.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintQueue.ID">
            <summary>Returns the unique queue id of the printqueue object.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintQueue.Name">
            <summary>The Name for internal API usage. For UI usage, use the NameLocalized property.</summary>
        </member>
        <member name="T:Hyland.Unity.PrintQueueList">
            <summary>List of PrintQueues</summary>
        </member>
        <member name="T:Hyland.Unity.PrintRequestProperties">
            <summary>PrintRequestProperties</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.Name">
            <summary>A friendly name for the print job.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.NumberOfCopies">
            <summary>The number of copies the print job is servicing.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PageEnd">
            <summary>
                The page with which to end printing. This property is only used if the printRange property
                is set to range. This page end value is 1 based.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PageStart">
            <summary>
                The page with which to begin printing. This property is only used if the printRange
                property is set to range. This page start value is 1 based.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintAnnotationOnDocument">
            <summary>Indicates whether or not annotations should be printed on the document.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintFormat">
            <summary>Print Format to be used for the print job</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintInColor">
            <summary>Indicates whether or not the document will be printed in color.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintNoteTextAfterDocument">
            <summary>
                Indicates whether or not the contents of the document's notes should be printed after the
                document.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintNoteTextOnDocument">
            <summary>Indicates whether or not the note icon should be printed on the document.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintOrientation">
            <summary>
                Indicates the paper orientation for this print job. Current values are: landscape - The
                job is configured for landscape mode. portrait - The job is configured for portrait mode.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintOverlay">
            <summary>Indicates whether or not documents that have overlays should be printed with them.</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintRange">
            <summary>
                This property determines the pages that will be printed. Valid values for this property
                include PrintRange.All and PrintRange.Range. If PrintRange.All is designated then the pageStart
                and pageEnd parameters are ignored. If PrintRange.Range is designated then the print job
                interprets pageStart and pageEnd as the start and end page, respectively.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.SingleJob">
            <summary>
                Specifies whether or not to treat the print job as a single job when printing multiple
                documents.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.Documents">
            <summary>Documents to be added to the print job</summary>
        </member>
        <member name="P:Hyland.Unity.PrintRequestProperties.PrintQueue">
            <summary>Print Queue to be used for the print job</summary>
        </member>
        <member name="T:Hyland.Unity.RedactionImageModification">
            <summary>A helper object that stores all the parameters required to create a redaction on a page.</summary>
        </member>
        <member name="P:Hyland.Unity.RedactionImageModification.Flavor">
            <summary>Gets or sets the flavor of Redaction.</summary>
            <value>The flavor.</value>
        </member>
        <member name="P:Hyland.Unity.RedactionImageModification.Location">
            <summary>
                The location where the redaction is applied. Required for RedactionBlack and
                RedactionWhite
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Hyland.Unity.RedactionImageModification.MarkupText">
            <summary>Gets or sets the markup text for MarkupText redaction flavor.</summary>
        </member>
        <member name="P:Hyland.Unity.RedactionImageModification.MarkupTextFontSettings">
            <summary>Gets or sets the Markup Text Font Settings for Markup Text redaction.</summary>
        </member>
        <member name="P:Hyland.Unity.RedactionImageModification.Metric">
            <summary>Gets or sets the metric in which the location is specified.</summary>
            <value>The metric.</value>
        </member>
        <member name="P:Hyland.Unity.RedactionImageModification.Page">
            <summary>Gets or sets the page where the redaction is applied. The page number is 1-indexed.</summary>
            <value>The page.</value>
        </member>
        <member name="T:Hyland.Unity.Retrieval">
            <summary>Retrieval Operations for Unity</summary>
        </member>
        <member name="P:Hyland.Unity.Retrieval.Default">
            <summary>Default Format Operations</summary>
        </member>
        <member name="P:Hyland.Unity.Retrieval.Image">
            <summary>Image Format Operations</summary>
        </member>
        <member name="P:Hyland.Unity.Retrieval.Native">
            <summary>
                Native Format Operations. Try to use Default instead of Native there are limitation to
                NativeDataProvider.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Retrieval.PDF">
            <summary>PDF Format Operations</summary>
        </member>
        <member name="P:Hyland.Unity.Retrieval.Text">
            <summary>Text Format Operations</summary>
        </member>
        <member name="T:Hyland.Unity.EForm">
            <summary>EForm</summary>
        </member>
        <member name="P:Hyland.Unity.EForm.Fields">
            <summary>Gets the EForm fields, this does not include the keywords.</summary>
            <value>The fields.</value>
        </member>
        <member name="P:Hyland.Unity.EForm.IsVirtualEForm">
            <summary>Gets a value indicating whether this instance is virtual E-Form.</summary>
            <value>
                <c>true</c> if this instance is virtual E-Form; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hyland.Unity.EForm.CreateFieldModifier">
            <summary>
                Creates the <see cref="T:Hyland.Unity.FieldModifier" /> that is used to update fields of an EForm. If the
                EForm is a virtual EForm this method throws an exception.
            </summary>
            <returns>A <see cref="T:Hyland.Unity.FieldModifier" /> object.</returns>
        </member>
        <member name="T:Hyland.Unity.FieldModifier">
            <summary>The modifier used to change fields in an EForm.</summary>
        </member>
        <member name="M:Hyland.Unity.FieldModifier.AddField(System.String,System.String)">
            <summary>Add a Field</summary>
            <param name="field">Field</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.FieldModifier.Clear">
            <summary>This removes all Added values and Clears all existing values.</summary>
        </member>
        <member name="M:Hyland.Unity.FieldModifier.RemoveField(System.String)">
            <summary>Remove a field from the Fields collection.</summary>
            <param name="field">Field</param>
        </member>
        <member name="M:Hyland.Unity.FieldModifier.UpdateField(System.String,System.String)">
            <summary>
                Updates a field, Adds a new one, or Removes an existing Field if the value is null or
                empty string.
            </summary>
            <param name="field">Field</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.FieldModifier.ApplyChanges">
            <summary>Applies the changes to the EForm</summary>
        </member>
        <member name="T:Hyland.Unity.Imaging">
            <summary>Imaging Operations</summary>
        </member>
        <member name="M:Hyland.Unity.Imaging.AddPage(System.String,System.Int64)">
            <summary>Adds the page to the current Image rendition.</summary>
            <param name="filepath">The path of the file that contains the page data.</param>
            <param name="insertBeforePage">
                The page number where new page must be inserted. If this value is
                less than or equal to 1 then page is inserted at the beginning. If this value is greater than
                the count then page is inserted at the end.
            </param>
        </member>
        <member name="M:Hyland.Unity.Imaging.AddPage(Hyland.Unity.PageData,System.Int64)">
            <summary>Adds the page to the current Image rendition.</summary>
            <param name="pageData">The page data.</param>
            <param name="insertBeforePage">
                The page number where new page must be inserted. If this value is
                less than or equal to 1 then page is inserted at the beginning. If this value is greater than
                the count then page is inserted at the end.
            </param>
        </member>
        <member name="M:Hyland.Unity.Imaging.AddPages(System.Collections.Generic.IEnumerable{System.String},System.Int64)">
            <summary>Adds pages to the current Image rendition.</summary>
            <param name="filepathList">The list of filepath that contains the page data.</param>
            <param name="insertBeforePage">
                The page number where new page must be inserted. If this value is
                less than or equal to 1 then pages are inserted at the beginning. If this value is greater than
                the count then pages are inserted at the end.
            </param>
        </member>
        <member name="M:Hyland.Unity.Imaging.AddPages(System.Collections.Generic.IEnumerable{Hyland.Unity.PageData},System.Int64)">
            <summary>Adds pages to the current Image rendition.</summary>
            <param name="pageDataList">A list of page data.</param>
            <param name="insertBeforePage">
                The page number where new page must be inserted. If this value is
                less than or equal to 1 then pages are inserted at the beginning. If this value is greater than
                the count then pages are inserted at the end.
            </param>
        </member>
        <member name="M:Hyland.Unity.Imaging.AddPages(Hyland.Unity.PageDataList,System.Int64)">
            <summary>Adds pages to the current Image rendition.</summary>
            <param name="pageDataList">The list of page data.</param>
            <param name="insertBeforePage">
                The page number where new page must be inserted. If this value is
                less than or equal to 1 then pages are inserted at the beginning. If this value is greater than
                the count then pages are inserted at the end.
            </param>
        </member>
        <member name="M:Hyland.Unity.Imaging.DeletePage(System.Int64)">
            <summary>Deletes the page.</summary>
            <param name="page">The page number of the page to be deleted.</param>
            <remarks>Page number are one based.</remarks>
        </member>
        <member name="M:Hyland.Unity.Imaging.DeletePages(System.Collections.Generic.ICollection{System.Int64})">
            <summary>Deletes the pages.</summary>
            <param name="pageNumbers">The page numbers of the pages to be deleted.</param>
        </member>
        <member name="M:Hyland.Unity.Imaging.MovePage(System.Int64,System.Int64)">
            <summary>Moves the page.</summary>
            <param name="pageToMove">The page number of the page to move.</param>
            <param name="newIndex">
                The new 1-based index number of the page after it is moved. If this value is
                less than or equal to 1 then page is moved to the beginning. If this value is greater than the
                count then page is moved to the end.
            </param>
        </member>
        <member name="M:Hyland.Unity.Imaging.SetRotation(System.Int64,Hyland.Unity.PageRotation)">
            <summary>Sets the rotation on a page.</summary>
            <param name="pageToRotate">The page to rotate.</param>
            <param name="pageRotation">The rotation that needs to be applied on the page.</param>
        </member>
        <member name="M:Hyland.Unity.Imaging.SetRotations(System.Collections.Generic.ICollection{System.Int64},System.Collections.Generic.ICollection{Hyland.Unity.PageRotation})">
            <summary>Sets the rotation on pages.</summary>
            <param name="pageNumbers">The collection of page numbers.</param>
            <param name="rotations">The corresponding collection of rotations.</param>
        </member>
        <member name="T:Hyland.Unity.Rendition">
            <summary>A Rendition of a Document</summary>
        </member>
        <member name="P:Hyland.Unity.Rendition.Comment">
            <summary>The Rendition's comment</summary>
        </member>
        <member name="P:Hyland.Unity.Rendition.CreatedBy">
            <summary>The Rendition's Creator</summary>
        </member>
        <member name="P:Hyland.Unity.Rendition.CreationDate">
            <summary>The Rendition's Creation Date</summary>
        </member>
        <member name="P:Hyland.Unity.Rendition.EForm">
            <summary>Gets the EForm object associated with this rendition.</summary>
            <value>The <see cref="P:Hyland.Unity.Rendition.EForm" /> object.</value>
            <remarks>This property is null if this rendition is not a EForm.</remarks>
        </member>
        <member name="P:Hyland.Unity.Rendition.FileType">
            <summary>The FileType of the Rendition</summary>
        </member>
        <member name="P:Hyland.Unity.Rendition.FileExtension">
            <summary> The File Extension of the Rendition's first page's relative path</summary>
        </member>
        <member name="P:Hyland.Unity.Rendition.Imaging">
            <summary>Gets the imaging object associated with this rendition.</summary>
            <value>The <see cref="P:Hyland.Unity.Rendition.Imaging" /> object.</value>
            <remarks>This property is null if this rendition is not an image rendition.</remarks>
        </member>
        <member name="P:Hyland.Unity.Rendition.NumberOfPages">
            <summary>Gets the number of pages in the current rendition.</summary>
            <value>The number of pages.</value>
        </member>
        <member name="P:Hyland.Unity.Rendition.Revision">
            <summary>The Revision that the rendition object belongs to.</summary>
        </member>
        <member name="P:Hyland.Unity.Rendition.UnityForm">
            <summary>Gets the Unity Form object associated with this rendition.</summary>
            <value>The <see cref="P:Hyland.Unity.Rendition.UnityForm" /> object.</value>
            <remarks>This property is null if this rendition is not a Unity Form.</remarks>
        </member>
        <member name="M:Hyland.Unity.Rendition.GetNativeFormatAllowed">
            <summary>Returns a boolean indicating if the rendition can be obtained in its Native format.</summary>
            <returns>true if NativeFormat is allowed, false otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.RenditionList">
            <summary>A list of Renditions</summary>
        </member>
        <member name="P:Hyland.Unity.RenditionList.Item(Hyland.Unity.FileType)">
            <summary>This is indexed by the FileType</summary>
            <param name="fileType">File Type indexer.</param>
            <returns>Rendition that matches the File Type.</returns>
        </member>
        <member name="P:Hyland.Unity.RenditionList.Item(System.String)">
            <summary>This is indexed by the FileType Name</summary>
            <param name="fileTypeName">File Type Name indexer.</param>
            <returns>Rendition that matches the File Type Name.</returns>
        </member>
        <member name="P:Hyland.Unity.RenditionList.Item(System.Int32)">
            <summary>This is indexed by the FileType ID</summary>
            <param name="fileTypeId">File Type ID indexer.</param>
            <returns>Rendition that matches the File Type ID</returns>
        </member>
        <member name="T:Hyland.Unity.Revision">
            <summary>A Revision on a Document</summary>
        </member>
        <member name="P:Hyland.Unity.Revision.Comment">
            <summary>The Revision's Comment</summary>
        </member>
        <member name="P:Hyland.Unity.Revision.CreatedBy">
            <summary>The Revision's Creator</summary>
        </member>
        <member name="P:Hyland.Unity.Revision.Date">
            <summary>The Revision's Date</summary>
        </member>
        <member name="P:Hyland.Unity.Revision.DefaultRendition">
            <summary>The Revision's Default Rendition</summary>
        </member>
        <member name="P:Hyland.Unity.Revision.Document">
            <summary>The Revision's Document</summary>
        </member>
        <member name="P:Hyland.Unity.Revision.Renditions">
            <summary>The Revision's set of Renditions</summary>
        </member>
        <member name="P:Hyland.Unity.Revision.ID">
            <summary>The Revision's ID</summary>
        </member>
        <member name="T:Hyland.Unity.RevisionList">
            <summary>A List of Revisions, indexed by Revision ID</summary>
        </member>
        <member name="P:Hyland.Unity.RevisionList.Item(System.Int32)">
            <summary>Indexer to get Revision by Revision ID</summary>
            <param name="revisionId">Revision ID indexer.</param>
            <returns>Revision that matches the Revision ID.</returns>
        </member>
        <member name="T:Hyland.Unity.Version">
            <summary>A marked Version of a Document</summary>
        </member>
        <member name="P:Hyland.Unity.Version.CreatedBy">
            <summary>Creator of the Version</summary>
        </member>
        <member name="P:Hyland.Unity.Version.Date">
            <summary>The Date of the Version</summary>
        </member>
        <member name="P:Hyland.Unity.Version.Rendition">
            <summary>
                Returns the Rendition associated with the version. Returns null if the associated
                rendition could not be found.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Version.ID">
            <summary>The ID of the Version</summary>
        </member>
        <member name="P:Hyland.Unity.Version.Name">
            <summary>The Name of the Version</summary>
        </member>
        <member name="T:Hyland.Unity.VersionList">
            <summary>A list of Versions</summary>
        </member>
        <member name="T:Hyland.Unity.Role">
            <summary>A sealed class representing a Role in OnBase</summary>
        </member>
        <member name="P:Hyland.Unity.Role.ID">
            <summary>Gets the role ID.</summary>
            <value>The role ID.</value>
        </member>
        <member name="P:Hyland.Unity.Role.Name">
            <summary>Gets the Rolename.</summary>
            <value>The role name.</value>
        </member>
        <member name="M:Hyland.Unity.Role.AddUsers(System.Collections.Generic.IEnumerable{Hyland.Unity.User})">
            <summary>Add User to the Role</summary>
            <param name="users">The users to be added to the role</param>
        </member>
        <member name="M:Hyland.Unity.Role.Contains(Hyland.Unity.User)">
            <summary>Returns true if the user is in the role</summary>
            <param name="user">The user to test if it contained in the role</param>
            <returns>A boolean that indicates if the user is in the role.</returns>
        </member>
        <member name="M:Hyland.Unity.Role.GetUsers">
            <summary>A list of Users in the Role</summary>
            <returns>The list of users in the Role</returns>
        </member>
        <member name="M:Hyland.Unity.Role.RemoveUsers(System.Collections.Generic.IEnumerable{Hyland.Unity.User})">
            <summary>Removes User from the Role</summary>
            <param name="users">The users to be removed from the role</param>
        </member>
        <member name="T:Hyland.Unity.RoleList">
            <summary>A list of Roles</summary>
        </member>
        <member name="T:Hyland.Unity.ScanFormat">
            <summary>Scan Format.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanFormat.ID">
            <summary>Gets the ID of the ScanFormat.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanFormat.Name">
            <summary>Gets the name of the ScanFormat.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanFormat.#ctor(System.Int64,System.String,Hyland.Unity.Application)">
            <summary>Constructor</summary>
            <param name="id">ID of the ScanFormat.</param>
            <param name="name">Name of the ScanFormat.</param>
            <param name="app">The Application object.</param>
        </member>
        <member name="M:Hyland.Unity.ScanFormat.#ctor(Hyland.Unity.Application)">
            <summary>Constructor</summary>
            <param name="app">The Application object.</param>
        </member>
        <member name="T:Hyland.Unity.ScanFormatList">
            <summary>List of ScanFormats</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueue">
            <summary>Scan Queue</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueue.DefaultDocumentType">
            <summary>The default DocumentType for the Scan Queue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueue.Icon">
            <summary>Contains the icon that is to be used to represent this scan queue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueue.ID">
            <summary>The identifier for the Scan Queue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueue.Name">
            <summary>The name of the Scan Queue.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueue.GetBatches">
            <summary>Returns all Scan Batches for the given Scan Queue with respect to the session</summary>
            <returns>
                Returns a <see cref="T:Hyland.Unity.ScanBatchList" /> object that contains the collection of scan batches
                associated with this scan queue.
            </returns>
        </member>
        <member name="M:Hyland.Unity.ScanQueue.GetScanQueueDocumentTypes">
            <summary>Returns Document Types for the given ScanQueue with respect to the session</summary>
            <returns>
                A <see cref="T:Hyland.Unity.DocumentTypeList" /> object that contains the document types associated with
                the scan queue.
            </returns>
        </member>
        <member name="T:Hyland.Unity.ScanQueueList">
            <summary>List of Scan Queues</summary>
        </member>
        <member name="T:Hyland.Unity.SecurityKeywordOperator">
            <summary>The Security Keyword Operator, defined as either Equal or NotEqual.</summary>
        </member>
        <member name="F:Hyland.Unity.SecurityKeywordOperator.Equal">
            <summary>Equal SecurityKeywordOperator</summary>
        </member>
        <member name="F:Hyland.Unity.SecurityKeywordOperator.NotEqual">
            <summary>NotEqual SecurityKeywordOperator</summary>
        </member>
        <member name="T:Hyland.Unity.SecurityKeywordPrincipal">
            <summary>The Principal of the SecurityKeyword.</summary>
        </member>
        <member name="F:Hyland.Unity.SecurityKeywordPrincipal.User">
            <summary>This SecurityKeyword is applied to a User</summary>
        </member>
        <member name="F:Hyland.Unity.SecurityKeywordPrincipal.UserGroup">
            <summary>This SecurityKeyword is applied to a UserGroup</summary>
        </member>
        <member name="T:Hyland.Unity.SecurityKeywordType">
            <summary>The Security Keyword Type, defined as either Retrieval or Indexing.</summary>
        </member>
        <member name="F:Hyland.Unity.SecurityKeywordType.Retrieval">
            <summary>Retrieval - SecurityKeywordType</summary>
        </member>
        <member name="F:Hyland.Unity.SecurityKeywordType.Indexing">
            <summary>Indexing - SecurityKeywordType</summary>
        </member>
        <member name="T:Hyland.Unity.SecurityKeyword">
            <summary>Class representing a Security Keyword</summary>
        </member>
        <member name="P:Hyland.Unity.SecurityKeyword.IsUsername">
            <summary>Specifies if the SecurityKeyword is Static or Username</summary>
        </member>
        <member name="P:Hyland.Unity.SecurityKeyword.Keyword">
            <summary>
                Gets the Keyword of this SecurityKeyword.  From here such properties as the value and
                KeywordType can be retrieved.
            </summary>
        </member>
        <member name="P:Hyland.Unity.SecurityKeyword.SecurityKeywordOperator">
            <summary>Gets the SecurityKeywordOperator of the SecurityKeyword</summary>
        </member>
        <member name="P:Hyland.Unity.SecurityKeyword.SecurityKeywordPrincipal">
            <summary>Gets the SecurityKeywordPrincipal of the SecurityKeyword</summary>
        </member>
        <member name="P:Hyland.Unity.SecurityKeyword.SecurityKeywordType">
            <summary>Gets the SecurityKeywordType of the SecurityKeyword</summary>
        </member>
        <member name="P:Hyland.Unity.SecurityKeyword.User">
            <summary>
                If the SecurityKeywordPrincipal is SecurityKeywordPrincipal.User this property will
                contain the User who is assigned to this SecurityKeyword. Otherwise, this Property will be
                null.
            </summary>
        </member>
        <member name="P:Hyland.Unity.SecurityKeyword.UserGroup">
            <summary>
                If the SecurityKeywordPrincipal is SecurityKeywordPrincipal.UserGroup this property will
                contain the UserGroup who is assigned to this SecurityKeyword. Otherwise, this Property will be
                null.
            </summary>
        </member>
        <member name="T:Hyland.Unity.SecurityKeywordList">
            <summary>A collection of SecurityKeywords</summary>
        </member>
        <member name="M:Hyland.Unity.SecurityKeywordList.Find(Hyland.Unity.KeywordType)">
            <summary>
                Returns the first SecurityKeyword found in this collection that matches keywordType.  If
                no SecurityKeyword in this collection is of KeywordType null will be returned.
            </summary>
            <param name="keywordType">The KeywordType to search for</param>
            <returns>
                The first SecurityKeyword found in this collection that matches keywordType.  If no
                SecurityKeyword in this collection is of KeywordType null will be returned.
            </returns>
        </member>
        <member name="M:Hyland.Unity.SecurityKeywordList.FindAll(Hyland.Unity.KeywordType)">
            <summary>
                Returns the collection of SecurityKeywords in this collection that are of keywordType.  If
                no SecurityKeyword in this collection is of KeywordType, an empty collection will be returned.
            </summary>
            <param name="keywordType">The KeywordType to search for</param>
            <returns>
                The collection of SecurityKeywords in this collection that are of keywordType.  If no
                SecurityKeyword in this collection is of KeywordType, an empty collection will be returned.
            </returns>
        </member>
        <member name="T:Hyland.Unity.StapleProperties">
            <summary>Properties class that contains the mutable properties of a Staple.</summary>
        </member>
        <member name="P:Hyland.Unity.StapleProperties.Document">
            <summary>The Back Document to be stapled.</summary>
            <value>The Back Document to be stapled.</value>
        </member>
        <member name="P:Hyland.Unity.StapleProperties.DocumentPageNumber">
            <summary>The page number of Document to staple.</summary>
            <value>The page number of Document to staple.</value>
            <remarks>Page numbers are 1-indexed.</remarks>
        </member>
        <member name="P:Hyland.Unity.StapleProperties.DocumentPosition">
            <summary>The position of the staple on Document.</summary>
            <value>The position of the staple on Document.</value>
        </member>
        <member name="P:Hyland.Unity.StapleProperties.DocumentRevision">
            <summary>The Revision of Document to be stapled.</summary>
            <value>The Revision of Document to be stapled.</value>
        </member>
        <member name="P:Hyland.Unity.StapleProperties.StapledDocument">
            <summary>The Document to be stapled to the front of Document.</summary>
            <value>The Document to be stapled to the front of Document.</value>
        </member>
        <member name="P:Hyland.Unity.StapleProperties.StapledDocumentPageNumber">
            <summary>The page number of StapledDocument to staple.</summary>
            <value>The page number of StapledDocument to staple.</value>
            <remarks>Page numbers are 1-indexed.</remarks>
        </member>
        <member name="P:Hyland.Unity.StapleProperties.StapledDocumentPosition">
            <summary>The position of the staple on Document.</summary>
            <value>The position of the staple on Document.</value>
        </member>
        <member name="T:Hyland.Unity.Storage">
            <summary>Unity class responsible for all OnBase Storage Operations</summary>
        </member>
        <member name="M:Hyland.Unity.Storage.CreatePageData(System.String)">
            <summary>Creates a <see cref="T:Hyland.Unity.PageData" /> object.</summary>
            <param name="filePath">The file path.</param>
            <returns>The PageData object</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreatePageData(System.IO.Stream,System.String)">
            <summary>Creates a <see cref="T:Hyland.Unity.PageData" /> object.</summary>
            <param name="stream">The stream.</param>
            <param name="extension">The extension.</param>
            <returns>The PageData object</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateRedactionImageModification">
            <summary>Creates the <see cref="T:Hyland.Unity.RedactionImageModification" /> object.</summary>
            <returns>The RedactionImageModification object</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateReindexProperties(Hyland.Unity.Document,Hyland.Unity.DocumentType)">
            <summary>Create a <see cref="T:Hyland.Unity.ReindexProperties" /> object</summary>
            <param name="document">Document to Reindex.</param>
            <param name="documentType">DocumentType to reindex to.</param>
            <returns>The ReindexProperties object</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateReindexRenditionProperties(Hyland.Unity.Rendition,Hyland.Unity.FileType)">
            <summary>Creates a <see cref="T:Hyland.Unity.ReindexRenditionProperties" /> object.</summary>
            <param name="rendition">Target rendition for reindexing.</param>
            <param name="fileType">The FileType to change to.</param>
            <returns>The ReindexRenditionProperties object.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreEFormRevisionProperties(Hyland.Unity.Document)">
            <summary>Creates a <see cref="T:Hyland.Unity.StoreEFormRevisionProperties" /> object</summary>
            <param name="doc">The <see cref="T:Hyland.Unity.Document" /> whose EForm will have a new revision</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the Document does not have an EForm property.</exception>
            <returns>The created <see cref="T:Hyland.Unity.StoreEFormRevisionProperties" /></returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreNewDocumentProperties(Hyland.Unity.DocumentType,Hyland.Unity.FileType)">
            <summary>Create a <see cref="T:Hyland.Unity.StoreNewDocumentProperties" /> object</summary>
            <param name="documentType">The <see cref="T:Hyland.Unity.DocumentType" /> the new document will be created in.</param>
            <param name="fileType">The <see cref="T:Hyland.Unity.FileType" /> of new document.</param>
            <returns>The created StoreNewDocumentProperties</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreNewEFormProperties(Hyland.Unity.DocumentType,Hyland.Unity.FileType)">
            <summary>Creates the <see cref="T:Hyland.Unity.StoreNewEFormProperties" /> object.</summary>
            <param name="documentType">The <see cref="T:Hyland.Unity.DocumentType" /> the new EForm will be created in.</param>
            <param name="fileType">
                The <see cref="T:Hyland.Unity.FileType" /> of new EForm. The only valid fileType allowed
                here are EForm or Virtual EForm.
            </param>
            <returns>The StoreNewEFormProperties object.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreNewUnindexedDocumentProperties(Hyland.Unity.FileType,Hyland.Unity.ScanBatch)">
            <summary>Create a <see cref="T:Hyland.Unity.StoreNewUnindexedDocumentProperties" /> object</summary>
            <param name="fileType">The <see cref="T:Hyland.Unity.FileType" /> of new Unindexed Document.</param>
            <param name="scanBatch">The <see cref="T:Hyland.Unity.ScanBatch" /> the new Unindexed Document will be created in.</param>
            <returns>The created StoreNewUnindexedDocumentProperties</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreNewUnindexedDocumentProperties(Hyland.Unity.FileType,Hyland.Unity.ScanBatch,Hyland.Unity.DocumentType)">
            <summary>Create a <see cref="T:Hyland.Unity.StoreNewUnindexedDocumentProperties" /> object</summary>
            <param name="fileType">The <see cref="T:Hyland.Unity.FileType" /> of new document.</param>
            <param name="scanBatch">The <see cref="T:Hyland.Unity.ScanBatch" /> the new document will be created in.</param>
            <param name="documentType">The <see cref="T:Hyland.Unity.DocumentType" /> the new document will be created in.</param>
            <returns>The created StoreNewUnindexedDocumentProperties</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreNewUnityFormProperties(Hyland.Unity.UnityForm.FormTemplate)">
            <summary>Creates the <see cref="T:Hyland.Unity.StoreNewUnityFormProperties" /> object.</summary>
            <param name="formTemplate">The Unity Form template.</param>
            <returns>The StoreNewUnityFormProperties object.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreRedactionProperties(Hyland.Unity.Document)">
            <summary>Create a <see cref="T:Hyland.Unity.StoreRedactionProperties" /> object</summary>
            <param name="parentDocument">The parent document used for the redaction.</param>
            <returns>The created StoreRedactionProperties</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreRenditionProperties(Hyland.Unity.Revision,Hyland.Unity.FileType)">
            <summary>Create a <see cref="T:Hyland.Unity.StoreRenditionProperties" /> object</summary>
            <param name="revision">The <see cref="T:Hyland.Unity.Revision" /> where the new rendition is added to.</param>
            <param name="fileType">The <see cref="T:Hyland.Unity.FileType" /> of new rendition.</param>
            <returns>The created StoreRenditionProperties</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.CreateStoreRevisionProperties(Hyland.Unity.Document,Hyland.Unity.FileType)">
            <summary>Create a <see cref="T:Hyland.Unity.StoreRevisionProperties" /> object</summary>
            <param name="document">The <see cref="T:Hyland.Unity.Document" /> where the new revision is added to.</param>
            <param name="fileType">The <see cref="T:Hyland.Unity.FileType" /> of new revision.</param>
            <returns>The created StoreRevisionProperties</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.DeleteDocument(Hyland.Unity.Document)">
            <summary>Deletes the document.</summary>
            <param name="document">The document to be deleted.</param>
        </member>
        <member name="M:Hyland.Unity.Storage.PurgeDocument(Hyland.Unity.Document,Hyland.Unity.PurgeFlags)">
            <summary>Purges the document.  Obsolete - Cannot be used.</summary>
            <param name="document">The document to be purged.</param>
            <param name="flags">Flags controlling the behavior of the purge action.</param>
        </member>
        <member name="M:Hyland.Unity.Storage.PurgeDocument(Hyland.Unity.Document)">
            <summary>
                Purges the document. This will purge the document metadata, keywords, page metadata and
                the page files in diskgroup.
            </summary>
            <param name="document">The document to be purged.</param>
        </member>
        <member name="M:Hyland.Unity.Storage.ReindexDocument(Hyland.Unity.ReindexProperties)">
            <summary>Reindexes a Document</summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
            </remarks>
            <param name="properties">
                The <see cref="T:Hyland.Unity.ReindexProperties" /> properties. This property can be
                created using <see cref="M:Hyland.Unity.Storage.CreateReindexProperties(Hyland.Unity.Document,Hyland.Unity.DocumentType)" /> method.
            </param>
            <returns>The Reindexed Document</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.ReindexRendition(Hyland.Unity.ReindexRenditionProperties)">
            <summary>Reindexes the target Rendition using the specified properties.</summary>
            <param name="properties">Properties to Reindex with.</param>
            <returns>The Document containing the altered Rendition.</returns>
            <remarks>
                This operation will end up reindexing the entire Document, but only targeting Rendition
                specific properties like FileType. If a security keyword is added to or modified on the
                document object that would cause the current user to lose access to the document object. Access
                will only be available on the client-side object. All subsequent service requests will have
                permission denied.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewDocument(System.Collections.Generic.IEnumerable{System.String},Hyland.Unity.StoreNewDocumentProperties)">
            <summary>Stores a New Document.</summary>
            <remarks>
                <para>
                    If a security keyword is added to or modified on the document object that would cause the
                    current user to lose access to the document object. Access will only be available on the
                    client-side object. All subsequent service requests will have permission denied.
                </para>
                <para>
                    This method is only intended to store image documents.  Other File Formats may return
                    unexpected results.
                </para>
            </remarks>
            <param name="files">File paths for document pages on the new Document.</param>
            <param name="props">Properties for the new Document.</param>
            <returns>The New Document</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewDocument(Hyland.Unity.PageData,Hyland.Unity.StoreNewDocumentProperties)">
            <summary>Stores a New Document.</summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
            </remarks>
            <param name="pageData">Data for the new Document.</param>
            <param name="props">Properties for the new Document.</param>
            <returns>The New Document</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewDocument(System.Collections.Generic.IEnumerable{Hyland.Unity.PageData},Hyland.Unity.StoreNewDocumentProperties)">
            <summary>Stores a New Document.</summary>
            <remarks>
                <para>
                    If a security keyword is added to or modified on the document object that would cause the
                    current user to lose access to the document object. Access will only be available on the
                    client-side object. All subsequent service requests will have permission denied.
                </para>
                <para>
                    This method is only intended to store image documents.  Other File Formats may return
                    unexpected results.
                </para>
            </remarks>
            <param name="pageDatas">A collection of PageData for document pages on the new Document.</param>
            <param name="props">Properties for the new Document.</param>
            <returns>The New Document</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewEForm(Hyland.Unity.StoreNewEFormProperties)">
            <summary>Stores the new E-Form.</summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
            </remarks>
            <param name="props">
                The <see cref="T:Hyland.Unity.StoreNewEFormProperties" /> object that represents the
                properties required to store E-Form.
            </param>
            <returns>The stored document.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewEFormRevision(Hyland.Unity.StoreEFormRevisionProperties)">
            <summary>Stores a new Revision of the EForm</summary>
            <param name="props">Properties for the new EForm Revision</param>
            <returns>The newly stored EForm object.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewRendition(System.Collections.Generic.IEnumerable{Hyland.Unity.PageData},Hyland.Unity.StoreRenditionProperties)">
            <summary>Store Rendition</summary>
            <param name="pageDatas">A collection of PageData for document pages on the new Rendition</param>
            <param name="props">Properties for the new Rendition</param>
            <returns>Document with Rendition added</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewRendition(System.Collections.Generic.IEnumerable{System.String},Hyland.Unity.StoreRenditionProperties)">
            <summary>Store Rendition</summary>
            <param name="files">File paths for document pages on the new Revision.</param>
            <param name="props">Properties for the new Rendition</param>
            <returns>Document with Rendition added</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewRevision(Hyland.Unity.PageData,Hyland.Unity.StoreRevisionProperties)">
            <summary>Stores a New Revision</summary>
            <param name="pageData">Data for the new Revision.</param>
            <param name="props">Properties for a the new Revision.</param>
            <returns>Changed Document object.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewRevision(System.Collections.Generic.IEnumerable{Hyland.Unity.PageData},Hyland.Unity.StoreRevisionProperties)">
            <summary>Stores a New Revision</summary>
            <param name="pageDatas">A collection of PageData for document pages on the new Revision.</param>
            <param name="props">Properties for a the new Revision.</param>
            <returns>Changed Document object.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewRevision(System.Collections.Generic.IEnumerable{System.String},Hyland.Unity.StoreRevisionProperties)">
            <summary>Stores a New Revision</summary>
            <param name="files">File paths for document pages on the new Revision.</param>
            <param name="props">Properties for the new Revision.</param>
            <returns>Changed Document object.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewUnindexedDocument(System.Collections.Generic.IEnumerable{System.String},Hyland.Unity.StoreNewUnindexedDocumentProperties)">
            <summary>
                Stores a New Unindexed Document. The UnindexedDocument will be added to the specified scan
                batch for further indexing, and will not be available from OnBase retrieval until indexing is
                complete.
            </summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
                <para />
                For batches in custom processes, this method can store unindexed documents only if the batch
                has not been transitioned yet.
            </remarks>
            <param name="files">File paths for document pages on the new Unindexed Document.</param>
            <param name="props">Properties for the new Unindexed Document.</param>
            <returns>The new <see cref="T:Hyland.Unity.UnindexedDocument" /></returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewUnindexedDocument(System.Collections.Generic.IEnumerable{System.String},Hyland.Unity.StoreNewUnindexedDocumentProperties,System.Boolean)">
            <summary>
                Stores a New Unindexed Document. The UnindexedDocument will be added to the specified scan
                batch for further indexing, and will not be available from OnBase retrieval until indexing is
                complete.
            </summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
                <para />
                For batches in custom processes, this method can store unindexed documents only if the batch
                has not been transitioned yet.
            </remarks>
            <param name="files">File paths for document pages on the new Unindexed Document.</param>
            <param name="props">Properties for the new Unindexed Document.</param>
            <param name="transitionBatch">Whether to transition the batch or not</param>
            <returns>The new <see cref="T:Hyland.Unity.UnindexedDocument" /></returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewUnindexedDocument(Hyland.Unity.PageData,Hyland.Unity.StoreNewUnindexedDocumentProperties)">
            <summary>
                Stores a New Unindexed Document. The UnindexedDocument will be added to the specified scan
                batch for further indexing, and will not be available from OnBase retrieval until indexing is
                complete.
            </summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
                <para />
                For batches in custom processes, this method can store unindexed documents only if the batch
                has not been transitioned yet.
            </remarks>
            <param name="pageData">Data for the new Unindexed Document.</param>
            <param name="props">Properties for the new Unindexed Document.</param>
            <returns>The new <see cref="T:Hyland.Unity.UnindexedDocument" /></returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewUnindexedDocument(Hyland.Unity.PageData,Hyland.Unity.StoreNewUnindexedDocumentProperties,System.Boolean)">
            <summary>
                Stores a New Unindexed Document. The UnindexedDocument will be added to the specified scan
                batch for further indexing, and will not be available from OnBase retrieval until indexing is
                complete.
            </summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
                <para />
                For batches in custom processes, this method can store unindexed documents only if the batch
                has not been transitioned yet.
            </remarks>
            <param name="pageData">Data for the new Unindexed Document.</param>
            <param name="props">Properties for the new Unindexed Document.</param>
            <param name="transitionBatch">Whether to transition the batch or not</param>
            <returns>The new <see cref="T:Hyland.Unity.UnindexedDocument" /></returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewUnindexedDocument(System.Collections.Generic.IEnumerable{Hyland.Unity.PageData},Hyland.Unity.StoreNewUnindexedDocumentProperties)">
            <summary>
                Stores a New Unindexed Document. The UnindexedDocument will be added to the specified scan
                batch for further indexing, and will not be available from OnBase retrieval until indexing is
                complete.
            </summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
                <para />
                For batches in custom processes, this method can store unindexed documents only if the batch
                has not been transitioned yet.
            </remarks>
            <param name="pageDatas">A collection of PageData for document pages on the new Unindexed Document.</param>
            <param name="props">Properties for the new Unindexed Document.</param>
            <returns>The New Document</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewUnindexedDocument(System.Collections.Generic.IEnumerable{Hyland.Unity.PageData},Hyland.Unity.StoreNewUnindexedDocumentProperties,System.Boolean)">
            <summary>
                Stores a New Unindexed Document. The UnindexedDocument will be added to the specified scan
                batch for further indexing, and will not be available from OnBase retrieval until indexing is
                complete.
            </summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
                <para />
                For batches in custom processes, this method can store unindexed documents only if the batch
                has not been transitioned yet.
            </remarks>
            <param name="pageDatas">A collection of PageData for document pages on the new Unindexed Document.</param>
            <param name="props">Properties for the new Unindexed Document.</param>
            <param name="transitionBatch">Whether to transition the batch or not</param>
            <returns>The New Document</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreNewUnityForm(Hyland.Unity.StoreNewUnityFormProperties)">
            <summary>Stores the new Unity Form.</summary>
            <remarks>
                If a security keyword is added to or modified on the document object that would cause the
                current user to lose access to the document object. Access will only be available on the
                client-side object. All subsequent service requests will have permission denied.
            </remarks>
            <param name="props">
                The <see cref="T:Hyland.Unity.StoreNewEFormProperties" /> object that represents the
                properties required to store the Unity Form.
            </param>
            <returns>The stored document.</returns>
        </member>
        <member name="M:Hyland.Unity.Storage.StoreRedaction(Hyland.Unity.StoreRedactionProperties)">
            <summary>Store Redaction</summary>
            <param name="props">Properties for the new Redaction</param>
            <returns>Redacted Document</returns>
        </member>
        <member name="T:Hyland.Unity.ReindexProperties">
            <summary>Properties Reindex Operation</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexProperties.DocumentDate">
            <summary>The Document Date.</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexProperties.ExpandKeysets">
            <summary>Determines if the document should expand any of its keysets when being reindexed.</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexProperties.Options">
            <summary>Options for Reindex Document Storage</summary>
        </member>
        <member name="T:Hyland.Unity.ReindexRenditionProperties">
            <summary>The properties which allow a particular Rendition to be reindexed.</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexRenditionProperties.FileType">
            <summary>The FileType to reindex to.</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexRenditionProperties.Options">
            <summary>Options for Reindex Document Storage</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexRenditionProperties.Rendition">
            <summary>The Rendition to reindex.</summary>
        </member>
        <member name="M:Hyland.Unity.ReindexRenditionProperties.#ctor(Hyland.Unity.Application,Hyland.Unity.Rendition,Hyland.Unity.FileType)">
            <summary>Internal, API-consumed .ctor.</summary>
            <param name="application">A connected Application object for performing work.</param>
            <param name="rendition">The target Rendition to reindex in OnBase.</param>
            <param name="fileType">The target FileType to change to.</param>
        </member>
        <member name="T:Hyland.Unity.StoreEFormRevisionProperties">
            <summary>Required Properties for Storing a new EForm Revision</summary>
        </member>
        <member name="P:Hyland.Unity.StoreEFormRevisionProperties.Comment">
            <summary>Comment for this Revision</summary>
        </member>
        <member name="P:Hyland.Unity.StoreEFormRevisionProperties.EForm">
            <summary>The <see cref="P:Hyland.Unity.StoreEFormRevisionProperties.EForm" /> for the new Revision</summary>
        </member>
        <member name="M:Hyland.Unity.StoreEFormRevisionProperties.AddField(System.String,System.String)">
            <summary>Add a Field</summary>
            <param name="field">Field</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.StoreEFormRevisionProperties.Clear">
            <summary>This removes all Added values and Clears all existing values.</summary>
        </member>
        <member name="M:Hyland.Unity.StoreEFormRevisionProperties.RemoveField(System.String)">
            <summary>Remove a field from the Fields collection.</summary>
            <param name="field">Field</param>
        </member>
        <member name="M:Hyland.Unity.StoreEFormRevisionProperties.UpdateField(System.String,System.String)">
            <summary>
                Updates a field, Adds a new one, or Removes an existing Field if the value is null or
                empty string.
            </summary>
            <param name="field">Field</param>
            <param name="value">Value</param>
        </member>
        <member name="T:Hyland.Unity.StoreNewDocumentProperties">
            <summary>Required Properties for Storing a New Document</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.AllowLogging">
            <summary>Allow Logging</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.AutoName">
            <summary>Allow Auto naming</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.TextEncoding">
            <summary> Set Text Encoding on Document </summary>
            <remarks>
                We support the following: Default, Arabic, CentralEuropean, ChineseSimplified,
                ChineseTraditional, Cyrillic, Greek, Hebrew, Japanese, Korean, Thai, Turkish, UnicodeUtf8,
                UnicodeUtf16, UnicodeUtf16BE, WesternEuropean. All other types are unsupported but can be set.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.Comment">
            <summary>Comment</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.DiskgroupID">
            <summary>Diskgroup to archive in</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.DocumentDate">
            <summary>Document Date</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.ExpandKeysets">
            <summary>Determines if the document should expand any of its keysets when it is stored.</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.Options">
            <summary>Options for New Document Storage</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewDocumentProperties.FileType">
            <summary>File Type</summary>
        </member>
        <member name="T:Hyland.Unity.StoreNewEFormProperties">
            <summary>The properties sealed class required to create a new EForm.</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.AllowLogging">
            <summary>Allow Logging</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.AutoName">
            <summary>Allow Auto naming</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.TextEncoding">
            <summary> Set Text Encoding on Document </summary>
            <remarks>
                We support the following: Default, Arabic, CentralEuropean, ChineseSimplified,
                ChineseTraditional, Cyrillic, Greek, Hebrew, Japanese, Korean, Thai, Turkish, UnicodeUtf8,
                UnicodeUtf16, UnicodeUtf16BE, WesternEuropean
            </remarks>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.Comment">
            <summary>Comment</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.DiskgroupID">
            <summary>Diskgroup to archive in</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.DocumentDate">
            <summary>Document Date</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.ExpandKeysets">
            <summary>Determines if the document should expand any of its keysets when it is stored.</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.Options">
            <summary>Options for New Document Storage</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewEFormProperties.FileType">
            <summary>File Type. The only valid filetypes are Electronic Form or Virtual Electronic Form</summary>
        </member>
        <member name="M:Hyland.Unity.StoreNewEFormProperties.AddField(System.String,System.String)">
            <summary>Adds the fields that will be used to create the Electronic Form</summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Hyland.Unity.StoreNewUnindexedDocumentProperties">
            <summary>Required Properties for Storing a New Unindexed Document</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnindexedDocumentProperties.Comment">
            <summary>Comment</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnindexedDocumentProperties.DocumentDate">
            <summary>Document Date</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnindexedDocumentProperties.ExpandKeysets">
            <summary>Determines if the document should expand its keysets when it is stored.</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnindexedDocumentProperties.FileType">
            <summary>File Type</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnindexedDocumentProperties.ScanBatch">
            <summary>Scan Batch</summary>
        </member>
        <member name="T:Hyland.Unity.StoreNewUnityFormProperties">
            <summary>The properties sealed class required to create a new Unity Form.</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnityFormProperties.AllowLogging">
            <summary>Allow Logging</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnityFormProperties.AutoName">
            <summary>Allow Auto naming</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnityFormProperties.Comment">
            <summary>Comment</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnityFormProperties.DiskgroupID">
            <summary>Diskgroup to archive in</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnityFormProperties.DocumentDate">
            <summary>Document Date</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnityFormProperties.ExpandKeysets">
            <summary>Determines if the document should expand any of its keysets when it is stored.</summary>
        </member>
        <member name="P:Hyland.Unity.StoreNewUnityFormProperties.Options">
            <summary>Options for New Document Storage</summary>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddChildNestedTableItem(Hyland.Unity.UnityForm.EditableNestedTableItem,Hyland.Unity.UnityForm.EditableNestedTableItem)">
            <summary>Adds the nested table item to the specified parent nested table item.</summary>
            <param name="parentItem">The parent table item where the child item should be added.</param>
            <param name="childItem">The new child table item to add.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddField(Hyland.Unity.UnityForm.Field)">
            <summary>Add a unity form field. Must be a ValueField.</summary>
            <param name="field">A unity form field.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddField(System.String,System.String)">
            <summary>Add a unity form field.</summary>
            <param name="fieldName">The name of the field to add.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddField(System.String,System.Decimal)">
            <summary>Add a unity form field.</summary>
            <param name="fieldName">The name of the field to add.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddField(System.String,System.Double)">
            <summary>Add a unity form field.</summary>
            <param name="fieldName">The name of the field to add.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddField(System.String,System.DateTime)">
            <summary>Add a unity form field.</summary>
            <param name="fieldName">The name of the field to add.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddField(System.String,System.Int64)">
            <summary>Add a unity form field.</summary>
            <param name="fieldName">The name of the field to add.</param>
            <param name="value">The value of the field.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddParentNestedTableItem(Hyland.Unity.UnityForm.EditableNestedTableItem)">
            <summary>Add the item to the parent nested table.</summary>
            <param name="item">The editable nested table item with the information to add.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddRepeaterItem(Hyland.Unity.UnityForm.EditableRepeaterItem)">
            <summary>Add a repeating item to a repeater on a Unity Form.</summary>
            <param name="editableRepeaterItem">Item to add to the repeater.</param>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.ValidateIsValueFieldDefinition(Hyland.Unity.UnityForm.FieldDefinition)">
            <summary>
                Currently this is the only type of field that can be modified. It's just a convenient way
                to get the typed field for now. May change when signatures are added.
            </summary>
        </member>
        <member name="M:Hyland.Unity.StoreNewUnityFormProperties.AddValidatedField(Hyland.Unity.UnityForm.Field)">
            <summary>Add a unity form field.</summary>
            <param name="field">A unity form field.</param>
        </member>
        <member name="T:Hyland.Unity.StoreRedactionProperties">
            <summary>Required Properties for Redacting a Document</summary>
        </member>
        <member name="P:Hyland.Unity.StoreRedactionProperties.ImageModifications">
            <summary>The Modifications for the Redaction Drawing.</summary>
        </member>
        <member name="P:Hyland.Unity.StoreRedactionProperties.UseColor">
            <summary>
                Indicates whether or not to use color when creating the redacted Document. Default: false.
                This will make the new Document greyscale.
            </summary>
        </member>
        <member name="P:Hyland.Unity.StoreRedactionProperties.ParentDocument">
            <summary>The Parent Document for the new Redacted Document.</summary>
        </member>
        <member name="T:Hyland.Unity.StoreRenditionProperties">
            <summary>Required Properties for Storing a New Rendition</summary>
        </member>
        <member name="P:Hyland.Unity.StoreRenditionProperties.Comment">
            <summary>Comment for this Revision</summary>
        </member>
        <member name="P:Hyland.Unity.StoreRenditionProperties.FileType">
            <summary>FileType for the New Rendition</summary>
        </member>
        <member name="P:Hyland.Unity.StoreRenditionProperties.Revision">
            <summary>Revision for this new Rendition</summary>
        </member>
        <member name="T:Hyland.Unity.StoreRevisionProperties">
            <summary>Required Properties for Storing a new Revision</summary>
        </member>
        <member name="P:Hyland.Unity.StoreRevisionProperties.Comment">
            <summary>Comment for this Revision</summary>
        </member>
        <member name="P:Hyland.Unity.StoreRevisionProperties.Document">
            <summary>Document for this new Revision</summary>
        </member>
        <member name="P:Hyland.Unity.StoreRevisionProperties.FileType">
            <summary>FileType for this Revision</summary>
        </member>
        <member name="T:Hyland.Unity.NotePosition">
            <summary>Structure for Note Position (Note: Negative Position values will be set to zero)</summary>
        </member>
        <member name="P:Hyland.Unity.NotePosition.X">
            <summary>X position</summary>
        </member>
        <member name="P:Hyland.Unity.NotePosition.Y">
            <summary>Y position</summary>
        </member>
        <member name="M:Hyland.Unity.NotePosition.Equals(Hyland.Unity.NotePosition)">
            <summary>Determines Equality for NotePosition</summary>
            <param name="other">The other NotePosition to compare</param>
            <returns>Returns <c>true</c> if the two NotePosition are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.NoteSize">
            <summary>Structure for Note Size</summary>
        </member>
        <member name="P:Hyland.Unity.NoteSize.Height">
            <summary>Height</summary>
        </member>
        <member name="P:Hyland.Unity.NoteSize.Width">
            <summary>Width</summary>
        </member>
        <member name="M:Hyland.Unity.NoteSize.Equals(Hyland.Unity.NoteSize)">
            <summary>Determines Equality for NoteSize</summary>
            <param name="other">The other NoteSize to compare.</param>
            <returns>Returns <c>true</c> if the two NotePosition are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.TextSearchItem">
            <summary>The text search item.</summary>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.Length">
            <summary>Length of search text</summary>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.Line">
            <summary>The Line on the Page where the match is located.</summary>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.LineIndex">
            <summary>The starting character Index on the matched Line.</summary>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.LineText">
            <summary>The entire text of the matched Line.</summary>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.Page">
            <summary>The Page of the Search Item.</summary>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.SizeX">
            <summary>Gets the Width.</summary>
            <value>The size X.</value>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.SizeY">
            <summary>The Height.</summary>
            <value>The size Y.</value>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.XPos">
            <summary>Gets the X pos.</summary>
            <value>The X pos.</value>
        </member>
        <member name="P:Hyland.Unity.TextSearchItem.YPos">
            <summary>Gets the Y pos.</summary>
            <value>The Y pos.</value>
        </member>
        <member name="T:Hyland.Unity.TextSearchResults">
            <summary>A collection of <see cref="T:Hyland.Unity.TextSearchItem" />
            </summary>
        </member>
        <member name="T:Hyland.Unity.User">
            <summary>Class representing an OnBase user</summary>
        </member>
        <member name="P:Hyland.Unity.User.DisplayName">
            <summary>Gets the user's display name.</summary>
            <value>The user's display name.</value>
        </member>
        <member name="P:Hyland.Unity.User.EmailAddress">
            <summary>Gets the email address of the user.</summary>
            <value>The email address of the user.</value>
        </member>
        <member name="P:Hyland.Unity.User.Institution">
            <summary>
                Provides information about the user's institution if they belong to one. Otherwise null
                will be returned. Note: This is only available on the currently logged in user as exposed by
                <see cref="P:Hyland.Unity.Application.CurrentUser" />.
            </summary>
        </member>
        <member name="P:Hyland.Unity.User.NamedClientLicense">
            <summary>Is this user assigned a named client license?</summary>
        </member>
        <member name="P:Hyland.Unity.User.NamedWorkflowLicense">
            <summary>Is this user assigned a named Workflow license?</summary>
        </member>
        <member name="P:Hyland.Unity.User.NamedWorkViewLicense">
            <summary>Is this user assigned a named WorkView license?</summary>
        </member>
        <member name="P:Hyland.Unity.User.RealName">
            <summary>Gets the real name of the user.</summary>
            <value>The real name of the user.</value>
        </member>
        <member name="P:Hyland.Unity.User.ID">
            <summary>Gets the user ID.</summary>
            <value>The user ID.</value>
        </member>
        <member name="P:Hyland.Unity.User.Name">
            <summary>Gets the user name.</summary>
            <value>The user name.</value>
        </member>
        <member name="M:Hyland.Unity.User.AddToRoles(System.Collections.Generic.IEnumerable{Hyland.Unity.Role})">
            <summary>Add user to roles</summary>
            <param name="roles">The roles that the user belongs to</param>
        </member>
        <member name="M:Hyland.Unity.User.ChangePassword(System.String,System.String)">
            <summary>
                Change the Current User's Password. This method is only valid on the currently logged in
                (The User used to establish the Unity Application/Session) User.
            </summary>
            <param name="oldPassword">The old (current) password of this User</param>
            <param name="newPassword">The new password to assign to this User</param>
            <exception cref="T:System.InvalidOperationException">
                When this user is not the currently logged in (The User
                used to establish the Unity Application/Session) User.
            </exception>
        </member>
        <member name="M:Hyland.Unity.User.GetLastLoginTime">
            <summary>Retrieves the last login time for this user.</summary>
            <returns>
                The DateTime object representing the last time this user logged on. If the user had never
                previously logged in, it returns null.
            </returns>
        </member>
        <member name="M:Hyland.Unity.User.GetPrimaryUserGroup">
            <summary>Gets this User's Primary UserGroup</summary>
            <returns>UserGroup object corresponding to the </returns>
        </member>
        <member name="M:Hyland.Unity.User.GetRoles">
            <summary>A list of Roles that the user belongs to.</summary>
            <returns>The list of roles that the user belongs to.</returns>
        </member>
        <member name="M:Hyland.Unity.User.GetSecurityKeywords">
            <summary>
                Returns all of the SecurityKeywords that govern this user.  The collection will include
                SecurityKeywords set specifically to this User and also SecurityKeywords that are assigned to
                any groups that this User is a member of. This method is only valid on the currently logged in
                (The User used to establish the Unity Application/Session) User.
            </summary>
            <returns>
                All of the SecurityKeywords that govern this user.  The collection will include
                SecurityKeywords set specifically to this User and also SecurityKeywords that are assigned to
                any groups that this User is a member of
            </returns>
            <exception cref="T:System.InvalidOperationException">
                When this user is not the currently logged in (The User
                used to establish the Unity Application/Session) User.
            </exception>
        </member>
        <member name="M:Hyland.Unity.User.GetUserGroups">
            <summary>Gets the user groups that this user belongs to.</summary>
            <returns>A UserGroupList of the groups that this user belongs to.</returns>
        </member>
        <member name="M:Hyland.Unity.User.GetUserGroups(System.Boolean)">
            <summary>Gets the user groups that this user belongs to.</summary>
            <param name="useCachedInformation">
                When true, the user will be retrieved from a cached collection.
                When false, the user will be retrieved directly from the database.
            </param>
            <returns>A UserGroupList of the groups that this user belongs to.</returns>
        </member>
        <member name="M:Hyland.Unity.User.HasPasswordExpired">
            <summary>
                Returns <c>true</c> if the password has expired for the user, <c>false</c> otherwise. This
                is property is only valid on the currently logged in User.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                When this user is not the currently logged in (The User
                used to establish the Unity Application/Session) User.
            </exception>
            <returns>Returns <c>true</c> if the password has expired for the user, <c>false</c> otherwise. </returns>
        </member>
        <member name="M:Hyland.Unity.User.IsLocked">
            <summary>Determines whether this user account is locked.</summary>
            <returns>True if this user is locked, false otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.UserList">
            <summary>A list of Users</summary>
        </member>
        <member name="T:Hyland.Unity.UserGroup">
            <summary>A sealed class representing a OnBase UserGroup</summary>
        </member>
        <member name="P:Hyland.Unity.UserGroup.ID">
            <summary>Gets the usergroup ID.</summary>
            <value>The usergroup ID.</value>
        </member>
        <member name="P:Hyland.Unity.UserGroup.Name">
            <summary>Gets the usergroup name.</summary>
            <value>The usergroup name.</value>
        </member>
        <member name="T:Hyland.Unity.UserGroupList">
            <summary>A list of User Groups</summary>
        </member>
        <member name="T:Hyland.Unity.Diagnostics">
            <summary>Diagnostics Operations of Unity</summary>
        </member>
        <member name="T:Hyland.Unity.Diagnostics.DiagnosticsLevel">
            <summary>The Levels of Diagnostics Logging</summary>
        </member>
        <member name="F:Hyland.Unity.Diagnostics.DiagnosticsLevel.Verbose">
            <summary>Verbose Level of Logging</summary>
        </member>
        <member name="F:Hyland.Unity.Diagnostics.DiagnosticsLevel.Info">
            <summary>Info Level of Logging</summary>
        </member>
        <member name="F:Hyland.Unity.Diagnostics.DiagnosticsLevel.Warning">
            <summary>Warning Level of Logging</summary>
        </member>
        <member name="F:Hyland.Unity.Diagnostics.DiagnosticsLevel.Error">
            <summary>Error (Default) Level of Logging</summary>
        </member>
        <member name="P:Hyland.Unity.Diagnostics.Enabled">
            <summary>Diagnostics Logging Enabled Setting</summary>
        </member>
        <member name="P:Hyland.Unity.Diagnostics.Level">
            <summary>The current level of Diagnostics Logging</summary>
        </member>
        <member name="P:Hyland.Unity.Diagnostics.Datasource">
            <summary>The current datasource.</summary>
        </member>
        <member name="P:Hyland.Unity.Diagnostics.SessionID">
            <summary>The current session ID. Maps to the SessionGUID column in diagnostics.</summary>
        </member>
        <member name="P:Hyland.Unity.Diagnostics.UserName">
            <summary>The current user's name.</summary>
        </member>
        <member name="M:Hyland.Unity.Diagnostics.Write(System.Exception)">
            <summary>Writes the given exception to the Error tab in the Diagnostics console</summary>
            <param name="exception">Exception to write out.</param>
        </member>
        <member name="M:Hyland.Unity.Diagnostics.Write(System.String)">
            <summary>Writes a single message to the Unity diagnostics tab.</summary>
            <param name="message">Message to write out.</param>
        </member>
        <member name="M:Hyland.Unity.Diagnostics.Write(System.String,System.Object)">
            <summary>Writes a single formatted message to the Unity diagnostics tab.</summary>
            <param name="format">Format of the message to write out.</param>
            <param name="arg">An object to format.</param>
        </member>
        <member name="M:Hyland.Unity.Diagnostics.Write(System.String,System.Object[])">
            <summary>Writes a single formatted message to the Unity diagnostics tab.</summary>
            <param name="format">Format of the message to write out.</param>
            <param name="args">The objects to format.</param>
        </member>
        <member name="M:Hyland.Unity.Diagnostics.WriteIf(Hyland.Unity.Diagnostics.DiagnosticsLevel,System.Exception)">
            <summary>
                Writes the given exception to the Error tab in the Diagnostics console if the given level
                is greater than or equal to the current diagnostics level.
            </summary>
            <param name="level">DiagnosticsLevel minimum to use when writing.</param>
            <param name="exception">Exception to write out.</param>
        </member>
        <member name="M:Hyland.Unity.Diagnostics.WriteIf(Hyland.Unity.Diagnostics.DiagnosticsLevel,System.String)">
            <summary>
                Writes a single message to the Unity diagnostics tab  if the given level is greater than
                or equal to the current diagnostics level.
            </summary>
            <param name="level">DiagnosticsLevel minimum to use when writing.</param>
            <param name="message">Message to write out.</param>
        </member>
        <member name="M:Hyland.Unity.Diagnostics.WriteIf(Hyland.Unity.Diagnostics.DiagnosticsLevel,System.String,System.Object)">
            <summary>
                Writes a single formatted message to the Unity diagnostics tab if the given level is
                greater than or equal to the current diagnostics level.
            </summary>
            <param name="level">DiagnosticsLevel minimum to use when writing.</param>
            <param name="format">Format of the message to write out.</param>
            <param name="arg">An object to format.</param>
        </member>
        <member name="M:Hyland.Unity.Diagnostics.WriteIf(Hyland.Unity.Diagnostics.DiagnosticsLevel,System.String,System.Object[])">
            <summary>
                Writes a single formatted message to the Unity diagnostics tab if the given level is
                greater than or equal to the current diagnostics level.
            </summary>
            <param name="level">DiagnosticsLevel minimum to use when writing.</param>
            <param name="format">Format of the message to write out.</param>
            <param name="args">The objects to format.</param>
        </member>
        <member name="T:Hyland.Unity.DigitalSignatures.DigitalSignatures">
            <summary>The main class for Digital Signatures related functionality.</summary>
        </member>
        <member name="M:Hyland.Unity.DigitalSignatures.DigitalSignatures.Sign(Hyland.Unity.Rendition)">
            <summary>
                Digitally sign a Document's specified Rendition. The default certificate of the
                Application Server is used to produce the signature.
            </summary>
            <param name="rendition">The Document Rendition to digitally sign.</param>
        </member>
        <member name="M:Hyland.Unity.DigitalSignatures.DigitalSignatures.VerifySignature(Hyland.Unity.Rendition)">
            <summary>Verifies the digital signature of a Document's specified Rendition.</summary>
            <param name="rendition">The Document Rendition to verify.</param>
            <returns>The validity of the digital signature on the Rendition.</returns>
        </member>
        <member name="T:Hyland.Unity.DigitalSignatures.SignatureValidity">
            <summary>The validity of a digital signature.</summary>
        </member>
        <member name="F:Hyland.Unity.DigitalSignatures.SignatureValidity.NoSignature">
            <summary>There is no signature to validate.</summary>
        </member>
        <member name="F:Hyland.Unity.DigitalSignatures.SignatureValidity.Invalid">
            <summary>The signature is invalid.</summary>
        </member>
        <member name="F:Hyland.Unity.DigitalSignatures.SignatureValidity.Valid">
            <summary>The signature is valid.</summary>
        </member>
        <member name="T:Hyland.Unity.DisconnectedCoreContext">
            <summary>
            Application.CoreContext should be set to DisconnectedCoreContext when Application is not connected to Application Server. 
            It returns null for Authentication and ServiceClient and throws exceptions when Application is trying to make service calls.
            </summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.Category">
            <summary>The library that holds templates</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.Category.Templates">
            <summary>A list of templates within this category</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.Category.ID">
            <summary>Id of the category</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.Category.Name">
            <summary>Name of the category</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.Category.GetTemplates(Hyland.Unity.DocumentComposition.TemplateType)">
            <summary>Retrieves a list of templates within this category</summary>
            <param name="templateType">Type of the templates to receive</param>
            <returns>A list of templates</returns>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.CategoryList">
            <summary>Container to hold a list of categories</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.ComposeDocumentRequest">
            <summary>ComposeDocumentRequest object to make a batch composition request</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.CreateRevisionIfPossible">
            <summary>If set to true, and if it is possible to create a revision, a revision will be made.</summary>
            <remarks>
                If the user doesn't have permissions, the document type isn't configured to allow
                revisions, or if there is no matching document then a new document will be created. If multiple
                documents are found, then no document will be archived, and an error message will be attached
                to the CompositionResponse object.  If there are keywords on the document other than those used
                to identify it, they will be updated with the keyword values mapped in from Document
                Composition.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.Document">
            <summary>Source Document to be used during composition If Document is set, Object cannot be set.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.DocumentType">
            <summary>
                Document type to store the composed document. If set, InheritKeywords will default to
                false unless also set.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.InheritKeywords">
            <summary>
                Whether or not the keywords should be inherited from the source document. DocumentType
                property must be set as well.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.Object">
            <summary>Source Object to be used during composition If Object is set, Document cannot be set.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.ParentDocument">
            <summary>If set, the composed document will be created as a revision of ParentDocument.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.Synchronous">
            <summary>Synchronous indicates the resulting document of batch composition to be returned</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.Xml">
            <summary>Xml to be used during composition</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentRequest.Template">
            <summary>The template to use</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.ComposeDocumentResponse">
            <summary>ComposeDocumentResponse contains result of the batch composition request</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentResponse.Document">
            <summary>Composed Document if the batch composition request was synchronous</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.ComposeDocumentResponse.ErrorInformation">
            <summary>
                This property will contain information if an error occurs while processing a
                DocumentCompositionRequest
            </summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.CompositionRequestStatus">
            <summary>CompositionRequestStatus holds the properties for a failed batch composition request</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.Document">
            <summary>Document used for the batch request</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.DocumentCompositionError">
            <summary>The error object may contain additional information for some types of errors.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.DocumentTemplate">
            <summary>DocumentTemplate used for the batch request</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.DocumentType">
            <summary>Storage Document Type for composed document</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.ErrorCount">
            <summary>Number of retries that has already happened</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.ErrorMessage">
            <summary>
                A description of the error that has occurred.  May duplicate the ComposeStatusRequest
                DocumentCompositionError.ErrorMessage property.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.Object">
            <summary>Workview Object used for the batch request</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.RequestTime">
            <summary>Request time for batch</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.Xml">
            <summary>Xml that was passed in</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.CompositionRequestStatus.ID">
            <summary>Unique identifier for the batch operation</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.CompositionRequestStatusList">
            <summary>CompositionRequestStatusList</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.CompositionRequestStatusList.#ctor">
            <summary>Internal default constructor</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.DocumentComposition">
            <summary>Document Composition object</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocumentComposition.Categories">
            <summary>All categories in Document Composition</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.DocumentComposition.ComposeDocument(Hyland.Unity.DocumentComposition.ComposeDocumentRequest)">
            <summary>Executes a batch composition request</summary>
            <param name="composeDocumentRequest">ComposeDocumentRequest object</param>
            <returns>Result of the batch composition request</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.DocumentComposition.CreateComposeDocumentRequest(Hyland.Unity.DocumentComposition.DocumentTemplate)">
            <summary>Creates a Compose Document Request for Batch Composition</summary>
            <param name="template">The template to use</param>
            <returns>ComposeDocumentRequest object</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.DocumentComposition.GetDocumentTemplateByID(System.Int64)">
            <summary>Returns DocumentTemplate from id supplied</summary>
            <param name="documentTemplateID">The template ID</param>
            <returns>DocumentTemplate object if user has rights to create document using template</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.DocumentComposition.GetDocumentTemplateByName(System.String)">
            <summary>Returns DocumentTemplate from id supplied</summary>
            <param name="documentTemplateName">The template name</param>
            <returns>DocumentTemplate object if user has rights to create document using template</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.DocumentComposition.GetFailedCompositionRequestStatuses(System.Int64)">
            <summary>
                Returns a list of failed composition requests that is greater than or equal to the
                errorCount threshold
            </summary>
            <param name="minimumFailedCount">
                Minimum value of errors for a batch to get back. Value must be 1
                or above
            </param>
            <returns>List of failed composition requests</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.DocumentComposition.Remove(System.Collections.Generic.IEnumerable{Hyland.Unity.DocumentComposition.CompositionRequestStatus})">
            <summary>Removes failed batch composition requests passed in</summary>
            <param name="failedRequests">List of failed composition requests</param>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.DocumentComposition.Retry(System.Collections.Generic.IEnumerable{Hyland.Unity.DocumentComposition.CompositionRequestStatus})">
            <summary>Retries executing the batch composition requests passed in</summary>
            <param name="failedRequests">List of failed composition requests</param>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.DocumentCompositionError">
            <summary>
                Used to contain basic information about an error that has occurred during document
                composition.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocumentCompositionError.ErrorMessage">
            <summary>
                A description of the error that has occurred.  May duplicate the CompositionRequestStatus
                ErrorMessage property.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocumentCompositionError.ErrorType">
            <summary>A value indicating the type of error.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocumentCompositionError.MatchingDocuments">
            <summary>If the error pertains to a list of documents, they will be referenced by this list.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.DocumentTemplate">
            <summary>Template for Document Composition</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocumentTemplate.ID">
            <summary>Gets the template ID</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocumentTemplate.Name">
            <summary>Gets the template name</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.DocumentTemplateList">
            <summary>Template List for Document Composition</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.DocumentCompositionErrorType">
            <summary>Identifies the type of error that has occurred.</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentComposition.DocumentCompositionErrorType.Other">
            <summary>An error has occurred.</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentComposition.DocumentCompositionErrorType.MultipleParentDocumentsForRevisionFound">
            <summary>A revision was requested, but multiple matching documents were found.</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentComposition.DocumentCompositionErrorType.UnableToCreateRevision">
            <summary>Document Composition attempted to create a revision, but received an error.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.TemplateType">
            <summary>Template type of Document Composition</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentComposition.TemplateType.WordTemplate">
            <summary>Legacy Document Composition</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentComposition.TemplateType.OpenXMLTemplate">
            <summary>OpenXML Document Composition</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.Placeholder">
            <summary>Placeholder for Document Composition.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.Placeholder.Value">
            <summary>Gets the Placeholder's value.</summary>
            <remarks>
                <para>
                    Initial calls to this property make a request to the Application Server in order to
                    retrieve the Placeholder's value. The result is cached.
                </para>
                <para>
                    Retrieving a Placeholder's value marks the Placeholder to be placed on the document, and
                    may recursively load other Placeholders. It is not recommended to call this property
                    unnecessarily.
                </para>
            </remarks>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.Placeholder.ID">
            <summary>Gets the Placeholder's ID.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.Placeholder.Name">
            <summary>Gets the Placeholder's name.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.Placeholder.Guid">
            <summary>Gets the Guid associated with this Document Composition event.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.PlaceholderList">
            <summary>Placeholder list for Document Composition.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.DocCompTemplateEventArgs">
            <summary>Arguments available in a DocComp - Template EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocCompTemplateEventArgs.Document">
            <summary>The Source Document of the DocumentTemplate.</summary>
            <remarks>This property will return null if there is no Source Document.</remarks>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocCompTemplateEventArgs.DocumentTemplate">
            <summary>The DocumentTemplate which this script is running on.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocCompTemplateEventArgs.Placeholders">
            <summary>The Placeholders on the DocumentTemplate.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocCompTemplateEventArgs.Results">
            <summary>The results object which allows modifications to be made to Placeholder values.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocCompTemplateEventArgs.WorkViewObject">
            <summary>The Source WorkView Object of the DocumentTemplate.</summary>
            <remarks>This property will return null if there is no Source WorkView Object.</remarks>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocCompTemplateEventArgs.Xml">
            <summary>The Source XML of the DocumentTemplate.</summary>
            <remarks>This property will return null if there is no Source XML.</remarks>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.DocCompTemplateEventResults">
            <summary>EventResults of a DocComp - Template EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentComposition.DocCompTemplateEventResults.UpdatedPlaceholders">
            <summary>The Placeholders whose values were updated by the script.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.DocCompTemplateEventResults.SetPlaceholderValue(Hyland.Unity.DocumentComposition.Placeholder,System.String)">
            <summary>Sets the value of a Placeholder on the document.</summary>
            <param name="placeholder">The Placeholder to update.</param>
            <param name="value">The value to which the Placeholder is set.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentComposition.IDocCompTemplateEventScript">
            <summary>DocComp - Template Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentComposition.IDocCompTemplateEventScript.OnComposeDocument(Hyland.Unity.Application,Hyland.Unity.DocumentComposition.DocCompTemplateEventArgs)">
            <summary>Method executed when a document is created using Document Composition.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocCompTemplateEventArgs object which contains parameters for the current
                interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.DomainAuthenticationProperties">
            <summary>The properties used to authenticate with OnBase using Domain Authentication</summary>
        </member>
        <member name="P:Hyland.Unity.DomainAuthenticationProperties.Domain">
            <summary>The Domain to be used for connect.</summary>
        </member>
        <member name="P:Hyland.Unity.DomainAuthenticationProperties.Password">
            <summary>The password to be used for connect.</summary>
        </member>
        <member name="P:Hyland.Unity.DomainAuthenticationProperties.Username">
            <summary>The username to be used for connect.</summary>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItem">
            <summary>EIS Message Item</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItem.ID">
            <summary>The ID of the EIS Message Item.</summary>
            <value>The eismessageitem ID.</value>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItem.Name">
            <summary>The Name of the EIS Message Item.</summary>
            <value>The eismessageitem Name.</value>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItem.GetMessageData">
            <summary>Returns the data associated with the message item as XmlDocument.</summary>
            <returns>XmlDocument object holding the message data.</returns>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerEnrichmentScriptEventArgs">
            <summary>Arguments available in a EISMessageBroker enrichment script</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerEnrichmentScriptEventArgs.InputMessageDocument">
            <summary>Returns the input messagepayload wrapped as a XmlDocument for the script.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerEnrichmentScriptEventArgs.ScriptResult">
            <summary>Returns the ScriptResult object with data associated to the executed script.</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerEnrichmentScriptEventArgs.#ctor(System.Xml.XmlDocument)">
            <summary>Constructor</summary>
            <param name="msgXmlDocument">input message payload document</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerOnMessageFaultScriptEventArgs">
            <summary>Arguments available in a EISMessageBroker OnMessageFault script</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerOnMessageFaultScriptEventArgs.MessageFault">
            <summary>MessageFault generated for the message instance.</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerOnMessageFaultScriptEventArgs.#ctor(Hyland.Unity.EnterpriseIntegrationServer.MessageFault)">
            <summary>Constructor</summary>
            <param name="fault">Fault generated for the message instance</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationEventArgs">
            <summary>Arguments available in a Message Item normalization script.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationEventArgs.InputMessagePayload">
            <summary>
                <value>Raw message payload received by the OnRamp.</value>
            </summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationEventArgs.Results">
            <summary>
                <value>The results object to contain normalized messages.</value>
            </summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationEventArgs.ScriptResult">
            <summary>
                <value>ScriptResult used to indicate Success or Failure</value>
            </summary>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationEventResults">
            <summary>EventResults of a message item normalization script.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationEventResults.ErrorMessage">
            <summary>Used to report errors on normalization failure.</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationEventResults.AddNormalizedMessage(System.Xml.XmlDocument)">
            <summary>Adds an XmlDocument as an output message</summary>
            <param name="document">Normalized message document</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationScriptResult">
            <summary>The result of a message item normalization script.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationScriptResult.Failure">
            <summary>An error occurred during message normalization.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationScriptResult.Success">
            <summary>Message was successfully normalized.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationScriptResult.Uninitialized">
            <summary>Internal only status used as the default value.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationScriptResult.ExecutionStatus">
            <summary>The selected execution status.</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationScriptResult.#ctor(Hyland.Unity.EnterpriseIntegrationServer.MessageItemNormalizationStatus)">
            <summary>Constructor</summary>
            <param name="status">Result of the event</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs">
            <summary>Arguments available in a EISMessageBroker response handler script</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs.PersistentPropertyBag">
            <summary>Gets the property bag that contains properties scoped to a life cycle and work item</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs.PropertyBag">
            <summary>
                Gets the property bag that retains its properties for the duration of the workflow
                operation
            </summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs.Queue">
            <summary>Gets the current queue.  Can be null if the script is being executed under a system task</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs.ResponsePayload">
            <summary>Gets the Response payload of the messsage instance.</summary>
            <value>Response Payload</value>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs.ScriptResult">
            <summary>This value controls whether the rule executes its OnTrue or OnFalse task list</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs.SessionPropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of the session</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs.#ctor(Hyland.Unity.Document,Hyland.Unity.Workflow.Queue,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,System.Xml.XmlDocument)">
            <summary>Initializes this object</summary>
            <param name="document">Current Document being acted upon.</param>
            <param name="queue">Can be null if executing within a system task</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
            <param name="scopedPropertyBag">
                The property bag that will retain its properties for the duration
                of the workflow operation
            </param>
            <param name="persistentPropertyBag">
                The property bag that contains properties scoped to a life
                cycle and work item
            </param>
            <param name="responsePayloadDocument">response payload of the message instance</param>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs.#ctor(Hyland.Unity.WorkView.Object,Hyland.Unity.Workflow.Queue,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,System.Xml.XmlDocument)">
            <summary>Initializes this object</summary>
            <param name="wvObject">Current workview object being acted upon.</param>
            <param name="queue">Can be null if executing within a system task</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
            <param name="scopedPropertyBag">
                The property bag that will retain its properties for the duration
                of the workflow operation
            </param>
            <param name="persistentPropertyBag">
                The property bag that contains properties scoped to a life
                cycle and work item
            </param>
            <param name="responsePayloadDocument">response payload of the message instance</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.EISScriptEventArgs">
            <summary>Autofill Update args</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISScriptEventArgs.InputMessageDocument">
            <summary>Returns the input messagepayload wrapped as a XmlDocument for the script.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.EISScriptEventArgs.ScriptResult">
            <summary>Returns the ScriptResult object with data associated to the executed script.</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.EISScriptEventArgs.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="messagepayload">input message payload</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.ObjectCategory">
            <summary>Identifies the message object category</summary>
        </member>
        <member name="F:Hyland.Unity.EnterpriseIntegrationServer.ObjectCategory.Unknown">
            <summary>Unknown Category</summary>
        </member>
        <member name="F:Hyland.Unity.EnterpriseIntegrationServer.ObjectCategory.WorkView">
            <summary>WorkView category</summary>
        </member>
        <member name="F:Hyland.Unity.EnterpriseIntegrationServer.ObjectCategory.Document">
            <summary>Document category</summary>
        </member>
        <member name="F:Hyland.Unity.EnterpriseIntegrationServer.ObjectCategory.EForm">
            <summary>EForm category</summary>
        </member>
        <member name="F:Hyland.Unity.EnterpriseIntegrationServer.ObjectCategory.UnityForm">
            <summary>UnityForm category</summary>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.IEISMessageBrokerOnMessageFaultScript">
            <summary>MessageBroker - On Message Fault Handler</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.IEISMessageBrokerOnMessageFaultScript.OnEISMessageFault(Hyland.Unity.Application,Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerOnMessageFaultScriptEventArgs)">
            <summary>
                Method executed when a message fault occurs and an onerror script is set on a message
                project.
            </summary>
            <param name="unityApplication">The connected Unity <see cref="T:Hyland.Unity.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.IEISMessageBrokerResponseHandlerScript">
            <summary>MessageBroker - Message Response handler</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.IEISMessageBrokerResponseHandlerScript.HandleMessageResponse(Hyland.Unity.Application,Hyland.Unity.EnterpriseIntegrationServer.EISMessageMessageBrokerResponseHandlerArgs)">
            <summary>
                Method executed when a response message handler script is set on the workflow rule 'Check
                published message status'.
            </summary>
            <param name="unityApplication">The connected Unity <see cref="T:Hyland.Unity.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.IEISMessageBrokerEnrichmentScript">
            <summary>MessageBroker - Message Enrichment handler</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.IEISMessageBrokerEnrichmentScript.OnEISMessageEnrichment(Hyland.Unity.Application,Hyland.Unity.EnterpriseIntegrationServer.EISMessageBrokerEnrichmentScriptEventArgs)">
            <summary>
                Method executed when a pre transformation or a post transformation enrichment script is
                set on a message type.
            </summary>
            <param name="unityApplication">The connected Unity <see cref="T:Hyland.Unity.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.IEISMessageItemNormalizationScript">
            <summary>Represents a script used to normalize incoming message items.</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.IEISMessageItemNormalizationScript.OnEISMessageItemNormalization(Hyland.Unity.Application,Hyland.Unity.EnterpriseIntegrationServer.EISMessageItemNormalizationEventArgs)">
            <summary>Method executed when a message item is submitted</summary>
            <param name="unityApplication">The connected Unity <see cref="T:Hyland.Unity.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.IEISScript">
            <summary>Represents a custom script which is executed using Enterprise Integration Server</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.IEISScript.OnEISScriptExecute(Hyland.Unity.Application,Hyland.Unity.EnterpriseIntegrationServer.EISScriptEventArgs)">
            <summary>Method executed when custom script written for EIS is called.</summary>
            <param name="unityApplication">The connected Unity Application. <see cref="T:Hyland.Unity.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.EnterpriseIntegrationServer.MessageFault">
            <summary>Represents information about the fault that occured on a message instance.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.MessageFault.ID">
            <summary>Fault ID</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.MessageFault.LogDate">
            <summary>Fault generation timestamp</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.MessageFault.Message">
            <summary>Error message of the fault.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.MessageFault.MessageCategory">
            <summary>Object category of the message.</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.MessageFault.MessageInstanceID">
            <summary>ID of message instance on which fault is generated</summary>
        </member>
        <member name="P:Hyland.Unity.EnterpriseIntegrationServer.MessageFault.MessageObjectID">
            <summary>ID of the underlying object of the message</summary>
        </member>
        <member name="M:Hyland.Unity.EnterpriseIntegrationServer.MessageFault.#ctor(System.Int64,System.DateTime,System.String,System.Int64,System.Int64,Hyland.Unity.EnterpriseIntegrationServer.ObjectCategory)">
            <summary>MessageFault constructor</summary>
            <param name="id">fault id</param>
            <param name="faultDate">fault logdate</param>
            <param name="errorMessage">error message of the fault</param>
            <param name="messageInstanceId">id of the message instance</param>
            <param name="messageObjectId">id of the underlying object of the message instance</param>
            <param name="category">category of the message</param>
        </member>
        <member name="F:Hyland.Unity.ApplicationEnabler.ApplicationEnablerInternalExecutionStatus.Completed">
            <summary>The Scrape event is completed.</summary>
        </member>
        <member name="F:Hyland.Unity.ApplicationEnabler.ApplicationEnablerInternalExecutionStatus.Continue">
            <summary>The Script Continues execution as expected</summary>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeEventArgs">
            <summary>The Arguments to give context to the <see cref="T:Hyland.Unity.ApplicationEnabler.IApplicationEnablerScrapeEventScript" />.</summary>
        </member>
        <member name="P:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeEventArgs.Results">
            <summary>EventResults of an Application Enabler Scrape Event Script.</summary>
        </member>
        <member name="P:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeEventArgs.ScrapeEvent">
            <summary>Object containing the information that has been scraped</summary>
        </member>
        <member name="P:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeEventArgs.ScriptResults">
            <summary>Enum representing whether the script is completed or whether it should be continued.</summary>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeEventResults">
            <summary>EventResults of an Application Enabler Scrape Event Script.</summary>
        </member>
        <member name="P:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeEventResults.ScrapeEvent">
            <summary>The Scrape Event.</summary>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeScriptResults">
            <summary>ScriptResults of an Application Enabler Scrape Event Script.</summary>
        </member>
        <member name="P:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeScriptResults.Completed">
            <summary>The Scrape event is canceled.</summary>
        </member>
        <member name="P:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeScriptResults.Continue">
            <summary>The Script Continues execution as expected</summary>
        </member>
        <member name="P:Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeScriptResults.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.IApplicationEnablerScrapeEventScript">
            <summary>Script that executes in the Application Enabler Scrape Event Script.</summary>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.IApplicationEnablerScrapeEventScript.OnExecute(Hyland.Unity.Application,Hyland.Unity.ApplicationEnabler.ApplicationEnablerScrapeEventArgs)">
            <summary>Method that will be invoked when a value is scraped from Application Enabler.</summary>
            <param name="app">A connected Unity API <see cref="T:Hyland.Unity.Application" />.</param>
            <param name="args">Arguments to give context to the script.</param>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.DocumentHandleTransformer">
            <summary>A class that gets and sets the particular keyword values of scrape events.</summary>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.DocumentHandleTransformer.GetDocumentHandleFrom">
            <summary>Gets the value of the Document Handle From keyword</summary>
            <returns>The value of the keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.DocumentHandleTransformer.GetDocumentHandleTo">
            <summary>Gets the value of the Document Handle To keyword</summary>
            <returns>The value of the keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.DocumentHandleTransformer.SetDocumentHandleFrom(System.Int64)">
            <summary>Sets the value of the Document Handle - From keyword</summary>
            <param name="documentHandle">The value that the handle will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.DocumentHandleTransformer.SetDocumentHandleTo(System.Int64)">
            <summary>Sets the value of the Document Handle - To keyword</summary>
            <param name="documentHandle">The value that the handle will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.KeywordTransformer">
            <summary>A class that gets and sets the keyword values of scrape events.</summary>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValue(System.String,System.Int32)">
            <summary>
                Finds the value of a keyword with a given keyword type name in a particular instance
                position.
            </summary>
            <param name="keywordTypeName">Name of the keyword type.</param>
            <param name="instancePosition">Instance position of the keyword.</param>
            <returns>The value of the keyword or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValue(System.String)">
            <summary>Finds the value of a keyword given the name of the keyword type.</summary>
            <param name="keywordTypeName">Name of the keyword type.</param>
            <returns>The value of the keyword or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValue(System.Int64)">
            <summary>Finds the value of a keyword given the ID of the keyword type.</summary>
            <param name="keywordTypeId">The ID of the keyword type.</param>
            <returns>The value of the keyword or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValue(System.Int64,System.Int32)">
            <summary>
                Finds the value of a keyword with a given keyword type ID in a particular instance
                position.
            </summary>
            <param name="keywordTypeId">The ID of the keyword type.</param>
            <param name="instancePosition">Instance position of the keyword.</param>
            <returns>The value of the keyword or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValue(Hyland.Unity.KeywordType)">
            <summary>Finds the value of a keyword with a given KeywordType.</summary>
            <param name="keywordType">The KeywordType of the keyword.</param>
            <returns>The value of the keyword or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValue(Hyland.Unity.KeywordType,System.Int32)">
            <summary>Finds the value of a keyword with a given KeywordType in a particular instance position.</summary>
            <param name="keywordType">The KeywordType of the keyword.</param>
            <param name="instancePosition">Instance position of the keyword.</param>
            <returns>The value of the keyword or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValues(System.Int64)">
            <summary>Finds the values of keywords with a given keyword type ID.</summary>
            <param name="keywordTypeID">The ID of the keyword type.</param>
            <returns>A list containing keyword information, or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValues(System.String)">
            <summary>Finds the values of keywords with a given keyword type name.</summary>
            <param name="keywordTypeName">The name of the keyword type.</param>
            <returns>A list containing keyword information, or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.GetKeywordValues(Hyland.Unity.KeywordType)">
            <summary>Finds the values of keywords with a given KeywordType.</summary>
            <param name="keywordType">The KeywordType of the keyword.</param>
            <returns>A list containing keyword information, or null if nothing was found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.SetKeywordValue(System.String,System.String)">
            <summary>Sets the value of a keyword matching a given name.</summary>
            <param name="keywordTypeName">The name of the keyword type.</param>
            <param name="keywordValue">The value that the keyword will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.SetKeywordValue(System.String,System.Int32,System.String)">
            <summary>Sets the value of a keyword matching a given name in a given instance position.</summary>
            <param name="keywordTypeName">The name of the keyword type.</param>
            <param name="instancePosition">Instance position of the keyword.</param>
            <param name="keywordValue">The value that the keyword will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.SetKeywordValue(System.Int64,System.String)">
            <summary>Sets the value of a keyword matching a given ID.</summary>
            <param name="keywordTypeId">The ID of the keyword type.</param>
            <param name="keywordValue">The value that the keyword will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.SetKeywordValue(System.Int64,System.Int32,System.String)">
            <summary>Sets the value of a keyword matching a given ID in a given instance position.</summary>
            <param name="keywordTypeId">The ID of the keyword type.</param>
            <param name="instancePosition">Instance position of the keyword.</param>
            <param name="keywordValue">The value that the keyword will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.SetKeywordValue(Hyland.Unity.KeywordType,System.String)">
            <summary>Sets the value of a keyword matching a given KeywordType.</summary>
            <param name="keywordType">The KeywordType of the keyword.</param>
            <param name="keywordValue">The value that the keyword will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.SetKeywordValue(Hyland.Unity.KeywordType,System.Int32,System.String)">
            <summary>Sets the value of a keyword matching a given KeywordType in a given instance position.</summary>
            <param name="keywordType">The KeywordType of the keyword.</param>
            <param name="instancePosition">Instance position of the keyword.</param>
            <param name="keywordValue">The value that the keyword will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.SetKeywordValue(Hyland.Unity.Keyword)">
            <summary>Sets the value of a keyword matching the KeywordType of the given Keyword.</summary>
            <param name="keyword">The KeywordType of the keyword.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.KeywordTransformer.SetKeywordValue(Hyland.Unity.Keyword,System.Int32)">
            <summary>
                Sets the value of a keyword matching the KeywordType of the given Keyword in a particular
                instance position.
            </summary>
            <param name="keyword">The KeywordType of the keyword.</param>
            <param name="instancePosition">Instance position of the keyword.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.SystemDateTransformer">
            <summary>A class that gets and sets the date keyword values of scrape events.</summary>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.SystemDateTransformer.GetDocumentDate">
            <summary>Gets the value of the Document Date keyword</summary>
            <returns>The value of the keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.SystemDateTransformer.GetFromDate">
            <summary>Gets the value of the From Date keyword</summary>
            <returns>A list containing the value of the date keywords.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.SystemDateTransformer.GetFromDate(System.Int32)">
            <summary>Gets the value of the From Date keyword in the particular instance position</summary>
            <param name="instancePosition">The instance position of the from date.</param>
            <returns>The From Date in the particular position, DateTime.MinValue otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.SystemDateTransformer.GetToDate">
            <summary>Gets the value of the To Date keyword</summary>
            <returns>A list containing the value of the date keywords.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.SystemDateTransformer.GetToDate(System.Int32)">
            <summary>Gets the value of the To Date keyword in the particular instance position</summary>
            <param name="instancePosition">The instance position of the to date.</param>
            <returns>The To Date in the particular position, DateTime.MinValue otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.SystemDateTransformer.SetDocumentDate(System.DateTime)">
            <summary>Sets the value of the Document Date keyword</summary>
            <returns>The value that the date will be set to.</returns>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.SystemDateTransformer.SetFromDate(System.Int32,System.DateTime)">
            <summary>Sets the value of a particular From Date keyword</summary>
            <param name="instancePosition">The position of the keyword.</param>
            <param name="fromDateValue">The value that the date will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.SystemDateTransformer.SetToDate(System.Int32,System.DateTime)">
            <summary>Sets the value of a particular To Date keyword</summary>
            <param name="instancePosition">The position of the keyword.</param>
            <param name="toDateValue">The value that the date will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.UnityFormTransformer">
            <summary>A class that gets and sets the ValueFields of scrape events.</summary>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.UnityFormTransformer.GetFieldValue(System.String)">
            <summary>Gets the value of the field matching a given field name.</summary>
            <param name="fieldName">The name of the field.</param>
            <returns>The value of the field or null if nothing is found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.UnityFormTransformer.GetFieldValue(Hyland.Unity.UnityForm.ValueField)">
            <summary>Gets the value of the field matching a given ValueField.</summary>
            <param name="field">The ValueField that is being searched for.</param>
            <returns>The value of the field or null if nothing is found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.UnityFormTransformer.SetFieldValue(System.String,System.String)">
            <summary>Sets the value of a field matching a given name.</summary>
            <param name="fieldDefinitionName">The name of the field definition.</param>
            <param name="value">The value that the field is being set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.UnityFormTransformer.SetFieldValue(Hyland.Unity.UnityForm.ValueFieldDefinition,System.String)">
            <summary>Sets the value of a field matching a given ValueFieldDefinition.</summary>
            <param name="fieldDefinition">The ValueFieldDefintion that is being set.</param>
            <param name="value">The value that the field is being set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.WorkViewTransformer">
            <summary>A class that gets and sets the WorkView attributes of scrape events.</summary>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.WorkViewTransformer.GetWorkViewAttributeValue(System.String)">
            <summary>Gets the value of the WorkView attribute matching a given dotted address.</summary>
            <param name="dottedAddress">The dotted address of the WorkView attribute.</param>
            <returns>The value of the attribute or null if nothing is found.</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.WorkViewTransformer.SetWorkViewAttributeValue(System.String,System.String)">
            <summary>Sets the value of the WorkView attribute matching a given dotted address.</summary>
            <param name="dottedAddress">The dotted address of the WorkView attribute.</param>
            <param name="value">The value that the attribute will be set to.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="T:Hyland.Unity.ApplicationEnabler.ScrapeEvent">
            <summary>Represents information about a scrape event.</summary>
        </member>
        <member name="P:Hyland.Unity.ApplicationEnabler.ScrapeEvent.XmlDocument">
            <summary>XmlDocument containing the scrape event information</summary>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.ScrapeEvent.#ctor(System.Xml.XmlDocument)">
            <summary>Creates a new ScrapeEvent</summary>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.ScrapeEvent.CreateDocumentHandleTransformer">
            <summary>
                Creates a new DocumentHandleTransformer which allows you to get specific keyword values or
                modify Document Handle nodes of Scrape Events
            </summary>
            <returns>The new DocumentHandleTransformer</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.ScrapeEvent.CreateKeywordTransformer">
            <summary>
                Creates a new KeywordTransformer which allows you to get keyword values or modify Keyword
                nodes of Scrape Events.
            </summary>
            <returns>The new KeywordTransformer</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.ScrapeEvent.CreateSystemDateTransformer">
            <summary>
                Creates a new SystemDateTransformer which allows you to get specific keyword values or
                modify SystemDate nodes of Scrape Events
            </summary>
            <returns>The new SystemDateTransformer</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.ScrapeEvent.CreateUnityFormTransformer">
            <summary>
                Creates a new UnityFormTransformer which allows you to get UnityFormField values or modify
                UnityFormField nodes of Scrape Events
            </summary>
            <returns>The new UnityFormTransformer</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.ScrapeEvent.CreateWorkViewTransformer">
            <summary>
                Creates a new WorkViewTransformer which allows you to get WorkViewAttribute values or
                modify WorkViewAttribute nodes of Scrape Events
            </summary>
            <returns>The new WorkViewTransformer</returns>
        </member>
        <member name="M:Hyland.Unity.ApplicationEnabler.ScrapeEvent.SetScrapeContext(System.String,System.String)">
            <summary>Sets the scrape context</summary>
            <param name="newName">The new name that the context will be set to.</param>
            <param name="newLocaleName">The new locale name that the context will be set to.</param>
        </member>
        <member name="T:Hyland.Unity.Barcode">
            <summary>Represents information about a Barcode.</summary>
        </member>
        <member name="P:Hyland.Unity.Barcode.BarcodeTypeName">
            <summary>The type of the Barcode.</summary>
        </member>
        <member name="P:Hyland.Unity.Barcode.Position">
            <summary>The position of the upper left corner of the Barcode, in hundredths of an inch.</summary>
        </member>
        <member name="P:Hyland.Unity.Barcode.Size">
            <summary>The width and height of the Barcode, in hundredths of an inch.</summary>
        </member>
        <member name="P:Hyland.Unity.Barcode.Value">
            <summary>The value of the Barcode.</summary>
        </member>
        <member name="M:Hyland.Unity.Barcode.#ctor(Hyland.Unity.Application)">
            <summary>Constructor.</summary>
            <param name="app">The Application object.</param>
        </member>
        <member name="T:Hyland.Unity.BarcodeDocumentUpdates">
            <summary>
                Provides access to methods which can be used to modify a Document in a Barcode process.
                Pre-populated with current Document data.
            </summary>
        </member>
        <member name="M:Hyland.Unity.BarcodeDocumentUpdates.#ctor(Hyland.Unity.DocumentType,Hyland.Unity.KeywordRecordList,Hyland.Unity.KeywordList)">
            <summary>Constructor.</summary>
            <param name="documentType">The current DocumentType.</param>
            <param name="keywordRecords">The current KeywordRecords.</param>
            <param name="uniquenessKeywords">The current Uniqueness Keywords.</param>
        </member>
        <member name="M:Hyland.Unity.BarcodeDocumentUpdates.AddUniquenessKeyword(Hyland.Unity.Keyword)">
            <summary>
                Adds a Keyword to the Document and treats it as if it came from a uniqueness Barcode.
                Uniqueness Keywords are used to determine if this document should be appended to an existing
                document.
            </summary>
            <param name="keyword">The Keyword to add.</param>
        </member>
        <member name="M:Hyland.Unity.BarcodeDocumentUpdates.SetDocumentDate(System.DateTime)">
            <summary>Sets the Document Date on the Document.</summary>
            <param name="documentDate">The Document date.</param>
        </member>
        <member name="M:Hyland.Unity.BarcodeDocumentUpdates.SetDocumentType(Hyland.Unity.DocumentType)">
            <summary>Sets the DocumentType on the Document.</summary>
            <param name="documentType">The DocumentType.</param>
        </member>
        <member name="M:Hyland.Unity.BarcodeDocumentUpdates.RemoveKeyword(Hyland.Unity.Keyword)">
            <summary>Removes a Keyword on the Document.</summary>
            <param name="keyword">The Keyword to remove.</param>
        </member>
        <member name="M:Hyland.Unity.BarcodeDocumentUpdates.UpdateKeyword(Hyland.Unity.Keyword,Hyland.Unity.Keyword)">
            <summary>Updates a Keyword on the Document.</summary>
            <param name="oldKeyword">The old Keyword which will be updated.</param>
            <param name="newKeyword">The Keyword which oldKeyword will be updated to.</param>
        </member>
        <member name="P:Hyland.Unity.BarcodeField.DocumentType">
            <summary>The DocumentType associated with the barcode field.</summary>
        </member>
        <member name="P:Hyland.Unity.BarcodeField.IDString">
            <summary>The ID string used to identify the barcode field.</summary>
        </member>
        <member name="M:Hyland.Unity.BarcodeField.MatchesID(System.String)">
            <summary>Returns true if trimmed id = trimmed IDString using InvariantCultureIgnoreCase.</summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>Same logic as BarcodeManager.</remarks>
        </member>
        <member name="T:Hyland.Unity.BarcodePage">
            <summary>Represents information about a page of Barcodes.</summary>
        </member>
        <member name="P:Hyland.Unity.BarcodePage.Count">
            <summary>The number of Barcodes on the page.</summary>
        </member>
        <member name="P:Hyland.Unity.BarcodePage.CurrentKeywordRecords">
            <summary>KeywordRecords currently associated with the Document.</summary>
        </member>
        <member name="P:Hyland.Unity.BarcodePage.DeletePage">
            <summary>True if the page should be deleted after processing.</summary>
        </member>
        <member name="P:Hyland.Unity.BarcodePage.DocumentType">
            <summary>The current DocumentType.</summary>
        </member>
        <member name="P:Hyland.Unity.BarcodePage.NewPage">
            <summary>True if this is the first script run on a page.</summary>
        </member>
        <member name="P:Hyland.Unity.BarcodePage.UniquenessKeywords">
            <summary>Keywords which are used to determine the uniqueness of the document.</summary>
        </member>
        <member name="M:Hyland.Unity.BarcodePage.#ctor(Hyland.Unity.Application,System.Int32,System.Boolean,System.Boolean,System.Int64,Hyland.Unity.KeywordRecordList,Hyland.Unity.KeywordList,Hyland.Unity.BarcodeFieldList)">
            <summary>Constructor.</summary>
            <param name="app">The Application object.</param>
            <param name="count">The number of Barcodes on the page.</param>
            <param name="newPage">True if this is the first script run on a page.</param>
            <param name="deletePage">True if the page should be deleted after processing.</param>
            <param name="documentTypeID">The current DocumentType ID.</param>
            <param name="currentKeywordRecords">The current KeywordRecords.</param>
            <param name="uniquenessKeywords">Keywords used to determine the uniqueness of the document.</param>
            <param name="barcodeDocTypeFields">List of configured DocumentType BarcodeFields</param>
        </member>
        <member name="M:Hyland.Unity.BarcodePage.#ctor(Hyland.Unity.Application)">
            <summary>Constructor.</summary>
            <param name="app">The Application object.</param>
        </member>
        <member name="M:Hyland.Unity.BarcodePage.GetAllMappedDocumentTypes(System.String)">
            <summary>Gets all DocumentTypes mapped to a BarcodeField.</summary>
            <param name="idString">The string which identifies the BarcodeField.</param>
            <returns>The DocumentTypes mapped to the BarcodeField.</returns>
        </member>
        <member name="M:Hyland.Unity.BarcodePage.GetMappedDocumentType(System.String)">
            <summary>Gets the DocumentType mapped to a BarcodeField.</summary>
            <param name="idString">The string which identifies the BarcodeField.</param>
            <returns>DocumentType mapped to the BarcodeField.</returns>
        </member>
        <member name="T:Hyland.Unity.IScanQueueBarcodeProcessingEventScript">
            <summary>ScanQueue - Barcode Processing Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueueBarcodeProcessingEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueBarcodeProcessingEventArgs)">
            <summary>Method executed when a barcode is processed.</summary>
            <param name="app">The connected Application object</param>
            <param name="args">
                The ScanQueueBarcodeProcessingEventArgs object that contains the parameters for
                the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueBarcodeProcessingEventArgs">
            <summary>Arguments available in a ScanQueue Barcode Processing EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueBarcodeProcessingEventArgs.Barcode">
            <summary>The Barcode which the script is executed against.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueBarcodeProcessingEventArgs.BarcodePage">
            <summary>The BarcodePage containing the Barcode.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueBarcodeProcessingEventArgs.Results">
            <summary>The results object which allows modifications to be made to Document and BarcodePage data.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueBarcodeProcessingEventArgs.ScanQueue">
            <summary>The ScanQueue being processed.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueBarcodeProcessingEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.Barcode,Hyland.Unity.BarcodePage)">
            <summary>Constructor.</summary>
            <param name="scanQueue">The ScanQueue being processed.</param>
            <param name="barcode">The current Barcode.</param>
            <param name="barcodePage">The BarcodePage containing the Barcode</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueBarcodeProcessingEventResults">
            <summary>EventResults of a ScanQueue Barcode Processing EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueBarcodeProcessingEventResults.BarcodeDocumentUpdates">
            <summary>Results containing updates to a Document.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueBarcodeProcessingEventResults.#ctor(Hyland.Unity.BarcodePage)">
            <summary>Constructor.</summary>
            <param name="barcodePage">BarcodePage associated with the Barcode.</param>
        </member>
        <member name="M:Hyland.Unity.ScanQueueBarcodeProcessingEventResults.SetDeletePage(System.Boolean)">
            <summary>Allows the script to delete a BarcodePage.</summary>
            <param name="delete">True if the page should be deleted.</param>
        </member>
        <member name="M:Hyland.Unity.ScanQueueBarcodeProcessingEventResults.SetResultMessage(System.String)">
            <summary>Sets the result message in the document imaging window.</summary>
            <param name="message">The text to display.</param>
        </member>
        <member name="T:Hyland.Unity.BaseContextualEventArgs">
            <summary>Base class for Contextual Event Arguments</summary>
        </member>
        <member name="P:Hyland.Unity.BaseContextualEventArgs.Folder">
            <summary>
                Gets the current <see cref="P:Hyland.Unity.BaseContextualEventArgs.Folder" /> if the script is executed against a Folder (managed
                folder). Otherwise, returns null.
            </summary>
            <value>The current Folder (managed folder)</value>
        </member>
        <member name="P:Hyland.Unity.BaseContextualEventArgs.WorkViewObject">
            <summary>
                Gets the current <see cref="T:Hyland.Unity.WorkView.Object" /> if the script is executed against a WorkView
                Object. Otherwise, returns null.
            </summary>
            <value>The current WorkView Object</value>
        </member>
        <member name="T:Hyland.Unity.BatchEventArgs">
            <summary>Arguments for the script execution batch.</summary>
        </member>
        <member name="P:Hyland.Unity.BatchEventArgs.PropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of batch execution.</summary>
        </member>
        <member name="P:Hyland.Unity.BatchEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.BatchEventArgs.#ctor(Hyland.Unity.Event.PropertyBag)">
            <summary>Initializes this object</summary>
            <param name="propertyBag">
                The property bag that retains its properties for the duration of batch
                execution.
            </param>
        </member>
        <member name="T:Hyland.Unity.ClientBatchEventArgs">
            <summary>Arguments for the client script execution batch.</summary>
        </member>
        <member name="M:Hyland.Unity.ClientBatchEventArgs.#ctor(Hyland.Unity.Event.PropertyBag)">
            <summary>Initializes this object</summary>
            <param name="propertyBag">
                The property bag that retains its properties for the duration of batch
                execution.
            </param>
        </member>
        <member name="T:Hyland.Unity.ClientEventArgs">
            <summary>Client Event Arguments</summary>
        </member>
        <member name="P:Hyland.Unity.ClientEventArgs.BatchItemsRemaining">
            <summary>Gets the number of items remaining to be executed against the task.</summary>
        </member>
        <member name="P:Hyland.Unity.ClientEventArgs.Document">
            <summary>Gets the current <see cref="P:Hyland.Unity.ClientEventArgs.Document" />.</summary>
            <value>The current document.</value>
        </member>
        <member name="P:Hyland.Unity.ClientEventArgs.PropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of batch execution.</summary>
        </member>
        <member name="P:Hyland.Unity.ClientEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ClientEventArgs.#ctor(Hyland.Unity.Document,Hyland.Unity.Event.PropertyBag,System.Int64)">
            <summary>Initializes this object</summary>
            <param name="document">Current Document being acted upon.</param>
            <param name="propertyBag">
                The property bag that retains its properties for the duration of batch
                execution.
            </param>
            <param name="batchItemsRemaining">Number of items remaining in execution batch.</param>
        </member>
        <member name="T:Hyland.Unity.GlobalClientEventArgs">
            <summary>Global Client Event Arguments</summary>
        </member>
        <member name="P:Hyland.Unity.GlobalClientEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="T:Hyland.Unity.IClientScript">
            <summary>Client Script Event Interface. This script type always executes client side.</summary>
        </member>
        <member name="M:Hyland.Unity.IClientScript.OnBeginBatch(Hyland.Unity.Application,Hyland.Unity.ClientBatchEventArgs)">
            <summary>Method executed when batch begins processing.</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.ClientBatchEventArgs" /> object that contains the parameters for
                the current interface.
            </param>
        </member>
        <member name="M:Hyland.Unity.IClientScript.OnClientScriptExecute(Hyland.Unity.Application,Hyland.Unity.ClientEventArgs)">
            <summary>Method executed on each item in the batch.</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.ClientEventArgs" /> object that contains the parameters for the
                current interface.
            </param>
        </member>
        <member name="M:Hyland.Unity.IClientScript.OnEndBatch(Hyland.Unity.Application,Hyland.Unity.ClientBatchEventArgs)">
            <summary>Method executed when batch finishes processing.</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.ClientBatchEventArgs" /> object that contains the parameters for
                the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IGlobalClientScript">
            <summary>
                Global Client Script Event Interface. This script type always executes client side at a
                global level.
            </summary>
        </member>
        <member name="M:Hyland.Unity.IGlobalClientScript.OnGlobalClientScriptExecute(Hyland.Unity.Application,Hyland.Unity.GlobalClientEventArgs)">
            <summary>Method executed based on no object.</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.GlobalClientEventArgs" /> object that contains the parameters for
                the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.DocumentEventArgs">
            <summary>Base class for Document Event Arguments</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentEventArgs.Document">
            <summary>Gets the current Document the script is executed against.</summary>
            <value>The current Document.</value>
        </member>
        <member name="T:Hyland.Unity.DocumentAddModifyKeywordsEventArgs">
            <summary>Arguments available in a Document Add/Modify Keywords EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsEventArgs.KeywordPanel">
            <summary>The current DocumentKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsEventArgs.OriginalKeywordPanel">
            <summary>The DocumentKeywordPanel before any modifications were made.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsEventArgs.Results">
            <summary>
                The results object which allows modifications to be made to the current
                DocumentKeywordPanel.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentAddModifyKeywordsEventArgs.#ctor(Hyland.Unity.DocumentKeywordPanel,Hyland.Unity.DocumentKeywordPanel)">
            <summary>Constructor</summary>
            <param name="originalKeywordPanel">The DocumentKeywordPanel before any modifications were made.</param>
            <param name="keywordPanel">The current DocumentKeywordPanel.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentAddModifyKeywordsEventResults">
            <summary>EventResults of a Document Add/Modify Keywords EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the DocumentKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentAddModifyKeywordsEventResults.#ctor(Hyland.Unity.DocumentKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">DocumentKeywordPanel which is being updated.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentAddModifyKeywordsScriptResult">
            <summary>Results of a Document Add/Modify Keywords EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsScriptResult.Cancel">
            <summary>Keywords are not applied to the Document, and the Add/Modify Keywords dialog remains open.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsScriptResult.Continue">
            <summary>Keywords are applied to the Document.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentAddModifyKeywordsScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.IDocumentAddModifyKeywordsEventScript">
            <summary>Document - Add/Modify Keywords Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IDocumentAddModifyKeywordsEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentAddModifyKeywordsEventArgs)">
            <summary>Method executed when the Save button is clicked on the Add/Modify Keywords dialog.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocumentAddModifyKeywordsEventArgs object which contains parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.DocumentCrossReferenceEventArgs">
            <summary>Arguments available in a Document Cross Reference EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentCrossReferenceEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentCrossReferenceEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentCrossReferenceEventArgs.#ctor(Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="doc">The Document which the cross reference is performed on.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentCrossReferenceScriptResult">
            <summary>Results of a Document Cross Reference EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentCrossReferenceScriptResult.Cancel">
            <summary>The cross reference is not performed.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentCrossReferenceScriptResult.Continue">
            <summary>The cross reference is performed.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentCrossReferenceScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentUnindexedCrossReferenceEventArgs">
            <summary>Arguments available in a Document Unindexed Cross Reference EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentUnindexedCrossReferenceEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentUnindexedCrossReferenceEventArgs.UnindexedDocument">
            <summary>Gets the current UnindexedDocument the script is executed against.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentUnindexedCrossReferenceEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentUnindexedCrossReferenceEventArgs.#ctor(Hyland.Unity.UnindexedDocument)">
            <summary>Constructor</summary>
            <param name="doc">The UnindexedDocument which the cross reference is performed on.</param>
        </member>
        <member name="T:Hyland.Unity.IDocumentCrossReferenceEventScript">
            <summary>Document - Cross Reference Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IDocumentCrossReferenceEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentCrossReferenceEventArgs)">
            <summary>Method executed before a cross reference is performed on a Document.</summary>
            <param name="app">The connected application object.</param>
            <param name="args">
                The DocumentCrossReferenceEventArgs object which contains parameters for the
                current interface.
            </param>
        </member>
        <member name="M:Hyland.Unity.IDocumentCrossReferenceEventScript.OnUnindexedItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentUnindexedCrossReferenceEventArgs)">
            <summary>Method executed before a cross reference is performed on an UnindexedDocument.</summary>
            <param name="app">The connected application object.</param>
            <param name="args">
                The DocumentUnindexedCrossReferenceEventArgs object which contains parameters
                for the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.DocumentKeywordPanel">
            <summary>Represents information on the keyword panel.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentKeywordPanel.DocumentDate">
            <summary>The Document Date on the DocumentKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentKeywordPanel.DocumentName">
            <summary>The Document name on the DocumentKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentKeywordPanel.DocumentType">
            <summary>The DocumentType of the Document.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentKeywordPanel.KeywordRecords">
            <summary>The KeywordRecords as displayed on the DocumentKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentKeywordPanel.#ctor(Hyland.Unity.Application)">
            <summary>Constructor</summary>
            <param name="app">The connected Application object.</param>
        </member>
        <member name="M:Hyland.Unity.DocumentKeywordPanel.#ctor(Hyland.Unity.Application,System.Int64,System.String,System.DateTime,Hyland.Unity.KeywordRecordList)">
            <summary>Constructor</summary>
            <param name="app">The connected Application object.</param>
            <param name="documentTypeID">The DocumentType ID of the Document.</param>
            <param name="documentName">The AutoName of the Document.</param>
            <param name="documentDateEpoch">The Document Date on the keyword panel.</param>
            <param name="keywordRecords">KeywordRecords on the keyword panel.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentKeywordPanelUpdates">
            <summary>
                Provides access to methods which can be used to modify a DocumentKeywordPanel's data.
                Pre-populated with current DocumentKeywordPanel values.
            </summary>
        </member>
        <member name="M:Hyland.Unity.DocumentKeywordPanelUpdates.#ctor(Hyland.Unity.DocumentKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The DocumentKeywordPanel which is being updated.</param>
        </member>
        <member name="M:Hyland.Unity.DocumentKeywordPanelUpdates.#ctor(Hyland.Unity.DocumentType,System.DateTime,Hyland.Unity.KeywordRecordList)">
            <summary>Constructor</summary>
            <param name="docType">The DocumentType on the DocumentKeywordPanel.</param>
            <param name="documentDate">The Document Date on the DocumentKeywordPanel.</param>
            <param name="keywordRecords">KeywordRecords on the DocumentKeywordPanel.</param>
        </member>
        <member name="M:Hyland.Unity.DocumentKeywordPanelUpdates.SetDocumentDate(System.DateTime)">
            <summary>Sets the Document Date on the DocumentKeywordPanel.</summary>
            <param name="documentDate">The date which the panel is set to.</param>
        </member>
        <member name="T:Hyland.Unity.FileImportKeywordPanel">
            <summary>Represents information on the file import keyword panel.</summary>
        </member>
        <member name="P:Hyland.Unity.FileImportKeywordPanel.DocumentDate">
            <summary>The Document date on the FileImportKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.FileImportKeywordPanel.DocumentType">
            <summary>The selected DocumentType on the FileImportKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.FileImportKeywordPanel.FileInfos">
            <summary>The files being imported.</summary>
        </member>
        <member name="P:Hyland.Unity.FileImportKeywordPanel.FileType">
            <summary>The selected FileType on the FileImportKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.FileImportKeywordPanel.KeywordRecords">
            <summary>The KeywordRecords as displayed on the FileImportKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.FileImportKeywordPanel.#ctor(Hyland.Unity.Application)">
            <summary>Constructor</summary>
            <param name="app">The connected Application object.</param>
        </member>
        <member name="M:Hyland.Unity.FileImportKeywordPanel.#ctor(Hyland.Unity.Application,System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.DateTime,Hyland.Unity.KeywordRecordList)">
            <summary>Constructor</summary>
            <param name="app">The connected Application object.</param>
            <param name="documentTypeID">Selected DocumentType ID on the keyword panel.</param>
            <param name="fileTypeID">Selected FileType ID on the keyword panel.</param>
            <param name="filePaths">Fully qualified file path of the files being imported</param>
            <param name="documentDate">Document date on the keyword panel.</param>
            <param name="keywordRecords">KeywordRecords on the keyword panel.</param>
        </member>
        <member name="T:Hyland.Unity.FileImportKeywordPanelUpdates">
            <summary>
                Provides access to methods which can be used to modify a FileImportKeywordPanel's data.
                Pre-populated with current FileImportKeywordPanel values.
            </summary>
        </member>
        <member name="P:Hyland.Unity.FileImportKeywordPanelUpdates.ReverseKeysetLookupName">
            <summary>
                Setting this value triggers a Reverse Keyset Lookup after the script completes executing.
                The value should be set to the Item Label property of the desired Reverse Keyset Lookup.
            </summary>
        </member>
        <member name="M:Hyland.Unity.FileImportKeywordPanelUpdates.#ctor(Hyland.Unity.FileImportKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">FileImportKeywordPanel which is being updated.</param>
        </member>
        <member name="M:Hyland.Unity.FileImportKeywordPanelUpdates.SetDocumentDate(System.DateTime)">
            <summary>Sets the Document date on the FileImportKeywordPanel.</summary>
            <param name="documentDate">The Document date.</param>
        </member>
        <member name="M:Hyland.Unity.FileImportKeywordPanelUpdates.SetDocumentType(Hyland.Unity.DocumentType)">
            <summary>Sets the DocumentType on the FileImportKeywordPanel.</summary>
            <param name="docType">The DocumentType.</param>
        </member>
        <member name="M:Hyland.Unity.FileImportKeywordPanelUpdates.SetFileType(Hyland.Unity.FileType)">
            <summary>Sets the FileType on the FileImportKeywordPanel.</summary>
            <param name="fileType">The FileType.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentFileImportPostArchiveAsRevisionEventArgs">
            <summary>Arguments available in a Document File Import Post Archive as Revision EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPostArchiveAsRevisionEventArgs.KeywordPanel">
            <summary>
                The FileImportKeywordPanel object, which provides access to data on the
                FileImportKeywordPanel.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPostArchiveAsRevisionEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentFileImportPostArchiveAsRevisionEventArgs.#ctor(Hyland.Unity.FileImportKeywordPanel,Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The keyword panel before the Document was archived.</param>
            <param name="doc">The revised Document.</param>
        </member>
        <member name="T:Hyland.Unity.IDocumentFileImportPostArchiveAsRevisionEventScript">
            <summary>Document - File Import (Post-Archive as Revision) Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IDocumentFileImportPostArchiveAsRevisionEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentFileImportPostArchiveAsRevisionEventArgs)">
            <summary>
                Method executed after an imported Document is archived as a revision of an existing
                Document.
            </summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocumentFileImportPostArchiveAsRevisionEventArgs object which provides
                parameters for the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.DocumentFileImportPostArchiveEventArgs">
            <summary>Arguments available in a Document File Import Post Archive EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPostArchiveEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentFileImportPostArchiveEventArgs.#ctor(Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="doc">The archived Document.</param>
        </member>
        <member name="T:Hyland.Unity.IDocumentFileImportPostArchiveEventScript">
            <summary>Document - File Import (Post-Archive) Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IDocumentFileImportPostArchiveEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentFileImportPostArchiveEventArgs)">
            <summary>Method executed after an imported Document is archived.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocumentFileImportPostArchiveEventArgs object which provides parameters for
                the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.DocumentFileImportPreArchiveEventArgs">
            <summary>Arguments available in a Document File Import Pre Archive EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPreArchiveEventArgs.KeywordPanel">
            <summary>
                The FileImportKeywordPanel object, which provides access to data on the
                FileImportKeywordPanel.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPreArchiveEventArgs.Results">
            <summary>The results object which allows modifications to be made to the FileImportKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPreArchiveEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPreArchiveEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentFileImportPreArchiveEventArgs.#ctor(Hyland.Unity.FileImportKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The FileImportKeywordPanel</param>
        </member>
        <member name="T:Hyland.Unity.DocumentFileImportPreArchiveEventResults">
            <summary>Event results of a Document File Import Pre Archive EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPreArchiveEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the FileImportKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentFileImportPreArchiveEventResults.#ctor(Hyland.Unity.FileImportKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The FileImportKeywordPanel which is being updated.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentFileImportPreArchiveScriptResult">
            <summary>Results of a Document File Import Pre Archive EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPreArchiveScriptResult.Cancel">
            <summary>The Document is not imported and remains active in the import screen.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPreArchiveScriptResult.Continue">
            <summary>The Document is imported.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentFileImportPreArchiveScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.IDocumentFileImportPreArchiveEventScript">
            <summary>Document - File Import (Pre-Archive) Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IDocumentFileImportPreArchiveEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentFileImportPreArchiveEventArgs)">
            <summary>Method executed before an imported Document is archived.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocumentFileImportPreArchiveEventArgs object which provides parameters for
                the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.ReindexKeywordPanel">
            <summary>Represents information on the reindex keyword panel.</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexKeywordPanel.DocumentDate">
            <summary>The Document date on the ReindexKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexKeywordPanel.DocumentType">
            <summary>The selected DocumentType on the ReindexKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexKeywordPanel.FileType">
            <summary>The selected FileType on the ReindexKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ReindexKeywordPanel.KeywordRecords">
            <summary>The KeywordRecords as displayed on the ReindexKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.ReindexKeywordPanel.#ctor(Hyland.Unity.Application)">
            <summary>Constructor</summary>
            <param name="app">The connected Application object.</param>
        </member>
        <member name="M:Hyland.Unity.ReindexKeywordPanel.#ctor(Hyland.Unity.Application,System.Int64,System.Int64,System.DateTime,Hyland.Unity.KeywordRecordList)">
            <summary>Constructor</summary>
            <param name="app">The connected Application object.</param>
            <param name="documentTypeID">Selected DocumentType ID on the keyword panel.</param>
            <param name="fileTypeID">Selected FileType ID on the keyword panel.</param>
            <param name="documentDate">Document date on the keyword panel.</param>
            <param name="keywordRecords">KeywordRecords on the keyword panel.</param>
        </member>
        <member name="T:Hyland.Unity.ReindexKeywordPanelUpdates">
            <summary>
                Provides access to methods which can be used to modify a ReindexKeywordPanel's data.
                Pre-populated with current ReindexKeywordPanel values.
            </summary>
        </member>
        <member name="P:Hyland.Unity.ReindexKeywordPanelUpdates.ReverseKeysetLookupName">
            <summary>
                Setting this value triggers a Reverse Keyset Lookup after the script completes executing.
                The value should be set to the Item Label property of the desired Reverse Keyset Lookup.
            </summary>
        </member>
        <member name="M:Hyland.Unity.ReindexKeywordPanelUpdates.#ctor(Hyland.Unity.ReindexKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">ReindexKeywordPanel which is being updated.</param>
        </member>
        <member name="M:Hyland.Unity.ReindexKeywordPanelUpdates.SetDocumentDate(System.DateTime)">
            <summary>Sets the Document date on the ReindexKeywordPanel.</summary>
            <param name="documentDate">The Document date.</param>
        </member>
        <member name="M:Hyland.Unity.ReindexKeywordPanelUpdates.SetDocumentType(Hyland.Unity.DocumentType)">
            <summary>Sets the DocumentType on the ReindexKeywordPanel.</summary>
            <param name="docType">The DocumentType.</param>
        </member>
        <member name="M:Hyland.Unity.ReindexKeywordPanelUpdates.SetFileType(Hyland.Unity.FileType)">
            <summary>Sets the FileType on the ReindexKeywordPanel.</summary>
            <param name="fileType">The FileType.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentReindexPostArchiveEventArgs">
            <summary>Arguments available in a Document Reindex Post Archive EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPostArchiveEventArgs.OriginalKeywordPanel">
            <summary>The ReindexKeywordPanel before any changes were made.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPostArchiveEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentReindexPostArchiveEventArgs.#ctor(Hyland.Unity.ReindexKeywordPanel,Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The keyword panel before any modifications were made.</param>
            <param name="doc">The reindexed Document.</param>
        </member>
        <member name="T:Hyland.Unity.IDocumentReindexPostArchiveEventScript">
            <summary>Document - Reindex (Post-Archive) Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IDocumentReindexPostArchiveEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentReindexPostArchiveEventArgs)">
            <summary>Method executed after a Document is reindexed.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocumentReindexPostArchiveEventArgs object which contains parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.DocumentReindexPreArchiveEventArgs">
            <summary>Arguments available in a Document Reindex Pre Archive EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveEventArgs.KeywordPanel">
            <summary>The current ReindexKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveEventArgs.OriginalKeywordPanel">
            <summary>The ReindexKeywordPanel before any changes were made.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveEventArgs.Results">
            <summary>
                The results object which allows modifications to be made to the current
                ReindexKeywordPanel.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentReindexPreArchiveEventArgs.#ctor(Hyland.Unity.ReindexKeywordPanel,Hyland.Unity.ReindexKeywordPanel)">
            <summary>Constructor</summary>
            <param name="originalKeywordPanel">The keyword panel before any changes were made.</param>
            <param name="keywordPanel">The current keyword panel.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentReindexPreArchiveEventResults">
            <summary>Event results of a Document Reindex Pre Archive EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the ReindexKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentReindexPreArchiveEventResults.#ctor(Hyland.Unity.ReindexKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The ReindexKeywordPanel which will be updated.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentReindexPreArchiveScriptResult">
            <summary>Results of a Document Reindex Pre Archive EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveScriptResult.Cancel">
            <summary>The Document is not reindexed.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveScriptResult.Continue">
            <summary>The Document is reindexed.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentReindexPreArchiveScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.IDocumentReindexPreArchiveEventScript">
            <summary>Document - Reindex (Pre-Archive) Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IDocumentReindexPreArchiveEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentReindexPreArchiveEventArgs)">
            <summary>Method executed before a Document is reindexed.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocumentReindexPreArchiveEventArgs object which provides parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.DocumentSendToCreateNewDocumentEventArgs">
            <summary>Arguments available in a Document Send to Create New Document EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentSendToCreateNewDocumentEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.DocumentSendToCreateNewDocumentEventArgs.#ctor(Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="doc">The new Document.</param>
        </member>
        <member name="T:Hyland.Unity.DocumentUnindexedSendToCreateNewDocumentEventArgs">
            <summary>Arguments available in a Document Unindexed Send to Create New Document EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentUnindexedSendToCreateNewDocumentEventArgs.UnindexedDocument">
            <summary>Gets the current UnindexedDocument the script is executed against.</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentUnindexedSendToCreateNewDocumentEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="T:Hyland.Unity.IDocumentSendToCreateNewDocumentEventScript">
            <summary>Document - Send to Create New Document Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IDocumentSendToCreateNewDocumentEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentSendToCreateNewDocumentEventArgs)">
            <summary>Method executed after a Document is created using Send to Create New Document.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocumentSendToCreateNewDocumentEventArgs object which contains parameters
                for the current interface.
            </param>
        </member>
        <member name="M:Hyland.Unity.IDocumentSendToCreateNewDocumentEventScript.OnUnindexedItemExecute(Hyland.Unity.Application,Hyland.Unity.DocumentUnindexedSendToCreateNewDocumentEventArgs)">
            <summary>Method executed after an UnindexedDocument is created using Send to Create New Document.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The DocumentUnindexedSendToCreateNewDocumentEventArgs object which contains
                parameters for the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.ECommerce.ECommerceCalculateHandlingChargesEventArgs">
            <summary>The arguments class used by the OnCalculateHandlingCharges method of a ECommerce script.</summary>
        </member>
        <member name="P:Hyland.Unity.ECommerce.ECommerceCalculateHandlingChargesEventArgs.ConvenienceCharge">
            <summary>The convenience charge to be added to the total</summary>
        </member>
        <member name="P:Hyland.Unity.ECommerce.ECommerceCalculateHandlingChargesEventArgs.HandlingCharge">
            <summary>The handling charge to be added to the total</summary>
        </member>
        <member name="P:Hyland.Unity.ECommerce.ECommerceCalculateHandlingChargesEventArgs.SubTotal">
            <summary>The sub total</summary>
        </member>
        <member name="T:Hyland.Unity.ECommerce.ECommerceEventArgs">
            <summary>Base class for all ECommerce related event arguments</summary>
        </member>
        <member name="P:Hyland.Unity.ECommerce.ECommerceEventArgs.Documents">
            <summary>The list of documents that the ECommerce transaction is performed on.</summary>
        </member>
        <member name="M:Hyland.Unity.ECommerce.ECommerceEventArgs.#ctor(Hyland.Unity.DocumentList)">
            <summary>Initializes a new instance of ECommerceEventArgs.</summary>
            <param name="documents">The list of documents that the ECommerce transaction is performed on.</param>
        </member>
        <member name="T:Hyland.Unity.ECommerce.ECommerceGenerateCustomDataElementEventArgs">
            <summary>The arguments class used by the OnGenerateCustomDataElement method of a ECommerce script.</summary>
        </member>
        <member name="P:Hyland.Unity.ECommerce.ECommerceGenerateCustomDataElementEventArgs.CustomDataElement">
            <summary>A dictionary that script can add custom data elements to.</summary>
        </member>
        <member name="P:Hyland.Unity.ECommerce.ECommerceGenerateCustomDataElementEventArgs.TransactionID">
            <summary>The transaction ID of the current transaction.</summary>
        </member>
        <member name="T:Hyland.Unity.ECommerce.IECommerceScript">
            <summary>The interface that an E-Commerce script should implement.</summary>
        </member>
        <member name="M:Hyland.Unity.ECommerce.IECommerceScript.OnCalculateHandlingCharges(Hyland.Unity.Application,Hyland.Unity.ECommerce.ECommerceCalculateHandlingChargesEventArgs)">
            <summary>
                Called when the script should provide the handling and convenience charge for the
                transaction.
            </summary>
            <param name="app">The connected Unity application.</param>
            <param name="args">
                The arguments that provide the script with the data it requires and hold data
                the script wants to return to OnBase.
            </param>
        </member>
        <member name="M:Hyland.Unity.ECommerce.IECommerceScript.OnGenerateCustomDataElement(Hyland.Unity.Application,Hyland.Unity.ECommerce.ECommerceGenerateCustomDataElementEventArgs)">
            <summary>Called when the script should provide custom data elements for payment processing.</summary>
            <param name="app">The connected Unity application.</param>
            <param name="args">
                The arguments that provide the script with the data it requires and hold data
                the script wants to return to OnBase.
            </param>
        </member>
        <member name="T:Hyland.Unity.ExternalAutofillKeysetData">
            <summary>External Autofill Keyset Data</summary>
        </member>
        <member name="M:Hyland.Unity.ExternalAutofillKeysetData.SetKeyword(Hyland.Unity.Keyword)">
            <summary>Set the specified Keyword on the Autofill Keyset.</summary>
            <param name="keyword">The Keyword to set.</param>
        </member>
        <member name="T:Hyland.Unity.ExternalAutofillKeysetEventArgs">
            <summary>External Autofill Keyset Event Args</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalAutofillKeysetEventArgs.KeywordTypes">
            <summary>The KeywordTypes of the Autofill Keyword Set.</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalAutofillKeysetEventArgs.PrimaryKeyword">
            <summary>The Primary Keyword of the Autofill Keyword Set.</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalAutofillKeysetEventArgs.Results">
            <summary>The results that will be used by the Keyword Set Autofill.</summary>
        </member>
        <member name="T:Hyland.Unity.ExternalAutofillKeysetEventResults">
            <summary>External Autofill Keyset Event Results</summary>
        </member>
        <member name="M:Hyland.Unity.ExternalAutofillKeysetEventResults.AddExternalKeywordAutofillKeysetData(Hyland.Unity.ExternalAutofillKeysetData)">
            <summary>Add an ExternalAutofillKeysetData to the ExternalAutofillKeyset.</summary>
            <param name="externalAutofillKeysetData">
                An ExternalAutofillKeysetData to be added to the Autofill
                Keyset event results.
            </param>
        </member>
        <member name="M:Hyland.Unity.ExternalAutofillKeysetEventResults.CreateExternalAutofillKeysetData">
            <summary>Creates an ExternalAutofillKeysetData object.</summary>
            <returns>
                An ExternalAutofillKeysetData to configure and add to the ExternalAutofillKeysetEvent
                results.
            </returns>
        </member>
        <member name="T:Hyland.Unity.IExternalAutofillKeysetScript">
            <summary>External Autofill Keyset Event Interface</summary>
        </member>
        <member name="M:Hyland.Unity.IExternalAutofillKeysetScript.OnExternalAutofillKeysetScriptExecute(Hyland.Unity.Application,Hyland.Unity.ExternalAutofillKeysetEventArgs)">
            <summary>Method executed when auto-filling Keyword Set values.</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.ExternalAutofillKeysetEventArgs" /> object that contains the
                parameters for the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.ExternalKeywordDataSetEventArgs">
            <summary>ExternalKeywordDataSet Event Args</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalKeywordDataSetEventArgs.KeywordType">
            <summary>KeywordType for which to retrieve KeywordDataSet items.</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalKeywordDataSetEventArgs.Results">
            <summary>The data that will be used for the Keyword DataSet.</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalKeywordDataSetEventArgs.SearchParameters">
            <summary>Arguments specified to assist in the external search of Keyword DataSet items.</summary>
        </member>
        <member name="T:Hyland.Unity.ExternalKeywordDataSetEventResults">
            <summary>ExternalKeywordDataSet Event Results</summary>
        </member>
        <member name="M:Hyland.Unity.ExternalKeywordDataSetEventResults.AddExternalKeywordDataSetItem(Hyland.Unity.ExternalKeywordDataSetItem)">
            <summary>Add an item to the Keyword DataSet.</summary>
            <param name="externalKeywordDataSetItem">
                The ExternalKeywordDataSetItem to add to the
                KeywordDataSet.
            </param>
        </member>
        <member name="M:Hyland.Unity.ExternalKeywordDataSetEventResults.AddKeyword(Hyland.Unity.Keyword)">
            <summary>
                Creates an ExternalKeywordDataSetItem with the specified Keyword and adds it to the
                KeywordDataSet.
            </summary>
            <param name="keyword">Keyword to add to the Keyword DataSet.</param>
        </member>
        <member name="M:Hyland.Unity.ExternalKeywordDataSetEventResults.CreateExternalKeywordDataSetItem(Hyland.Unity.Keyword)">
            <summary>Create an instance of an ExternalKeywordDataSetItem using the Keyword specified.</summary>
            <param name="keyword">The Keyword to set as the ExternalKeywordDataSetItem.</param>
            <returns>Keyword to add to the ExternalKeywordDataSet.</returns>
        </member>
        <member name="T:Hyland.Unity.ExternalKeywordDataSetItem">
            <summary>Represents an item in an External KeywordDataSet.</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalKeywordDataSetItem.Keyword">
            <summary>The Keyword of this External KeywordDataSet Item.</summary>
        </member>
        <member name="T:Hyland.Unity.ExternalKeywordDataSetItemList">
            <summary>A list of External KeywordDataSet Items.</summary>
        </member>
        <member name="T:Hyland.Unity.ExternalKeywordDataSetSearchParameters">
            <summary>Search arguments for the ExternalKeywordDataSet.</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalKeywordDataSetSearchParameters.FilterText">
            <summary>Text by which to filter KeywordDataSet items.</summary>
        </member>
        <member name="P:Hyland.Unity.ExternalKeywordDataSetSearchParameters.RelatedKeywordRecords">
            <summary>
                Available only for a UnityForm. Contains current rather than stored values. If the current
                KeywordDataSet is a SingleInstanceKeywordRecord this list will contain all KeywordRecords on
                the UnityForm, including MultiInstanceKeywordGroup KeywordRecords. If the current
                KeywordDataSet is part of a MultiInstanceKeywordGroup this list will contain that KeywordRecord
                and all SingleInstanceKeywordRecords on the UnityForm.
            </summary>
        </member>
        <member name="T:Hyland.Unity.IExternalKeywordDataSetScript">
            <summary>External KeywordDataSet Event Interface</summary>
        </member>
        <member name="M:Hyland.Unity.IExternalKeywordDataSetScript.OnExternalKeywordDataSetScriptExecute(Hyland.Unity.Application,Hyland.Unity.ExternalKeywordDataSetEventArgs)">
            <summary>Method executed to populate an External Keyword DataSet</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.ExternalKeywordDataSetEventArgs" /> object that contains the
                parameters for the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.InternalExecutionStatus">
            <summary>The result of an Indexing Event.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.Cancel">
            <summary>The script is not executed successfully and scanning should cancel.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.Continue">
            <summary>The script executed successfully and indexing/scanning should continue.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.DeleteDocument">
            <summary>Delete the current document.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.StopIndexing">
            <summary>Quit the indexing process.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.StartNewDocument">
            <summary>Start a new document with the current page.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.ScanMore">
            <summary>Scan more pages into the current document.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.Append">
            <summary>Append the current document to the previous document.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.KeepFocus">
            <summary>Keeps focus on the current keyword.</summary>
        </member>
        <member name="F:Hyland.Unity.InternalExecutionStatus.Review">
            <summary>The Document remains the active Document for indexing.</summary>
        </member>
        <member name="T:Hyland.Unity.IndexKeywordPanel">
            <summary>Represents information on the keyword panel.</summary>
        </member>
        <member name="P:Hyland.Unity.IndexKeywordPanel.DocumentDate">
            <summary>The Document Date on the IndexKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.IndexKeywordPanel.DocumentType">
            <summary>The selected DocumentType on the IndexKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.IndexKeywordPanel.KeywordRecords">
            <summary>The KeywordRecords as displayed on the IndexKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.IndexKeywordPanel.ScanFormat">
            <summary>The selected ScanFormat on the IndexKeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.IndexKeywordPanel.ScanMode">
            <summary>The ScanMode setting on the IndexKeywordPanel.</summary>
        </member>
        <member name="T:Hyland.Unity.IndexKeywordPanelUpdates">
            <summary>
                Provides access to methods which can be used to modify an IndexKeywordPanel's data.
                Pre-populated with current IndexKeywordPanel values.
            </summary>
        </member>
        <member name="P:Hyland.Unity.IndexKeywordPanelUpdates.ReverseKeysetLookupName">
            <summary>
                Setting this value triggers a Reverse Keyset Lookup after the script completes executing.
                The value should be set to the Item Label property of the desired Reverse Keyset Lookup.
            </summary>
        </member>
        <member name="P:Hyland.Unity.IndexKeywordPanelUpdates.IsModified">
            <summary>
                Internal use only. Returns true if modifications were made to the Document Date,
                DocumentType, Reverse Lookup, or Keywords.
            </summary>
        </member>
        <member name="P:Hyland.Unity.IndexKeywordPanelUpdates.DocumentDate">
            <summary>Internal use only. The Document Date which users can modify.</summary>
        </member>
        <member name="M:Hyland.Unity.IndexKeywordPanelUpdates.SetDocumentDate(System.DateTime)">
            <summary>Sets the Document Date on the IndexKeywordPanel.</summary>
            <param name="documentDate">The date which the panel is set to.</param>
        </member>
        <member name="M:Hyland.Unity.IndexKeywordPanelUpdates.SetDocumentType(Hyland.Unity.DocumentType)">
            <summary>Sets the DocumentType on the IndexKeywordPanel.</summary>
            <param name="docType">The DocumentType.</param>
        </member>
        <member name="T:Hyland.Unity.IScanQueueIndexAdHocEventScript">
            <summary>ScanQueue - Index Ad Hoc Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueueIndexAdHocEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueIndexAdHocEventArgs)">
            <summary>Method executed when the Index Ad Hoc button is pressed in the Indexing dialog.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueueIndexAdHocEventArgs object which contains parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueueIndexDocumentIntoExistingEventScript">
            <summary>ScanQueue - Index Document into Existing Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueueIndexDocumentIntoExistingEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueIndexDocumentIntoExistingEventArgs)">
            <summary>Method executed after a Document is indexed into an existing Document during indexing.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueueIndexDocumentIntoExistingEventArgs object which contains parameters
                for the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueueIndexDocumentTypeChangeEventScript">
            <summary>ScanQueue - Index Document Type Change Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueueIndexDocumentTypeChangeEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs)">
            <summary>Method executed when the DocumentType is changed during indexing.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueueIndexDocumentTypeChangeEventArgs object which contains parameters
                for the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueueKeywordBlurEventScript">
            <summary>ScanQueue - Keyword Blur Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueueKeywordBlurEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueKeywordBlurEventArgs)">
            <summary>Method executed before a Keyword loses focus in the KeywordPanel.</summary>
            <param name="app">The connected Application object</param>
            <param name="args">
                The ScanQueueKeywordBlurEventArgs object that contains the parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueueKeywordFocusEventScript">
            <summary>ScanQueue - Keyword Focus Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueueKeywordFocusEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueKeywordFocusEventArgs)">
            <summary>Method executed before a Keyword gains focus in the KeywordPanel.</summary>
            <param name="app">The connected Application object</param>
            <param name="args">
                The ScanQueueKeywordFocusEventArgs object that contains the parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueuePointAndShootIndexingEventScript">
            <summary>ScanQueue - Point and Shoot Indexing Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePointAndShootIndexingEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs)">
            <summary>Method executed when selecting a value using interactive data capture.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueuePointAndShootIndexingEventArgs object which contains parameters for
                the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueuePostIndexEventScript">
            <summary>ScanQueue - Post Index Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePostIndexEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePostIndexEventArgs)">
            <summary>Method executed on each item in the batch.</summary>
            <param name="app">The connected Application object</param>
            <param name="args">
                The ScanQueuePostIndexEventArgs object that contains the parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueuePostReindexEventScript">
            <summary>ScanQueue - Post Reindex Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePostReindexEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePostReindexEventArgs)">
            <summary>Method executed after a Document is reindexed.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueuePostReindexEventArgs object which contains parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueuePostSecondaryIndexEventScript">
            <summary>ScanQueue - Post Secondary Index Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePostSecondaryIndexEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePostSecondaryIndexEventArgs)">
            <summary>Method executed after a Document is indexed from a secondary index queue.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueuePostSecondaryIndexEventArgs object which contains parameters for
                the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueuePreIndexEventScript">
            <summary>ScanQueue - Pre Index Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePreIndexEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePreIndexEventArgs)">
            <summary>Method executed before a Document is indexed in an indexing queue.</summary>
            <param name="app">The connected Application object</param>
            <param name="args">
                The ScanQueuePreIndexEventArgs object which contains parameters for the current
                interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueIndexAdHocEventArgs">
            <summary>Arguments available in a ScanQueue Index Ad Hoc EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocEventArgs.ExistingKeywordRecords">
            <summary>The stored Document KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocEventArgs.Results">
            <summary>The results object which allows modifications to be made to the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document being indexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocEventArgs.ScriptResult">
            <summary>The script result. Defaults to Review.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueIndexAdHocEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.KeywordRecordList,Hyland.Unity.IndexKeywordPanel)">
            <summary>Constructor</summary>
            <param name="scanQueue">ScanQueue which the Document resides in.</param>
            <param name="existingKeywordRecords">The stored Document KeywordRecords.</param>
            <param name="keywordPanel">KeywordPanel object which provides access to data on the KeywordPanel.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueIndexAdHocEventResults">
            <summary>EventResults of a ScanQueue Index Ad Hoc EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the KeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueIndexAdHocEventResults.#ctor(Hyland.Unity.IndexKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The KeywordPanel.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueIndexAdHocScriptResult">
            <summary>Results of a ScanQueue Index Ad Hoc EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocScriptResult.Append">
            <summary>Append the current Document to the previous Document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocScriptResult.Continue">
            <summary>The Document is indexed.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocScriptResult.DeleteDocument">
            <summary>Delete the current Document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocScriptResult.Review">
            <summary>The Document remains the active Document for indexing.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocScriptResult.ScanMore">
            <summary>Scan more pages into the current Document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocScriptResult.StartNewDocument">
            <summary>Start a new Document with the current page.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocScriptResult.StopIndexing">
            <summary>Quit the indexing process.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexAdHocScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueueIndexDocumentIntoExistingEventArgs">
            <summary>Arguments available in a ScanQueue Index Document into Existing EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentIntoExistingEventArgs.ExistingKeywordRecords">
            <summary>The stored Document KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentIntoExistingEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentIntoExistingEventArgs.RevisedDocument">
            <summary>The Document which the unindexed Document is indexed into.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentIntoExistingEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document being indexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentIntoExistingEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueIndexDocumentIntoExistingEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.KeywordRecordList,Hyland.Unity.IndexKeywordPanel,Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="scanQueue">ScanQueue which the Document resides in.</param>
            <param name="existingKeywordRecords">The stored Document KeywordRecords.</param>
            <param name="keywordPanel">KeywordPanel object which provides access to data on the KeywordPanel.</param>
            <param name="revisedDocument">The Document which the unindexed Document is indexed into.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs">
            <summary>Arguments available in a ScanQueue Index Document Type Change EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs.ExistingKeywordRecords">
            <summary>The stored Document KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs.PreviousDocumentType">
            <summary>The previous DocumentType.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs.Results">
            <summary>The results object which allows modifications to be made to the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document being indexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.KeywordRecordList,Hyland.Unity.IndexKeywordPanel,Hyland.Unity.DocumentType)">
            <summary>Constructor</summary>
            <param name="scanQueue">The ScanQueue which the Document being indexed resides in.</param>
            <param name="existingKeywordRecords">The stored Document KeywordRecords.</param>
            <param name="keywordPanel">The KeywordPanel object.</param>
            <param name="previousDocumentType">The previous DocumentType.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventResults">
            <summary>EventResults of a ScanQueue Index Document Type Change EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the IndexKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueIndexDocumentTypeChangeEventResults.#ctor(Hyland.Unity.IndexKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The KeywordPanel.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueKeywordBlurEventArgs">
            <summary>Arguments available in a ScanQueue Keyword Blur EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventArgs.ExistingKeywordRecords">
            <summary>The stored Document KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventArgs.KeywordType">
            <summary>The KeywordType of the blurred Keyword.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventArgs.KeywordValue">
            <summary>The value of the blurred Keyword.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventArgs.Results">
            <summary>The results object which allows modifications to be made to the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document being indexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueKeywordBlurEventArgs.#ctor(Hyland.Unity.IndexKeywordPanel,Hyland.Unity.KeywordRecordList,Hyland.Unity.ScanQueue,Hyland.Unity.KeywordType,System.String)">
            <summary>Constructor</summary>
            <param name="keywordPanel">KeywordPanel object which provides access to data on the keyword panel.</param>
            <param name="existingKeywordRecords">The stored Document KeywordRecords.</param>
            <param name="scanQueue">ScanQueue in which the document resides in.</param>
            <param name="blurredKeywordType">The KeywordType of the blurred Keyword.</param>
            <param name="blurredKeywordValue">The value of the blurred Keyword.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueKeywordBlurEventResults">
            <summary>EventResults of a ScanQueue Keyword Blur EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the KeywordPanel.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueueKeywordBlurScriptResult">
            <summary>The Result of a ScanQueue Keyword Blur EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurScriptResult.Continue">
            <summary>The script executed successfully and the Keyword loses focus.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurScriptResult.KeepFocus">
            <summary>The Keyword retains focus.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordBlurScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueKeywordBlurScriptResult.#ctor(Hyland.Unity.InternalExecutionStatus)">
            <summary>Constructor</summary>
            <param name="internalStatus">Result of the event</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueKeywordFocusEventArgs">
            <summary>Arguments available in a ScanQueue Keyword Focus EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordFocusEventArgs.ExistingKeywordRecords">
            <summary>The stored Document KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordFocusEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordFocusEventArgs.KeywordType">
            <summary>The KeywordType of the focused Keyword.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordFocusEventArgs.KeywordValue">
            <summary>The value of the focused Keyword.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordFocusEventArgs.Results">
            <summary>The results object which allows modifications to be made to the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordFocusEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document being indexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordFocusEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueKeywordFocusEventArgs.#ctor(Hyland.Unity.IndexKeywordPanel,Hyland.Unity.KeywordRecordList,Hyland.Unity.ScanQueue,Hyland.Unity.KeywordType,System.String)">
            <summary>Constructor</summary>
            <param name="keywordPanel">KeywordPanel object which provides access to data on the KeywordPanel.</param>
            <param name="existingKeywordRecords">The stored Document KeywordRecords.</param>
            <param name="scanQueue">ScanQueue in which the Document resides in.</param>
            <param name="focusedKeywordType">The KeywordType of the focused Keyword.</param>
            <param name="focusedKeywordValue">The value of the focused Keyword.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueKeywordFocusEventResults">
            <summary>EventResults of a ScanQueue Keyword Focus EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueKeywordFocusEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the IndexKeywordPanel.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs">
            <summary>Arguments available in a ScanQueue Point and Shoot Indexing EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.ExistingKeywordRecords">
            <summary>The stored Document KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.FieldText">
            <summary>The text read from the Document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.KeywordType">
            <summary>The KeywordType of the Keyword being indexed.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.Results">
            <summary>The results object which allows modifications to be made to FieldText.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document being indexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.#ctor(Hyland.Unity.Application,Hyland.Unity.ScanQueue,System.Int64,Hyland.Unity.IndexKeywordPanel,Hyland.Unity.KeywordType,System.String)">
            <summary>Constructor</summary>
            <param name="app">The connected Application object.</param>
            <param name="scanQueue">The ScanQueue which the Document being indexed resides in.</param>
            <param name="documentID">ID of the document.</param>
            <param name="keywordPanel">The KeywordPanel.</param>
            <param name="keywordType">The KeywordType of the Keyword being indexed.</param>
            <param name="fieldText">The text read from the Document.</param>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePointAndShootIndexingEventArgs.IsFieldTextValid">
            <summary>Determines whether FieldText is valid for the KeywordType.</summary>
            <returns>True if FieldText is valid for KeywordType.</returns>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePointAndShootIndexingEventResults">
            <summary>EventResults of a ScanQueue Point and Shoot Indexing EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingEventResults.FieldText">
            <summary>The field text after being modified by the script.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePointAndShootIndexingEventResults.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="fieldText">The field text.</param>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePointAndShootIndexingEventResults.SetFieldText(System.String)">
            <summary>Sets the field text which will be applied to the Keyword.</summary>
            <param name="value">The value to which the field text is set.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePointAndShootIndexingScriptResult">
            <summary>The result of a ScanQueue Point and Shoot Indexing EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingScriptResult.Cancel">
            <summary>The field text read from the Document is not applied to the Keyword.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingScriptResult.Continue">
            <summary>The field text read from the Document is applied to the Keyword.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePointAndShootIndexingScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostIndexEventArgs">
            <summary>Scan Batch Indexing event args. Arguments available OnExecute.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostIndexEventArgs.RemoveKeywordLocks">
            <summary>When set, any <see cref="T:Hyland.Unity.Keyword" />s that are locked in the
                <see cref="T:Hyland.Unity.IndexKeywordPanel" /> will be unlocked after the script is executed.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostIndexEventArgs.ScanBatch">
            <summary>The current ScanBatch.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostIndexEventArgs.ScriptResult">
            <summary>The result of the event. ScanQueuePostIndexEventResult.Continue by default.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostIndexEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostIndexEventResult">
            <summary>Results of a ScanQueue Post-Index EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostIndexEventResult.Continue">
            <summary>The script executed successfully and indexing should continue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostIndexEventResult.Review">
            <summary>The Document remains the active Document for indexing.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostIndexEventResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostReindexEventArgs">
            <summary>Arguments available in a ScanQueue Post Reindex EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostReindexEventArgs.RemoveKeywordLocks">
            <summary>When set, any <see cref="T:Hyland.Unity.Keyword" />s that are locked in the
                <see cref="T:Hyland.Unity.IndexKeywordPanel" /> will be unlocked after the script is executed.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostReindexEventArgs.ScanQueue">
            <summary>ScanQueue which the Document being reindexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostReindexEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostReindexEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePostReindexEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="scanQueue">The ScanQueue which the Document being reindexed resides in.</param>
            <param name="document">The Document being reindexed.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostReindexScriptResult">
            <summary>Results of a ScanQueue Post Reindex EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostReindexScriptResult.Cancel">
            <summary>Reindexing is canceled.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostReindexScriptResult.Continue">
            <summary>The Document is reindexed.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostReindexScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostSecondaryIndexEventArgs">
            <summary>Arguments available to a ScanQueue Post Secondary Index EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSecondaryIndexEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document being indexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSecondaryIndexEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePostSecondaryIndexEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="scanQueue">The ScanQueue which the Document being indexed resides in.</param>
            <param name="document">The Document being indexed.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePreIndexEventArgs">
            <summary>Arguments available in a ScanQueue Pre-Index EventSript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexEventArgs.ExistingKeywordRecords">
            <summary>The stored Document KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexEventArgs.Results">
            <summary>The results object which allows modifications to be made to the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document being indexed resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePreIndexEventArgs.#ctor(Hyland.Unity.IndexKeywordPanel,Hyland.Unity.KeywordRecordList,Hyland.Unity.ScanQueue)">
            <summary>Constructor</summary>
            <param name="keywordPanel">KeywordPanel object which provides access to data on the KeywordPanel.</param>
            <param name="existingKeywordRecords">The stored Document KeywordRecords.</param>
            <param name="scanQueue">ScanQueue which the Document resides in.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePreIndexEventResults">
            <summary>EventResults of a ScanQueue Pre-Index EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the IndexKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePreIndexEventResults.#ctor(Hyland.Unity.IndexKeywordPanel)">
            <summary>Constructor</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePreIndexScriptResult">
            <summary>Results of a ScanQueue Pre-Index EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexScriptResult.Append">
            <summary>Append the current Document to the previous Document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexScriptResult.Continue">
            <summary>The script executed successfully and indexing should continue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexScriptResult.DeleteDocument">
            <summary>Delete the current Document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexScriptResult.Review">
            <summary>The Document remains the active Document for indexing.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexScriptResult.ScanMore">
            <summary>Scan more pages into the current Document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexScriptResult.StartNewDocument">
            <summary>Start a new Document with the current page.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexScriptResult.StopIndexing">
            <summary>Quit the indexing process.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreIndexScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePreIndexScriptResult.#ctor(Hyland.Unity.InternalExecutionStatus)">
            <summary>Constructor</summary>
            <param name="indexingEventExecutionStatus">Result of the event</param>
        </member>
        <member name="T:Hyland.Unity.IUnityEvent">
            <summary>Base interface for Unity Events</summary>
        </member>
        <member name="T:Hyland.Unity.Event.PropertyBag">
            <summary>A property bag used in IClientScripts.</summary>
        </member>
        <member name="P:Hyland.Unity.Event.PropertyBag.Count">
            <summary>The count of the values of the PropertyBag.</summary>
        </member>
        <member name="P:Hyland.Unity.Event.PropertyBag.IsSynchronized">
            <summary>Gets a value indicating whether access to the property bag is synchronized (thread safe).</summary>
        </member>
        <member name="P:Hyland.Unity.Event.PropertyBag.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the property bag.</summary>
        </member>
        <member name="P:Hyland.Unity.Event.PropertyBag.IsFixedSize">
            <summary>Gets a value indicating whether the property bag has a fixed size.</summary>
        </member>
        <member name="P:Hyland.Unity.Event.PropertyBag.IsReadOnly">
            <summary>Gets a value indicating whether the property bag is read-only.</summary>
        </member>
        <member name="P:Hyland.Unity.Event.PropertyBag.Keys">
            <summary>Gets an System.Collections.ICollection containing the keys in the property bag.</summary>
        </member>
        <member name="P:Hyland.Unity.Event.PropertyBag.Values">
            <summary>Gets an System.Collections.ICollection containing the values in the property bag.</summary>
        </member>
        <member name="P:Hyland.Unity.Event.PropertyBag.Item(System.Object)">
            <summary>Gets or sets the value associated with the specified key.</summary>
            <param name="key">The key whose value to get or set.</param>
            <returns>
                The value associated with the specified key. If the specified key is not found, attempting
                to get it returns null, and attempting to set it creates a new element using the specified key.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.#ctor">
            <summary>Initializes the object.</summary>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.#ctor(System.Int32)">
            <summary>Initializes the object.</summary>
            <param name="capacity">
                The approximate number of elements that the property bag object can
                initially contain.
            </param>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.ContainsKey(System.Object)">
            <summary>Determines whether the property bag contains a specific key.</summary>
            <param name="key">The key to locate.</param>
            <returns>True if the key is found; otherwise false.</returns>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.CopyTo(System.Array,System.Int32)">
            <summary>
                This method should not be used from Unity scripts. This method can throw a Remoting
                exception if used from a script.
            </summary>
            <param name="array">Array to copy values to.</param>
            <param name="index">Array index to start at.</param>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.Add(System.Object,System.Object)">
            <summary>Add an item to the property bag.</summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.Clear">
            <summary>Clears the PropertyBag</summary>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.Contains(System.Object)">
            <summary>Determines whether the property bag contains a specific key.</summary>
            <param name="key">The key to locate.</param>
            <returns>True if the key is found; otherwise false.</returns>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.GetEnumerator">
            <summary>Returns an System.Collections.IDictionaryEnumerator that iterates through property bag.</summary>
            <returns>An System.Collections.IDictionaryEnumerator for the property bag.</returns>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.Remove(System.Object)">
            <summary>Removes the element with the specified key from the property bag.</summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Hyland.Unity.Event.PropertyBag.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
                An System.Collections.IEnumerator object that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="T:Hyland.Unity.CustomProcessingScanBatch">
            <summary>Scan Batch that is specifically used for the ScanQueueCustomProcessingUnindexedEventArgs</summary>
        </member>
        <member name="M:Hyland.Unity.CustomProcessingScanBatch.Transition">
            <summary>Not allowed to Transition batches in ScanQueueCustomProcessingScripts</summary>
        </member>
        <member name="T:Hyland.Unity.IScanQueueCustomProcessingScript">
            <summary>
                The custom processing script executes on a configured <see cref="T:Hyland.Unity.ScanQueue" /> with the
                "Perform Custom Processing" option enabled.
            </summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueueCustomProcessingScript.OnBatchBegin(Hyland.Unity.Application,Hyland.Unity.ScanQueueCustomProcessingBatchEventArgs)">
            <summary>The method that will be invoked before any <see cref="T:Hyland.Unity.Document" />s are processed.</summary>
            <param name="application">A connected Unity API <see cref="T:Hyland.Unity.Application" /> instance.</param>
            <param name="args">Arguments passed in to provide access to the <see cref="T:Hyland.Unity.ScanQueue" />.</param>
        </member>
        <member name="M:Hyland.Unity.IScanQueueCustomProcessingScript.OnBatchEnd(Hyland.Unity.Application,Hyland.Unity.ScanQueueCustomProcessingBatchEventArgs)">
            <summary>
                The method that will be invoked after all of the <see cref="T:Hyland.Unity.Document" />s have been
                processed.
            </summary>
            <param name="application">A connected Unity API <see cref="T:Hyland.Unity.Application" /> instance.</param>
            <param name="args">Arguments passed in to provide access to the <see cref="T:Hyland.Unity.ScanQueue" />.</param>
        </member>
        <member name="M:Hyland.Unity.IScanQueueCustomProcessingScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueCustomProcessingEventArgs)">
            <summary>The method that will be invoked on each individual <see cref="T:Hyland.Unity.Document" /> in the
                <see cref="T:Hyland.Unity.ScanBatch" />.</summary>
            <param name="application">A connected Unity API <see cref="T:Hyland.Unity.Application" /> instance.</param>
            <param name="args">Arguments passed in to provide access to the
                <see cref="T:Hyland.Unity.Document" /> and <see cref="T:Hyland.Unity.ScanQueue" />. Also allows a
                <see cref="T:Hyland.Unity.ScanQueueCustomProcessingScriptResult" /> result to be set.</param>
            <remarks>This will not be called if the <see cref="T:Hyland.Unity.Document" />s in the <see cref="T:Hyland.Unity.ScanBatch" />
                have not been indexed.</remarks>
        </member>
        <member name="M:Hyland.Unity.IScanQueueCustomProcessingScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueCustomProcessingUnindexedEventArgs)">
            <summary>The method that will be invoked on each individual <see cref="T:Hyland.Unity.UnindexedDocument" /> in the
                <see cref="T:Hyland.Unity.ScanBatch" />.</summary>
            <param name="application">A connected Unity API <see cref="T:Hyland.Unity.Application" /> instance.</param>
            <param name="args">Arguments passed in to provide access to the
                <see cref="T:Hyland.Unity.UnindexedDocument" /> and <see cref="T:Hyland.Unity.ScanQueue" />. Also allows a
                <see cref="T:Hyland.Unity.ScanQueueCustomProcessingScriptResult" /> result to be set.</param>
            <remarks>This will not be called if the <see cref="T:Hyland.Unity.Document" />s in the <see cref="T:Hyland.Unity.ScanBatch" />
                have been indexed.</remarks>
        </member>
        <member name="T:Hyland.Unity.ScanQueueCustomProcessingBatchEventArgs">
            <summary>Represents the arguments that are passed to the
                <see cref="T:Hyland.Unity.IScanQueueCustomProcessingScript" /> event's Begin and End methods.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingBatchEventArgs.ScanQueue">
            <summary>The current <see cref="P:Hyland.Unity.ScanQueueCustomProcessingBatchEventArgs.ScanQueue" /> that the custom action script is running on.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueueCustomProcessingEventArgs">
            <summary>Represents the arguments that are passed to the
                <see cref="T:Hyland.Unity.IScanQueueCustomProcessingScript" /> event when the Documents have been indexed.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingEventArgs.Document">
            <summary>The current <see cref="T:Hyland.Unity.Document" />.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingEventArgs.ScanQueue">
            <summary>The current <see cref="P:Hyland.Unity.ScanQueueCustomProcessingEventArgs.ScanQueue" /> that the custom action script is running on.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingEventArgs.ScriptResult">
            <summary>Set this to change the result status of the script. Defaults to Continue.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueueCustomProcessingScriptResult">
            <summary>Potential result state for the Scan Queue Custom Processing Script.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueueCustomProcessingScriptResult.InternalScanQueueCustomProcessingScriptResult">
            <summary>Potential result state for the Scan Queue Custom Processing Script.</summary>
        </member>
        <member name="F:Hyland.Unity.ScanQueueCustomProcessingScriptResult.InternalScanQueueCustomProcessingScriptResult.Continue">
            <summary>The script has executed successfully, the <see cref="T:Hyland.Unity.ScanBatch" /> will be transitioned.</summary>
        </member>
        <member name="F:Hyland.Unity.ScanQueueCustomProcessingScriptResult.InternalScanQueueCustomProcessingScriptResult.Cancel">
            <summary>Cancels the operation, the <see cref="T:Hyland.Unity.ScanBatch" /> will not be transitioned.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingScriptResult.Cancel">
            <summary>Cancels the operation, the <see cref="T:Hyland.Unity.ScanBatch" /> will not be transitioned.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingScriptResult.Continue">
            <summary>The script has executed successfully, the <see cref="T:Hyland.Unity.ScanBatch" /> will be transitioned.</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueueCustomProcessingUnindexedEventArgs">
            <summary>Represents the arguments that are passed to the
                <see cref="T:Hyland.Unity.IScanQueueCustomProcessingScript" /> event when the Documents have not been indexed.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingUnindexedEventArgs.ScanQueue">
            <summary>The current <see cref="P:Hyland.Unity.ScanQueueCustomProcessingUnindexedEventArgs.ScanQueue" /> that the custom action script is running on.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingUnindexedEventArgs.ScriptResult">
            <summary>Set this to change the result status of the script. Defaults to <c>true</c>.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueCustomProcessingUnindexedEventArgs.UnindexedDocument">
            <summary>The current <see cref="T:Hyland.Unity.UnindexedDocument" />.</summary>
        </member>
        <member name="T:Hyland.Unity.IScanQueuePostScanEventScript">
            <summary>ScanQueue - Post Scan Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePostScanEventScript.OnFullIndexExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePostScanFullIndexEventArgs)">
            <summary>Method executed for each Document which is fully indexed after it is scanned.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueuePostScanFullIndexEventArgs object which contains parameters for the
                current interface.
            </param>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePostScanEventScript.OnPendingIndexExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePostScanEventArgs)">
            <summary>Method executed for each Document which requires further indexing after it is scanned.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueuePostScanEventArgs object which contains parameters for the current
                interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueuePostSweepEventScript">
            <summary>ScanQueue - Post Sweep Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePostSweepEventScript.OnFullIndexExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePostSweepFullIndexEventArgs)">
            <summary>Method executed for each Document which is fully indexed after it is swept.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueuePostSweepFullIndexEventArgs object which contains parameters for
                the current interface.
            </param>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePostSweepEventScript.OnPendingIndexExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePostSweepEventArgs)">
            <summary>Method executed for each Document which requires further indexing after it is swept.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueuePostSweepEventArgs object which contains parameters for the current
                interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueuePreScanEventScript">
            <summary>ScanQueue - Pre Scan Event Handler</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueuePreScanEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueuePreScanEventArgs)">
            <summary>Method executed once before Documents are scanned.</summary>
            <param name="app">The connected Application object</param>
            <param name="args">
                The ScanQueuePreScanEventArgs object which contains parameters for the current
                interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IScanQueueProcessInputFileListEventScript">
            <summary>ScanQueue - Process Input File List Event Handler.</summary>
        </member>
        <member name="M:Hyland.Unity.IScanQueueProcessInputFileListEventScript.OnItemExecute(Hyland.Unity.Application,Hyland.Unity.ScanQueueProcessInputFileListEventArgs)">
            <summary>Method executed before processing a list of files.</summary>
            <param name="app">The connected Application object.</param>
            <param name="args">
                The ScanQueueProcessInputFileListEventArgs object which contains parameters for
                the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.ScanSettingUpdates">
            <summary>Provides access to methods which can be used to modify scanning settings.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanSettingUpdates.IsModified">
            <summary>Internal use only. Returns true if modifications were made to the ScanMode or ScanFormat.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanSettingUpdates.ScanFormat">
            <summary>Internal use only. The ScanFormat name.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanSettingUpdates.ScanMode">
            <summary>Internal use only. The ScanMode setting.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanSettingUpdates.#ctor(Hyland.Unity.ScanMode,Hyland.Unity.ScanFormat,Hyland.Unity.IndexKeywordPanelUpdates)">
            <summary>Constructor</summary>
            <param name="scanMode">The ScanMode setting.</param>
            <param name="scanFormat">Name of the ScanFormat.</param>
            <param name="keywordPanelUpdate">The associated KeywordPanelUpdates object.</param>
        </member>
        <member name="M:Hyland.Unity.ScanSettingUpdates.SetScanFormat(Hyland.Unity.ScanFormat)">
            <summary>Sets the ScanFormat.</summary>
            <param name="scanFormat">The ScanFormat.</param>
        </member>
        <member name="M:Hyland.Unity.ScanSettingUpdates.SetScanMode(Hyland.Unity.ScanMode)">
            <summary>Sets the ScanMode.</summary>
            <param name="scanMode">The ScanMode.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostScanEventArgs">
            <summary>Arguments available in a ScanQueue Post Scan EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostScanEventArgs.ScanQueue">
            <summary>The ScanQueue which the scanned Document resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostScanEventArgs.UnindexedDocument">
            <summary>The current UnindexedDocument.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostScanEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePostScanEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.UnindexedDocument)">
            <summary>Constructor</summary>
            <param name="scanQueue">ScanQueue in which the Document resides in.</param>
            <param name="unindexedDocument">The UnindexedDocument</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostScanFullIndexEventArgs">
            <summary>Arguments available in a ScanQueue Post Scan Full Index EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostScanFullIndexEventArgs.ScanQueue">
            <summary>The ScanQueue which the scanned Document resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostScanFullIndexEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePostScanFullIndexEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.Document)">
            <summary>Constructor</summary>
            <param name="scanQueue">ScanQueue in which the Document resides in.</param>
            <param name="document">The Document</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostSweepEventArgs">
            <summary>Arguments available in a ScanQueue Post Sweep Pending Index EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSweepEventArgs.FileInfos">
            <summary>The files swept to create the document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSweepEventArgs.ScanQueue">
            <summary>The ScanQueue which the swept Document resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSweepEventArgs.UnindexedDocument">
            <summary>The current UnindexedDocument.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSweepEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePostSweepEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.UnindexedDocument,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>Constructor</summary>
            <param name="scanQueue">ScanQueue which the Document resides in.</param>
            <param name="unindexedDocument">The UnindexedDocument</param>
            <param name="sweepFiles">The files which were swept to create this Document</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePostSweepFullIndexEventArgs">
            <summary>Arguments available in a Scan Queue Post Sweep Full Index EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSweepFullIndexEventArgs.FileInfos">
            <summary>The files swept to create the document.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSweepFullIndexEventArgs.ScanQueue">
            <summary>The ScanQueue which the swept Document resides in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePostSweepFullIndexEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePostSweepFullIndexEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.Document,System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>Constructor</summary>
            <param name="scanQueue">ScanQueue which the Document resides in.</param>
            <param name="document">The UnindexedDocument</param>
            <param name="sweepFiles">The files which were swept to create this Document</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePreScanEventArgs">
            <summary>Arguments available in a ScanQueue Pre-Scan EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanEventArgs.ExistingKeywordRecords">
            <summary>The stored Document KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanEventArgs.Results">
            <summary>
                The results object which allows modifications to be made to the KeywordPanel and scan
                settings.
            </summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanEventArgs.ScanQueue">
            <summary>The ScanQueue which the Document about to be scanned will reside in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanEventArgs.ScriptResult">
            <summary>The script result. Defaults to Continue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePreScanEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.IndexKeywordPanel,Hyland.Unity.KeywordRecordList)">
            <summary>Constructor</summary>
            <param name="scanQueue">ScanQueue in which the Document resides in.</param>
            <param name="keywordPanel">KeywordPanel object which provides access to data on the KeywordPanel.</param>
            <param name="existingKeywordRecords">The stored Document KeywordRecords.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePreScanEventResults">
            <summary>EventResults of a ScanQueue Pre-Scan EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanEventResults.ScanSettingUpdates">
            <summary>Results containing updates to ScanSettings.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePreScanEventResults.#ctor(Hyland.Unity.IndexKeywordPanel)">
            <summary>Constructor</summary>
        </member>
        <member name="T:Hyland.Unity.ScanQueuePreScanScriptResult">
            <summary>The result of a ScanQueue Pre-Scan Event Script.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanScriptResult.Cancel">
            <summary>The script was not executed successfully and scanning should be aborted.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanScriptResult.Continue">
            <summary>The script executed successfully and scanning should continue.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueuePreScanScriptResult.ExecutionStatus">
            <summary>The selected ExecutionStatus.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueuePreScanScriptResult.#ctor(Hyland.Unity.InternalExecutionStatus)">
            <summary>Constructor</summary>
            <param name="scanningEventExecutionStatus">Result of the event</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueProcessInputFileListEventArgs">
            <summary>Arguments available in a ScanQueue Process Input File List EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueProcessInputFileListEventArgs.FileInfoList">
            <summary>The files which will be processed.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueProcessInputFileListEventArgs.KeywordPanel">
            <summary>The IndexKeywordPanel object, which provides access to data on the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueProcessInputFileListEventArgs.Results">
            <summary>The results object which allows modifications to be made to the KeywordPanel.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueProcessInputFileListEventArgs.ScanQueue">
            <summary>The ScanQueue which the files will be processed in.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueProcessInputFileListEventArgs.StatusMessage">
            <summary>Used to control the Popup Window that appears after a script executes and its message.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueProcessInputFileListEventArgs.#ctor(Hyland.Unity.ScanQueue,Hyland.Unity.IndexKeywordPanel,System.Collections.Generic.IList{System.IO.FileInfo})">
            <summary>Constructor</summary>
            <param name="scanQueue">The ScanQueue which the files will be processed in.</param>
            <param name="keywordPanel">The KeywordPanel.</param>
            <param name="fileInfoList">Collection of files to be processed.</param>
        </member>
        <member name="T:Hyland.Unity.ScanQueueProcessInputFileListEventResults">
            <summary>EventResults of a ScanQueue Process Input File List EventScript.</summary>
        </member>
        <member name="P:Hyland.Unity.ScanQueueProcessInputFileListEventResults.KeywordPanelUpdates">
            <summary>Results containing updates to the IndexKeywordPanel.</summary>
        </member>
        <member name="M:Hyland.Unity.ScanQueueProcessInputFileListEventResults.#ctor(Hyland.Unity.IndexKeywordPanel)">
            <summary>Constructor</summary>
            <param name="keywordPanel">The KeywordPanel.</param>
        </member>
        <member name="T:Hyland.Unity.ISchedulableScript">
            <summary>Script that executes in the Unity Scheduler.</summary>
        </member>
        <member name="M:Hyland.Unity.ISchedulableScript.OnExecute(Hyland.Unity.Application,Hyland.Unity.SchedulableEventArgs)">
            <summary>Method that will be invoked when a Unity Scheduler Timer fires.</summary>
            <param name="app">A connected Unity API <see cref="T:Hyland.Unity.Application" />.</param>
            <param name="args">Arguments to give context to the script and allow the schedule to be canceled.</param>
        </member>
        <member name="T:Hyland.Unity.SchedulableEventArgs">
            <summary>The Arguments to give context to the <see cref="T:Hyland.Unity.ISchedulableScript" />.</summary>
        </member>
        <member name="P:Hyland.Unity.SchedulableEventArgs.IsCanceled">
            <summary>When <c>true</c>, this indicates that the schedule has been canceled.</summary>
            <remarks>
                The scheduler will not kill a running task. This property is exposed to allow the script
                developer know when a schedule has been canceled.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.SchedulableEventArgs.Results">
            <summary>Sets the results of the script.</summary>
        </member>
        <member name="T:Hyland.Unity.SchedulableEventResults">
            <summary>The results of that can be set on an <see cref="T:Hyland.Unity.ISchedulableScript" />.</summary>
        </member>
        <member name="P:Hyland.Unity.SchedulableEventResults.ItemsProcessed">
            <summary>Sets the number of items processed to be displayed in the Scheduler UI.</summary>
            <remarks>
                This property is not required. It is useful for scripts that are iterating over a number
                of items to be displayed in the Scheduler Management UI.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.SchedulableEventResults.Message">
            <summary>This message will be used to display the error condition.</summary>
        </member>
        <member name="P:Hyland.Unity.SchedulableEventResults.Status">
            <summary>Sets whether the script was successful or resulted in an error.</summary>
            <remarks>If set to Error, the timer will be paused until manually reset.</remarks>
        </member>
        <member name="T:Hyland.Unity.SchedulableStatus">
            <summary>The available output statuses that can be set on an <see cref="T:Hyland.Unity.ISchedulableScript" />.</summary>
        </member>
        <member name="P:Hyland.Unity.SchedulableStatus.Error">
            <summary>The script has encountered an error.</summary>
        </member>
        <member name="P:Hyland.Unity.SchedulableStatus.Success">
            <summary>The script has executed successfully.</summary>
        </member>
        <member name="T:Hyland.Unity.StatusMessage">
            <summary>This class is used to control the Popup window that appears after a script executes.</summary>
        </member>
        <member name="P:Hyland.Unity.StatusMessage.Enabled">
            <summary>Enable/Disable popup message window</summary>
        </member>
        <member name="P:Hyland.Unity.StatusMessage.Message">
            <summary>
                Message that should appear in the PopUp window. Note: Maximum message length is 255
                characters.
            </summary>
        </member>
        <member name="M:Hyland.Unity.StatusMessage.#ctor">
            <summary>Represents the Script Status Window</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.CustomActionForm">
            <summary>
                This form instance type is used when running a Unity Script from a Custom Action on the
                Form. The instance data comes from the form instance that is open in a client.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.CustomActionForm.ActiveNestedTableItem">
            <summary>
                The active nested table item where a custom action was triggered.  May be null when the
                custom action was not triggered inside a nested table.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.CustomActionForm.ActiveRepeaterItem">
            <summary>
                The active repeater item where a custom action was triggered.  May be null when the custom
                action was not triggered inside a repeater.
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.CustomActionForm.CreateUnityFormModifier">
            <summary>
                Returns a FormModifier type to allow making changes to the form instance.  In the Unity
                Script context, only one modifier instance can be created. Subsequent calls to
                CreateUnityFormModifier will return the original instance.
            </summary>
            <returns>The Unity Form modifier.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.CustomActionForm.PopulateFormData">
            <summary>
                PopulateFormData does not apply for a Unity Script form instance, since data will be
                populated from the client opened instance, rather than the server.
            </summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.CustomActionFormModifier">
            <summary>
                The CustomActionFormModifier tracks changes that are applied in a Unity Script context
                that was triggered from a Custom Action. Adding form value and repeater changes to this type
                will be applied when the script execution completes.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.CustomActionFormModifier.ChangesApplied">
            <summary>
                Tracks whether changes were applied or not.  When changes are made, but not applied, we
                don't send anything to the runtime.
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.CustomActionFormModifier.#ctor(Hyland.Unity.Application,Hyland.Unity.UnityForm.Form)">
            <summary>Creates the modifier type and includes the existing instance data.</summary>
            <param name="app"></param>
            <param name="formInstance"></param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.CustomActionFormModifier.ApplyChanges">
            <summary>
                The ApplyChanges method for a CustomActionFormModifier type will indicate the changes made
                to this modifier will be applied. The changes made will be applied when the Unity Script
                execution returns the result values to the client.
            </summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.CustomActionValueField">
            <summary>ValueField type that is used when running a Unity Script from a Custom Action.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.CustomActionValueField.SetValue(System.Object)">
            <summary>Handles setting a deserialized value from the runtime to the API instance type.</summary>
            <param name="newValue">The new value to be set.</param>
        </member>
        <member name="T:Hyland.Unity.UnityForm.IUnityFormCustomActionEventScript">
            <summary>Represents a script that is run from a Unity Form Custom Action.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.IUnityFormCustomActionEventScript.OnCustomActionExecuteAction(Hyland.Unity.Application,Hyland.Unity.UnityForm.UnityFormCustomActionEventArgs)">
            <summary>
                The OnCustomActionExecuteAction method is executed when the conditions on a Custom Action
                are true and the Action for Execute Unity Script is configured.
            </summary>
            <param name="app">The connected application.</param>
            <param name="args">
                The event args contains the existing form instance data, as well as the result
                form instance data.
            </param>
        </member>
        <member name="T:Hyland.Unity.UnityForm.UnityFormCustomActionEventArgs">
            <summary>
                UnityFormCustionActionEventArgs are provided to the Execute Unity Script Interface for
                Unity Forms.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.UnityFormCustomActionEventArgs.FormInstance">
            <summary>The FormInstance contains the existing data from the open form.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.UnityFormCustomActionEventArgs.#ctor(Hyland.Unity.UnityForm.CustomActionForm)">
            <summary>
                Creates a new instance of the args type.  This defines the form instance data and
                modifier.
            </summary>
            <param name="formInstance">The form instance data</param>
        </member>
        <member name="T:Hyland.Unity.UnityForm.EditableNestedTableItem">
            <summary>Used for editing Fields in a Nested Table Item.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.EditableRepeaterItem">
            <summary>Used for editing Fields in a Repeater Item.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.EditableRepeaterItem.Fields">
            <summary>(Obsolete) The Fields on the Editable RepeaterItem. Please use AllFields property.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2">
            <summary>Base type used for editing Fields in a Repeater Item.</summary>
            <typeparam name="TDefinition">The repeater definition</typeparam>
            <typeparam name="TItem">The repeater item</typeparam>
        </member>
        <member name="P:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.AllFields">
            <summary>The Fields on the Editable RepeaterItem.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.Hyland#Unity#IIndexedByID#ID">
            <summary>ID of the repeater item. This also indicates sort order.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.ChangeItem">
            <summary>ChangeItem tracks field modifications for this repeater item.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.OriginalItem">
            <summary>OriginalItem keeps the original field values before making changes.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.ClearFieldValue(Hyland.Unity.UnityForm.Field)">
            <summary>Clear the field's value on the form. Please use ClearFieldValue(XmlField field) method.</summary>
            <param name="field">Field to clear.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.SetFieldValue(Hyland.Unity.UnityForm.Field)">
            <summary>Set a Field value on the Editable RepeaterItem.</summary>
            <param name="field">Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.ClearFieldValue(System.String)">
            <summary>Clear the field's value on the form.</summary>
            <param name="fieldName">Name of the field to clear.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.SetFieldValue(System.String,System.String)">
            <summary>Set a Field value on the Editable RepeaterItem.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.SetFieldValue(System.String,System.Decimal)">
            <summary>Set a Field value on the Editable RepeaterItem.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.SetFieldValue(System.String,System.Double)">
            <summary>Set a Field value on the Editable RepeaterItem.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.SetFieldValue(System.String,System.DateTime)">
            <summary>Set a Field value on the Editable RepeaterItem.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.SetFieldValue(System.String,System.Int64)">
            <summary>Set a Field value on the Editable RepeaterItem.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.EditableRepeaterItemBase`2.validateIsValueFieldDefinition(Hyland.Unity.UnityForm.FieldDefinition)">
            <summary>
                Currently this is the only type of field that can be modified. It's just a convenient way
                to get the typed field for now. May change when signatures are added.
            </summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FieldDataType">
            <summary>
                Indicates the type of data stored in a Unity Form field. Drawing fields are not supported
                by the Unity API.
            </summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.Numeric9">
            <summary>Numeric up to 9 Digits</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.Numeric20">
            <summary>Numeric up to 20 Digits</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.FloatingPoint">
            <summary>Floating Point</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.Date">
            <summary>Date</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.AlphaNumeric">
            <summary>Alphanumeric</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.Currency">
            <summary>Currency</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.Decimal">
            <summary>Decimal</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.Boolean">
            <summary>Boolean</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDataType.DateTime">
            <summary>Date/Time</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FieldSource">
            <summary>(Obsolete) Indicates the source of a Unity Form field.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldSource.Xml">
            <summary>Field is Xml based.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldSource.Keyword">
            <summary>Field is Keyword based.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldSource.DocumentProperty">
            <summary>Field is Document Property based.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.InternalFieldSource">
            <summary>Indicates the source of a Unity Form field.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.InternalFieldSource.Xml">
            <summary>Field is Xml based.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.InternalFieldSource.Keyword">
            <summary>Field is Keyword based.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.InternalFieldSource.DocumentProperty">
            <summary>Field is Document Property based.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.InternalFieldSource.EntityField">
            <summary> Field is of type Entity Field </summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.InternalFieldSource.WorkflowProperty">
            <summary> Field is mapped to Workflow Property </summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.InternalFieldSource.Temporary">
            <summary> Field is a temporary field </summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.Field">
            <summary>Represents a field in a Unity Form, Unity Form Repeater or Unity Form Nested Table.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.Field._alphaNumericValue">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.Field._booleanValue">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.Field._currencyFormatID">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.Field._dateTimeValue">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.Field._decimalValue">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.Field._fieldDefinition">
            <summary>Gets the template of the field.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.Field._floatingPointValue">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.Field._numeric9Value">
            <summary>Inherited.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.AlphaNumericValue">
            <summary>(Obsolete) Gets field value as string.</summary>
            <returns>Returns the field value as string.</returns>
            <remarks>
                This method throws exception if the data type is not one of the AlphaNumeric type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.CurrencyFormatID">
            <summary>(Obsolete) The currency format of the currency field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.CurrencyValue">
            <summary>(Obsolete) Gets field value as decimal.</summary>
            <returns>Returns the field value as decimal.</returns>
            <remarks>
                This method throws exception if the data type is not a CurrencyValue or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.DateTimeValue">
            <summary>(Obsolete) Gets field value as DateTime.</summary>
            <returns>Returns the field value as DateTime.</returns>
            <remarks>This method throws exception if the data type is not a DateTime or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.FieldDefinition">
            <summary>Gets the field template of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.FloatingPointValue">
            <summary>(Obsolete) Gets field value as floating point.</summary>
            <returns>Returns the field value as double.</returns>
            <remarks>
                This method throws exception if the data type is not a FloatingPoint or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.IsEmpty">
            <summary>(Obsolete) Indicates whether or not the field value is empty.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.Numeric20Value">
            <summary>(Obsolete) Gets field value as numeric (up to 20 digits).</summary>
            <returns>Returns the field value as decimal.</returns>
            <remarks>This method throws exception if the data type is not a Numeric20 or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.Numeric9Value">
            <summary>(Obsolete) Gets field value as numeric (up to 9 digits).</summary>
            <returns>Returns the field value as long.</returns>
            <remarks>This method throws exception if the data type is not a Numeric9 or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Field.Value">
            <summary>(Obsolete) Value of the field.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.Field.Clone">
            <summary>Clones the Field.</summary>
            <returns>The cloned Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.Field.throwIsBlank">
            <summary>
                Throws an error that the field is blank. Any fields that are not value types are blank,
                otherwise they are casted.
            </summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FieldList">
            <summary>A collection of Unity Form fields.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldList.NestedTableFields">
            <summary>
                Returns a collection of the Nested Table Fields in this list. This list only returns top
                table fields.  To access child table fields, use the NestedTableItem.ChildTable property.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldList.RepeaterFields">
            <summary>Returns a collection of the Repeater Fields in this list.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldList.ValueFields">
            <summary>Returns a collection of the Value Fields in this list.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldList.OldRepeaterFields">
            <summary>Returns a collection of "XML" Repeater Fields in this list.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldList.#ctor">
            <summary>Creates an instance of a Unity Form field list.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldList.#ctor(Hyland.Unity.UnityForm.ValueFieldList)">
            <summary>Creates an instance of a Unity Form field list.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldList.#ctor(Hyland.Unity.UnityForm.ValueFieldList,Hyland.Unity.UnityForm.RepeaterList,Hyland.Unity.UnityForm.NestedTableList)">
            <summary>Creates an instance of a Unity Form field list.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldList.Find(Hyland.Unity.UnityForm.FieldDefinition)">
            <summary>
                Find the field with the specified field definition. If the field is in a repeater, the
                repeater will be returned.
            </summary>
            <param name="definition">The field definition for which to find the field.</param>
            <returns>The field with or containing the specified field definition.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldList.Clone">
            <summary>Clones the FieldList.</summary>
            <returns>The cloned FieldList.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FieldDefinition">
            <summary>Represents a field, repeater field or nested table field in a Unity Form Template.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition.INVALID_FIELD_TYPE">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._currencyFormatID">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._dataType">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._defaultValue">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._mask">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._maximumLength">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._name">
            <summary>Name of the field.  This is the same as the 'ID' property in the designer.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._required">
            <summary>Inherited.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._source">
            <summary>Source of the Field.</summary>
        </member>
        <member name="F:Hyland.Unity.UnityForm.FieldDefinition._sourceParameter">
            <summary>Key of the Source of the Field (Keyword Type ID, Keyword Record ID). Not exposed directly.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinition.CurrencyFormat">
            <summary>(Obsolete) CurrencyFormat of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinition.DataType">
            <summary>(Obsolete) Data type of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinition.Mask">
            <summary>(Obsolete) Mask of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinition.MaximumLength">
            <summary>(Obsolete) MaximumLength of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinition.Required">
            <summary>(Obsolete) Indicates whether or not this field is required.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinition.Source">
            <summary>(Obsolete) Gets the source of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinition.Name">
            <summary>Name of the field. Equivalent to the field ID in the Unity Form Designer.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinition.CreateField(System.String)">
            <summary>(Obsolete) Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinition.CreateField(System.Int64)">
            <summary>(Obsolete) Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinition.CreateField(System.Double)">
            <summary>(Obsolete) Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinition.CreateField(System.Decimal)">
            <summary>(Obsolete) Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinition.CreateField(System.DateTime)">
            <summary>(Obsolete) Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinition.CreateFieldWithDefaultValue">
            <summary>(Obsolete) Creates a Unity Form Field from the Field Type.</summary>
            <returns>Field with value set to default value.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FieldDefinitionList">
            <summary>A collection of unity form fields</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinitionList.NestedTableDefinitions">
            <summary>Returns a collection of the Nested Table Definitions in this list.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinitionList.RepeaterDefinitions">
            <summary>Returns a collection of the Repeater Definitions in this list.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinitionList.ValueFieldDefinitions">
            <summary>Returns a collection of the Value Field Definitions in this list.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FieldDefinitionList.OldFieldDefinitions">
            <summary>Backwards compatibility.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinitionList.#ctor">
            <summary>Creates an instance of a Unity Form field list.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinitionList.Find(System.String,System.Boolean)">
            <summary>Find the Field Definition on the FormTemplate.</summary>
            <param name="name">Name of the field to find.</param>
            <param name="includeRepeaterDefinitions">
                Specifies whether or not Field Definitions within Repeater
                Definitions should be included in the search.
            </param>
            <returns>The field on the template for which the ID matches the name specified.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FieldDefinitionList.Find(Hyland.Unity.UnityForm.FieldSource)">
            <summary>
                (Obsolete) Returns a list of field definitions containing only Fields of the FieldSource
                Specified.
            </summary>
            <param name="fieldSource">The source of a Unity Form fields to be returned.</param>
            <returns>A list of field definitions of the source type specified.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.Form">
            <summary>Represents a Unity Form.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Form.AllFields">
            <summary>
                Gets the collection of all fields on the form. Use .ValueFields to get all Value Fields.
                Use .RepeaterFields to get all Repeater Fields. Use .NestedTableFields to get all top Nested
                Table Fields.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Form.Fields">
            <summary>(Obsolete) Gets the collection of fields on the Form.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Form.FormTemplate">
            <summary>The template of this form instance.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Form.Repeaters">
            <summary>
                (Obsolete) Gets the collection of repeaters on the Form. Please use
                AllFields.RepeaterFields to retrieve repeaters.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Form.Rendition">
            <summary>The rendition of the document that is this Unity Form.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.Form.CreateUnityFormModifier">
            <summary>Creates an instance of a Unity Form modifier.</summary>
            <returns>Unity Form modifier used to modify fields on a Unity Form.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.Form.IsFieldEditable(Hyland.Unity.UnityForm.Field)">
            <summary>Use to check if a field is editable on the form template.</summary>
            <param name="field">The field on which to check editability. For example, an XmlField.</param>
            <returns>True if the field is editable. Otherwise false.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.Form.IsFieldVisible(Hyland.Unity.UnityForm.Field)">
            <summary>Use to check if a field is visible on the form template.</summary>
            <param name="field">The field on which to check visibility.</param>
            <returns>True if the field is visible. Otherwise false.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.Form.PopulateFormData">
            <summary>Loads the underlying data for this form template.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FormModifier">
            <summary>Operations to modify an existing set of Unity Form Fields.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormModifier.FieldChangesList">
            <summary>List of pending field changes in this modification set.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormModifier.NestedTableChangesList">
            <summary>Set of pending changes related to nested table fields and rows for this modification set.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormModifier.RepeaterChangesList">
            <summary>Set of pending changes related to repeater fields and rows for this modification set.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.#ctor(Hyland.Unity.Application,Hyland.Unity.UnityForm.Form)">
            <summary>Manages field modifications on a Unity Form.</summary>
            <param name="application">Application</param>
            <param name="formInstance">The Unity Form to which changes are being applied.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.AddChildNestedTableItem(Hyland.Unity.UnityForm.NestedTable,Hyland.Unity.UnityForm.EditableNestedTableItem)">
            <summary>
                Adds the nested table item to the specified child table instance. This method should be
                used when adding a new child nested table item to an existing parent nested table item.
            </summary>
            <param name="childTable">The child nested table where the item should be added.</param>
            <param name="childItem">The new child nested table item to add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.AddChildNestedTableItem(Hyland.Unity.UnityForm.EditableNestedTableItem,Hyland.Unity.UnityForm.EditableNestedTableItem)">
            <summary>
                Adds the nested table item to the specified parent item. This method should be used when
                adding a new child nested table item to a new parent nested table item.
            </summary>
            <param name="parentItem">The parent item child item should be added.</param>
            <param name="childItem">The new item to add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.AddParentNestedTableItem(Hyland.Unity.UnityForm.EditableNestedTableItem)">
            <summary>Adds the item to the parent nested table.</summary>
            <param name="item">The editable nested table item with the information to add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.AddRepeaterItem(Hyland.Unity.UnityForm.EditableRepeaterItem)">
            <summary>Add the repeater item to the repeater.</summary>
            <param name="editableRepeaterItem">The editable repeater item with the information to add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.ClearFieldValue(Hyland.Unity.UnityForm.Field)">
            <summary>Clear the Field's value on the Form.</summary>
            <param name="field">Field to clear.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.RemoveNestedTableItem(Hyland.Unity.UnityForm.NestedTableItem)">
            <summary>Marks the specified item to be removed in the pending changes to the form.</summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.RemoveRepeaterItem(Hyland.Unity.UnityForm.RepeaterItem)">
            <summary>Remove the repeater item from the repeater.</summary>
            <param name="repeaterItem">The repeater item to delete.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.SetFieldValue(Hyland.Unity.UnityForm.Field)">
            <summary>
                Set the value of the Field on this Form instance. Only editable ValueFields can be set
                with this method.
            </summary>
            <param name="field">Field and value to set on the form.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.UpdateNestedTableItem(Hyland.Unity.UnityForm.EditableNestedTableItem)">
            <summary>Add the nested table item change as an update to the pending changes.</summary>
            <param name="item">The nested table item to update.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.UpdateRepeaterItem(Hyland.Unity.UnityForm.EditableRepeaterItem)">
            <summary>Update the repeater item in the repeater.</summary>
            <param name="editableRepeaterItem">The editable repeater item with the information to update.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.ClearFieldValue(System.String)">
            <summary>Clear the Field's value on the Form.</summary>
            <param name="fieldName">Name of the field to clear.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.SetFieldValue(System.String,System.String)">
            <summary>Set the value of the field on this form instance.</summary>
            <param name="fieldName">The name of the field for which to set the value.</param>
            <param name="value">The value to set on the field.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.SetFieldValue(System.String,System.Decimal)">
            <summary>Set the value of the field on this form instance.</summary>
            <param name="fieldName">The name of the field for which to set the value.</param>
            <param name="value">The value to set on the field.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.SetFieldValue(System.String,System.Double)">
            <summary>Set the value of the field on this form instance.</summary>
            <param name="fieldName">The name of the field for which to set the value.</param>
            <param name="value">The value to set on the field.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.SetFieldValue(System.String,System.DateTime)">
            <summary>Set the value of the field on this form instance.</summary>
            <param name="fieldName">The name of the field for which to set the value.</param>
            <param name="value">The value to set on the field.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.SetFieldValue(System.String,System.Int64)">
            <summary>Set the value of the field on this form instance.</summary>
            <param name="fieldName">The name of the field for which to set the value.</param>
            <param name="value">The value to set on the field.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.ApplyChanges">
            <summary>Apply the changes to the Unity Form.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.addRepeaterItemChange(Hyland.Unity.UnityForm.RepeaterItem,Hyland.Unity.UnityForm.FormModifier.Action)">
            <summary>Adds the item change to the list of changes.</summary>
            <param name="repeaterItem">The repeater item being changed.</param>
            <param name="action">Action being performed on the repeater item.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormModifier.validateIsValueFieldDefinition(Hyland.Unity.UnityForm.FieldDefinition)">
            <summary>
                Currently this is the only type of field that can be modified. It's just a convenient way
                to get the typed field for now. May change when signatures are added.
            </summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FormModifier.NestedTableChanges">
            <summary>Represents a set of changes to nested table.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FormModifier.NestedTableItemChange">
            <summary>Represents one row change.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FormModifier.NestedTableItemChanges">
            <summary>Represents a set of changes to nested table item.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormModifier.NestedTableItemChanges.Name">
            <summary>Name of the nested tale</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FormModifier.RepeaterChanges">
            <summary>Represents a set of changes to repeater.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FormModifier.RepeaterItemChanges">
            <summary>Represents a change to a row in a repeater.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormModifier.RepeaterItemChanges.Name">
            <summary>Name of the repeater</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FormTemplate">
            <summary>Represents a Unity Form Template</summary>
            .
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormTemplate.AllFieldDefinitions">
            <summary>
                Definitions of all Fields on the FormTemplate. Use .ValueFieldDefinitions to get all Value
                Field Definitions. Use .RepeaterDefinitions to get all Repeater Field Definitions. Use
                .NestedTableDefinitions to get all parent / top-level Nested Table Field Definitions.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormTemplate.DocumentType">
            <summary>Document Type of the Template</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormTemplate.FieldDefinitions">
            <summary>(Obsolete) Definitions of Fields on the FormTemplate.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormTemplate.Name">
            <summary>Name of the form template</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormTemplate.RepeaterDefinitions">
            <summary>Definitions of all Repeater Fields on the FormTemplate.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormTemplate.RevisionID">
            <summary>Revision ID of the form template</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.FormTemplate.ID">
            <summary>ID of the form template</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormTemplate.#ctor(Hyland.Unity.Application)">
            <summary>Unity FormTemplate constructor</summary>
            <param name="app">Current application</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormTemplate.#ctor(Hyland.Unity.Application,System.Int64,System.Int64,System.Int64,System.String,Hyland.Unity.UnityForm.ValueFieldDefinitionList,Hyland.Unity.UnityForm.ValueFieldDefinitionList,Hyland.Unity.UnityForm.RepeaterDefinitionList,Hyland.Unity.UnityForm.NestedTableDefinitionList,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
                Unity FormTemplate constructor.  This constructor is used when the context of the script
                is executing on the server.
            </summary>
            <param name="app">Current application</param>
            <param name="id">Form template ID</param>
            <param name="revisionID">Form template revision</param>
            <param name="docTypeID">Backing document type for form instances</param>
            <param name="name">Name of the template, also called the Title in the designer</param>
            <param name="valueFieldDefinitions">List of field definitions for standalone field types</param>
            <param name="calculatedFieldDefinitions">List of field definitions for calculated field types</param>
            <param name="repeaterDefinitions">List of definitions of repeaters on the form</param>
            <param name="nestedTableDefinitions">List of definitions of nested tables on the form.  </param>
            <param name="visibleFields">List of fields that are visible as configured in the template. </param>
            <param name="editableFields">List of fields that are editable as configured in the template.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormTemplate.IsFieldEditable(Hyland.Unity.UnityForm.FieldDefinition)">
            <summary>Use to check if a field is editable on the form template.</summary>
            <param name="fieldDefinition">The field on which to check editability.</param>
            <returns>True if the field is editable. Otherwise false.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormTemplate.IsFieldVisible(Hyland.Unity.UnityForm.FieldDefinition)">
            <summary>Use to check if a field is visible on the form template.</summary>
            <param name="fieldDefinition">The field on which to check visibility.</param>
            <returns>True if the field is visible. Otherwise false.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormTemplate.populateFieldAccessibility">
            <summary>
                This method populates the _visibleFields and _editableFields lists. It originally was
                named populateVisibleFields and only populated the _visibleFields list but we thought these two
                properties were likely to be checked together.
            </summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.FormTemplateList">
            <summary>A collection of Unity Form templates</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormTemplateList.#ctor">
            <summary>Creates an instance of a Unity Form Template list.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormTemplateList.Find(System.String)">
            <summary>
                Returns the first FormTemplate with the specified FormTemplateName. Throws an argument
                Exception if the formTemplateName is Null or Empty.
            </summary>
            <param name="formTemplateName">The FormTemplate Name.</param>
            <returns>The FormTemplate</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.FormTemplateList.FindAll(System.String)">
            <summary>
                Returns all the FormTemplates with the specified formTemplateName. Throws an argument
                exception if the formTemplateName is Null or Empty.
            </summary>
            <param name="formTemplateName">The FormTemplate Name.</param>
            <returns>The FormTemplateList</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.IFieldValueModifier">
            <summary>
                IFieldValueModifier defines methods that can be applied on types that allow editing field
                values.
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.IFieldValueModifier.ClearFieldValue(System.String)">
            <summary>Clear the field's value on the field modifier.</summary>
            <param name="fieldName">Name of the field to clear.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.IFieldValueModifier.SetFieldValue(System.String,System.String)">
            <summary>Set a Field value on the field modifier.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.IFieldValueModifier.SetFieldValue(System.String,System.Decimal)">
            <summary>Set a Field value on the field modifier.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.IFieldValueModifier.SetFieldValue(System.String,System.Double)">
            <summary>Set a Field value on the field modifier.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.IFieldValueModifier.SetFieldValue(System.String,System.DateTime)">
            <summary>Set a Field value on the field modifier.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.IFieldValueModifier.SetFieldValue(System.String,System.Int64)">
            <summary>Set a Field value on the field modifier.</summary>
            <param name="fieldName">Name of Field to Add.</param>
            <param name="value">Value of Field to Add.</param>
        </member>
        <member name="T:Hyland.Unity.UnityForm.NestedTable">
            <summary>Represents a nested table in a Unity Form.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.NestedTable.NestedTableItems">
            <summary>Rows in the nested table.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.NestedTable.ParentItem">
            <summary>The parent item is the parent row when the nested table is in a child table row.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTable.populateChildDefinitions">
            <summary>Updates item definition references when the FieldDefinition is changed.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.NestedTableList">
            <summary>A collection of Unity Form Nested Table Fields.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableList.Find(Hyland.Unity.UnityForm.FieldDefinition)">
            <summary>Find the nested table containing the specified field definition.</summary>
            <param name="fieldDefinition">The field definition for which to find the nested table.</param>
            <returns>The nested table containing the specified field definition.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.NestedTableDefinition">
            <summary>Represents a nested table field in a Unity Form Template.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.NestedTableDefinition.ChildTableDefinition">
            <summary>
                Represents the child table definition of this table.  May be null when there is no child
                table.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.NestedTableDefinition.ParentTableDefinition">
            <summary>
                Represents the parent table definition of this table.  May be null when it has no parent
                table.
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableDefinition.CreateEditableNestedTableItem">
            <summary>Creates a new editable item for this nested table item.</summary>
            <returns>An editable nested table item used to modify form data.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableDefinition.GetTopTableDefinition">
            <summary>Used to get the top table definition in associated with this nested table.</summary>
            <returns>Top table definition, may return current definition if it is top.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableDefinition.IsTopTable">
            <summary>Determines if this definition is a top-level table definition.</summary>
            <returns>True when the specified table is the top table. False when it is a child table.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.NestedTableDefinitionList">
            <summary>A collection of unity form nested table definitions.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableDefinitionList.#ctor">
            <summary>Creates an instance of a Unity Form nested table definition list.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.NestedTableItem">
            <summary>Represents a row in a nested table in a Unity Form.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.NestedTableItem.ChildTable">
            <summary>
                Returns the associated child table for this item.  May be null when no child table is
                configured.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.NestedTableItem.ParentTable">
            <summary>
                Represents the nested table this item belongs to.  May be null when the item has not been
                added to a table instance.
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableItem.CreateEditableNestedTableItem">
            <summary>Creates a new EditableItem type for this nested table item.</summary>
            <returns>EditableNestedTable item type that can be modified and applied to a FormModifier.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableItem.Clone">
            <summary>Clones this NestedTableItem.</summary>
            <returns>The cloned NestedTableItem</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.NestedTableItemList">
            <summary>A collection of items that have been added to the Nested Table.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableItemList.Find(Hyland.Unity.UnityForm.Field)">
            <summary>Find the first Nested Table item containing the specified field.</summary>
            <param name="field">Field to be queried.</param>
            <returns>Nested Table item with the specified field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.NestedTableItemList.FindAll(Hyland.Unity.UnityForm.Field)">
            <summary>Find all Nested Table items containing the specified field.</summary>
            <param name="field">Field to be queried.</param>
            <returns>Nested Table items with the specified field.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.Repeater">
            <summary>Represents a repeater in a Unity Form.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Repeater.RepeaterDefinition">
            <summary>Gets the definition of the repeater.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.Repeater.RepeaterItems">
            <summary>Records in the repeater.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.Repeater.populateChildDefinitions">
            <summary>Updates item definition references when the FieldDefinition is changed.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.RepeaterList">
            <summary>A collection of Unity Form Repeater Fields.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterList.Find(Hyland.Unity.UnityForm.FieldDefinition)">
            <summary>Find the repeater containing the specified field definition.</summary>
            <param name="fieldDefinition">The field definition for which to find the repeater.</param>
            <returns>The repeater containing the specified field definition.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.RepeaterBase`1">
            <summary>
                Represents an instance of a repeater type.  This can be a standard repeater or nested
                table.
            </summary>
            <typeparam name="TDefinition">The repeater definition</typeparam>
        </member>
        <member name="P:Hyland.Unity.UnityForm.RepeaterBase`1.FieldDefinition">
            <summary>Gets the template of the repeater or nested table.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterBase`1.populateChildDefinitions">
            <summary>Updates item definition references when the FieldDefinition is changed.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.RepeaterDefinition">
            <summary>Represents a repeater field in a Unity Form Template.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.RepeaterDefinition.FieldDefinitions">
            <summary>(Obsolete) The definitions of the Fields that are part of this Repeater.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.RepeaterDefinition.HasXmlFields">
            <summary>Whether or not repeater contains XML Fields.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.RepeaterDefinition.KeywordRecordType">
            <summary>Gets the KeywordRecordType of the backing keyword, if any.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterDefinition.#ctor(Hyland.Unity.Application,System.String,Hyland.Unity.KeywordRecordType,Hyland.Unity.UnityForm.ValueFieldDefinitionList,Hyland.Unity.UnityForm.ValueFieldDefinitionList)">
            <summary>Constructor for server-side creation when executing a Unity Script on a form.</summary>
            <param name="app">Unity Script application</param>
            <param name="name">Name of the repeater, or 'ID' in the designer.</param>
            <param name="keywordRecordType">Backing keyword record type when a MIKG repeater.</param>
            <param name="fieldDefinitions">Field definitions in this repeater.</param>
            <param name="calculatedFieldDefinitions">Calculated field definitions in this repeater.</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterDefinition.CreateEditableRepeaterItem">
            <summary>Creates a new editable item for this repeater.</summary>
            <returns>A repeater item for this repeater.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.RepeaterDefinitionList">
            <summary>A collection of unity form repeater definitions.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterDefinitionList.#ctor">
            <summary>Creates an instance of a Unity Form repeater definition list.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.RepeaterDefinitionBase">
            <summary>
                RepeaterDefinitionBase is the base repeatable definition type that is used for standard
                repeaters and nested tables.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.RepeaterDefinitionBase.AllFieldDefinitions">
            <summary>
                The definitions of the Fields that are part of this Repeater or Nested Table. Use
                .ValueFieldDefinitions to retrieve all ValueField Definitions in the repeatable or nested table
                container.
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterDefinitionBase.#ctor(Hyland.Unity.Application,System.String,Hyland.Unity.UnityForm.ValueFieldDefinitionList,Hyland.Unity.UnityForm.ValueFieldDefinitionList)">
            <summary>Constructor for server-side creation when executing a Unity Script on a form.</summary>
            <param name="app">Unity Script application</param>
            <param name="name">Name of the repeater, or 'ID' in the designer.</param>
            <param name="fieldDefinitions">Field definitions in this repeater.</param>
            <param name="calculatedFieldDefinitions">Calculated field definitions in this repeater.</param>
        </member>
        <member name="T:Hyland.Unity.UnityForm.RepeaterItem">
            <summary>Represents a record in a repeater in a Unity Form.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.RepeaterItem.Fields">
            <summary>(Obsolete) Fields in the repeater item.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterItem.CreateEditableRepeaterItem">
            <summary>Creates a new editable item for this repeater.</summary>
            <returns>A repeater item for this repeater.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.RepeaterItemList">
            <summary>A collection of items that have been added to the repeater.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterItemList.Find(Hyland.Unity.UnityForm.Field)">
            <summary>Find the first repeater item containing the specified field.</summary>
            <param name="field">Field to be queried.</param>
            <returns>Repeater item with the specified field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.RepeaterItemList.FindAll(Hyland.Unity.UnityForm.Field)">
            <summary>Find all repeater items containing the specified field.</summary>
            <param name="field">Field to be queried.</param>
            <returns>Repeater items with the specified field.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.RepeaterItemBase`1">
            <summary>The base class for items that exist in a standard repeater or nested table.</summary>
            <typeparam name="TDefinition">The repeater definition</typeparam>
        </member>
        <member name="P:Hyland.Unity.UnityForm.RepeaterItemBase`1.AllFields">
            <summary>
                All Fields in the RepeaterItem or NestedTableItem. Use .ValueFields to retrieve only the
                Value Fields in this repeater item or nested table item. .RepeaterFields will never return
                values. .NestedTableFields will never return values.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.RepeaterItemBase`1.Hyland#Unity#IIndexedByID#ID">
            <summary>ID of the repeater item.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.Serialization.createFieldElementList(Hyland.Unity.UnityForm.FieldList)">
            <summary>Currently it only makes sense for editable value fields to be sent here.</summary>
            <param name="fieldList"></param>
            <returns></returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.ValueField">
            <summary>
                Represents a base class for value fields in a Unity Form, Unity Form Nested Table or Unity
                Form Repeater.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.AlphaNumericValue">
            <summary>Gets field value as string.</summary>
            <returns>Returns the field value as string.</returns>
            <remarks>
                This method throws exception if the data type is not one of the AlphaNumeric type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.BooleanValue">
            <summary>Gets field value as Boolean.</summary>
            <returns>Returns the field value as bool.</returns>
            <remarks>This method throws exception if the data type is not a Boolean or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.CurrencyFormat">
            <summary>The currency format of the currency field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.CurrencyValue">
            <summary>Gets field value as decimal.</summary>
            <returns>Returns the field value as decimal.</returns>
            <remarks>
                This method throws exception if the data type is not a CurrencyValue or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.DateTimeValue">
            <summary>Gets field value as DateTime.</summary>
            <returns>Returns the field value as DateTime.</returns>
            <remarks>This method throws exception if the data type is not a DateTime or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.DecimalValue">
            <summary>Gets field value as decimal.</summary>
            <returns>Returns the field value as decimal.</returns>
            <remarks>This method throws exception if the data type is not a Decimal or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.FieldDefinition">
            <summary>Gets the value field template of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.FloatingPointValue">
            <summary>Gets field value as floating point.</summary>
            <returns>Returns the field value as double.</returns>
            <remarks>
                This method throws exception if the data type is not a FloatingPoint or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.IsEmpty">
            <summary>Indicates whether or not the field value is empty.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.Numeric20Value">
            <summary>Gets field value as numeric (up to 20 digits).</summary>
            <returns>Returns the field value as decimal.</returns>
            <remarks>This method throws exception if the data type is not a Numeric20 or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.Numeric9Value">
            <summary>Gets field value as numeric (up to 9 digits).</summary>
            <returns>Returns the field value as long.</returns>
            <remarks>This method throws exception if the data type is not a Numeric9 or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueField.Value">
            <summary>Value of the field.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueField.validateDataType(Hyland.Unity.UnityForm.FieldDataType)">
            <summary>Validates if the field is compatible with desired value.</summary>
            <param name="dataType">The data type to be validated</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueField.getValueObject">
            <summary>Gets the value of the object.</summary>
            <returns>The value object.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueField.validateFieldSet">
            <summary>Inherited.</summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.ValueFieldList">
            <summary>
                Represents a base class for lists of all value based fields in a Unity Form, Unity Form
                Nested Table or Unity Form Repeater.
            </summary>
        </member>
        <member name="T:Hyland.Unity.UnityForm.ValueFieldDefinition">
            <summary>
                Represents a base class for all value based fields in a Unity Form, Unity Form Repeater or
                Unity Form Nested Table.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueFieldDefinition.CurrencyFormat">
            <summary>CurrencyFormat of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueFieldDefinition.DataType">
            <summary>Data type of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueFieldDefinition.KeywordType">
            <summary>Gets the KeywordType of the backing keyword, if any.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueFieldDefinition.Mask">
            <summary>Mask of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueFieldDefinition.MaximumLength">
            <summary>MaximumLength of the field.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueFieldDefinition.Required">
            <summary>Indicates whether or not this field is required.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityForm.ValueFieldDefinition.WorkflowProperty">
            <summary>
            Gets the WorkflowProperty value if the field is of type WorkflowProperty
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueFieldDefinition.#ctor(Hyland.Unity.Application,System.String,System.Int64,Hyland.Unity.UnityForm.InternalFieldSource,System.String,System.Boolean,System.String,System.Int64,System.Int64)">
            <summary>Constructor used by Unity Script when creating this type server-side.</summary>
            <param name="app">Unity Script application.</param>
            <param name="name">Field name</param>
            <param name="dataType">Field data type</param>
            <param name="fieldSource">Field source type</param>
            <param name="fieldSourceParam">Field source parameter</param>
            <param name="required">Field required indicator</param>
            <param name="mask">Field mask string</param>
            <param name="maximumLength">Field maximum length</param>
            <param name="currencyFormatID">Field currency format ID</param>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueFieldDefinition.CreateField(System.String)">
            <summary>Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueFieldDefinition.CreateField(System.Int64)">
            <summary>Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueFieldDefinition.CreateField(System.Double)">
            <summary>Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueFieldDefinition.CreateField(System.Decimal)">
            <summary>Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueFieldDefinition.CreateField(System.Boolean)">
            <summary>Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueFieldDefinition.CreateField(System.DateTime)">
            <summary>Creates a Unity Form Field from the Field Type.</summary>
            <param name="value">Value to insert as the field value.</param>
            <returns>Newly created Field.</returns>
        </member>
        <member name="M:Hyland.Unity.UnityForm.ValueFieldDefinition.CreateFieldWithDefaultValue">
            <summary>Creates a Unity Form Field from the Field Type.</summary>
            <returns>Field with value set to default value.</returns>
        </member>
        <member name="T:Hyland.Unity.UnityForm.ValueFieldDefinitionList">
            <summary>A collection of ValueDefinitionBase.</summary>
        </member>
        <member name="T:Hyland.Unity.KeywordUpdates">
            <summary>Base class for update classes which modify Keywords and KeywordRecords in memory.</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordUpdates.DocumentType">
            <summary>DocumentType of the Keywords being updated.</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordUpdates.IsModified">
            <summary>True if modifications have been made to KeywordRecords.</summary>
        </member>
        <member name="P:Hyland.Unity.KeywordUpdates.KeywordRecords">
            <summary>KeywordRecordList to which updates are applied.</summary>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.#ctor(Hyland.Unity.DocumentType,Hyland.Unity.KeywordRecordList)">
            <summary>Constructor</summary>
            <param name="docType">DocumentType of the Keywords being updated.</param>
            <param name="keywordRecords">
                KeywordRecordList of the Keywords being updated. The KeywordRecords
                are cloned.
            </param>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.AddKeyword(Hyland.Unity.Keyword)">
            <summary>Adds a Keyword.</summary>
            <param name="keyword">The Keyword to add.</param>
            <remarks>
                This method will only work with KeywordTypes that are Standalone or part of a Single
                Instance Keyword Group.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.AddKeywordRecord(Hyland.Unity.EditableKeywordRecord)">
            <summary>Adds a MultiInstance KeywordRecord.</summary>
            <param name="keywordRecord">The MultiInstance record to add.</param>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.RemoveKeyword(Hyland.Unity.Keyword)">
            <summary>Removes a Keyword.</summary>
            <param name="keyword">The Keyword to remove.</param>
            <remarks>
                This method will only work with KeywordTypes that are Standalone or part of a Single
                Instance Keyword Group.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.RemoveKeywordRecord(Hyland.Unity.KeywordRecord)">
            <summary>Removes a MultiInstance KeywordRecord.</summary>
            <param name="keywordRecord">The KeywordRecord to remove.</param>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.UpdateKeyword(Hyland.Unity.Keyword,Hyland.Unity.Keyword)">
            <summary>Updates a Keyword.</summary>
            <param name="oldKeyword">The old Keyword which will be updated.</param>
            <param name="newKeyword">The Keyword which oldKeyword will be updated to.</param>
            <remarks>
                This method will only work with KeywordTypes that are Standalone or part of a Single
                Instance Keyword Group.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.UpdateKeywordRecord(Hyland.Unity.EditableKeywordRecord)">
            <summary>Updates a MultiInstance KeywordRecord with a modified record.</summary>
            <param name="keywordRecord">The modified record.</param>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.FindAndVerifyKeywordRecord(Hyland.Unity.Keyword)">
            <summary>
                Finds the KeywordRecord containing the Keyword, and verifies that it is a Standalone or
                SingleInstance type.
            </summary>
            <param name="keyword">The Keyword to find.</param>
            <returns>The KeywordRecord containing keyword.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.FindAndVerifyKeywordRecord(Hyland.Unity.KeywordType)">
            <summary>
                Finds the KeywordRecord containing the KeywordType, and verifies that it is a Standalone
                or SingleInstance type.
            </summary>
            <param name="keywordType">The KeywordType to find.</param>
            <returns>The KeywordRecord containing keywordType.</returns>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.RemoveBlankDuplicates(Hyland.Unity.EditableKeywordRecord)">
            <summary>
                Removes any blank keywords when there is another keyword of the same type that has a
                value.
            </summary>
            <param name="editableKeyRec"></param>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.UpdateKeywordRecordList(Hyland.Unity.EditableKeywordRecord)">
            <summary>
                Updates the KeywordRecordList with the changes made in an EditableKeywordRecord, and sets
                IsModified to true.
            </summary>
            <param name="editableKeyRec">The KeywordRecord which was edited.</param>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.UpdateKeywordsForNewDocumentType">
            <summary>
                Sets up the KeywordRecordList for a new document type, and attempts to merge any Keywords
                which are present on the new Document Type.
            </summary>
        </member>
        <member name="M:Hyland.Unity.KeywordUpdates.ValidateEditableRecord(Hyland.Unity.EditableKeywordRecord)">
            <summary>
                Validates an EditableKeywordRecord contains only the KeywordTypes configured for it and
                that it contains no duplicate KeywordTypes.
            </summary>
            <param name="keywordRecord">An EditableKeywordRecord.</param>
        </member>
        <member name="T:Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs">
            <summary>Workflow Event Arguments</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs.ExecutionEnv">
            <summary>
                Gets the business rules engine execution environment for the current document being
                evaluated
            </summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs.PropertyBag">
            <summary>
                Gets the property bag that retains its properties for the duration of the workflow
                operation
            </summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs.SessionPropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of the session</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs.#ctor(Hyland.Unity.Document,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.BusinessRulesEngine.ExecutionEnv)">
            <summary>Initializes this object</summary>
            <param name="document">The document being evaluated by the business rules engine</param>
            <param name="sessionPropertyBag"></param>
            <param name="scopedPropertyBag"></param>
            <param name="executionEnv"></param>
        </member>
        <member name="T:Hyland.Unity.Workflow.BusinessRulesEngine.ExecutionEnv">
            <summary>The business rules engine execution environment</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.ExecutionEnv.GetVariableProperties(System.String)">
            <summary>Gets the variable properties for the specified variable</summary>
            <param name="name">The name of the variable</param>
            <returns>The property bag containing all the properties for the specified variable.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.ExecutionEnv.GetVariableValue(System.String)">
            <summary>Gets the value of the specified variable</summary>
            <param name="name">The name of the variable requested.</param>
            <returns>The value of the variable.</returns>
        </member>
        <member name="T:Hyland.Unity.Workflow.BusinessRulesEngine.IBusinessRulesEngineScript">
            <summary>Workflow Event Interface</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.IBusinessRulesEngineScript.OnGetVariableValue(Hyland.Unity.Application,System.String,Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs)">
            <summary>
                Called by the business rules engine to retrieve the value of a variable mapped to a unity
                script
            </summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="name">The name of the rule engine variable that the rule engine is trying to retrieve</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs" /> object that contains the
                parameters for the current interface.
            </param>
            <returns>
                The value of the requested variable.  This can be null if the variable does not have a
                value
            </returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.IBusinessRulesEngineScript.OnSetVariableValue(Hyland.Unity.Application,System.String,Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue,Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue,Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs)">
            <summary>
                Called by the business rules engine to set the value of a variable mapped to a unity
                script
            </summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="name">The name of the rule engine variable that the rule engine is trying to set</param>
            <param name="oldValue">The previous value of the rule engine variable. Can be null.</param>
            <param name="newValue">The value the rule engine variable should be set to. Can be null.</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.Workflow.BusinessRulesEngine.BusinessRulesEngineEventArgs" /> object that contains the
                parameters for the current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>The value of a rule engine variable</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.IsArray">
            <summary>Determines if the value managed by this object is an array</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.TypeCode">
            <summary>
                Gets the type code of the value managed by this object.  If the value is an array then
                this is the type code of the elements that can be stored in the array.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.Value">
            <summary>Gets the value managed by this object</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Boolean)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the bool</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Byte)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the byte</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Char)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the char</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.DateTime)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the DateTime</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Decimal)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the decimal</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Double)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the double</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Int16)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the short</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Int32)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the int</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Int64)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the long</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.SByte)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the sbyte</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Single)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the float</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.String)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the string</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.UInt16)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the ushort</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.UInt32)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the uint</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.UInt64)~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="value">The value to convert</param>
            <returns>A VariableValue that represents the ulong</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Boolean[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of bool</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Byte[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of byte</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Char[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of char</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.DateTime[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of DateTime</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Decimal[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of decimal</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Double[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of double</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Int16[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of short</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Int32[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of int</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Int64[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of long</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.SByte[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of sbyte</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.Single[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of float</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.String[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of string</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.UInt16[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of ushort</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.UInt32[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of uint</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.op_Implicit(System.UInt64[])~Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue">
            <summary>Converts the specified value into an instance of VariableValue</summary>
            <param name="valueList">The array to be converted.</param>
            <returns>A VariableValue that represents the array of ulong</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.GetArrayValue``1">
            <summary>
                Gets the value of this variable.  NOTE: If the arrays data type does not match the
                requested data type then an exception is thrown.
            </summary>
            <typeparam name="T">The type of the array to be returned.</typeparam>
            <returns>The array containing the variable value.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.GetValue``1">
            <summary>Gets the value of this variable converting it to the requested type if required.</summary>
            <typeparam name="T">The type the value should be converted to</typeparam>
            <returns>Returns the value as type T.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.ToString">
            <summary>Gets a string representation of this object</summary>
            <returns>The string representation of this object</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#GetTypeCode">
            <summary>Gets the type code of this object</summary>
            <returns>The <see cref="P:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.TypeCode" /> instance.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>Converts this VariableValue to bool</summary>
            <param name="provider">The format provider to use</param>
            <returns>The bool equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>Converts this VariableValue to byte</summary>
            <param name="provider">The format provider to use</param>
            <returns>The byte equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>Converts this VariableValue to char</summary>
            <param name="provider">The format provider to use</param>
            <returns>The char equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>Converts this VariableValue to DateTime</summary>
            <param name="provider">The format provider to use</param>
            <returns>The DateTime equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>Converts this VariableValue to decimal</summary>
            <param name="provider">The format provider to use</param>
            <returns>The decimal equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>Converts this VariableValue to double</summary>
            <param name="provider">The format provider to use</param>
            <returns>The double equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>Converts this VariableValue to short</summary>
            <param name="provider">The format provider to use</param>
            <returns>The short equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>Converts this VariableValue to int</summary>
            <param name="provider">The format provider to use</param>
            <returns>The int equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>Converts this VariableValue to long</summary>
            <param name="provider">The format provider to use</param>
            <returns>The long equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>Converts this VariableValue to sbyte</summary>
            <param name="provider">The format provider to use</param>
            <returns>The sbyte equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>Converts this VariableValue to float</summary>
            <param name="provider">The format provider to use</param>
            <returns>The float equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>Converts this VariableValue to string</summary>
            <param name="provider">The format provider to use</param>
            <returns>The string equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>Converts to the specified type</summary>
            <param name="conversionType">The type that it needs to be converted to.</param>
            <param name="provider">The format provider to be used.</param>
            <returns>A object of the specified type.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>Converts this VariableValue to ushort</summary>
            <param name="provider">The format provider to use</param>
            <returns>The ushort equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>Converts this VariableValue to uint</summary>
            <param name="provider">The format provider to use</param>
            <returns>The uint equivalent of this VariableValue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.BusinessRulesEngine.VariableValue.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>Converts this VariableValue to ulong</summary>
            <param name="provider">The format provider to use</param>
            <returns>The ulong equivalent of this VariableValue</returns>
        </member>
        <member name="T:Hyland.Unity.Workflow.LifeCycleTypes">
            <summary>The types of a life cycle</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.LifeCycleTypes.Basic">
            <summary>
                The first generation of life cycle: only document is routed and work folder is used for
                related documents.
            </summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.LifeCycleTypes.Unity">
            <summary>
                The second generation of life cycle: workitem, such as document, workview object or
                managed folder etc., can be routed and portfolio is used for related workitems.
            </summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.WorkflowContentTypeFlags">
            <summary>The types of content types can be routed in a life cycle</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WorkflowContentTypeFlags.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WorkflowContentTypeFlags.Document">
            <summary>Document</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WorkflowContentTypeFlags.Folder">
            <summary>Managed Folder</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WorkflowContentTypeFlags.WorkViewObject">
            <summary>Workview Object</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WorkflowContentTypeFlags.EISMessageItem">
            <summary>EISMessage Item</summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.WFContentType">
            <summary>
                The types of the WFContentType. Numeric values should be equal to those from
                Hyland.Core.Workflow.AddIn.WorkItemContentType We cannot use the
                Hyland.Core.Workflow.AddIn.WorkItemContentType enum here as Unity must not reference the
                assembly.
            </summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WFContentType.UnKnown">
            <summary>UnKnown</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WFContentType.Document">
            <summary>Document</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WFContentType.Folder">
            <summary>Folder</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WFContentType.WorkViewObject">
            <summary>WorkView object</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WFContentType.MedicalChart">
            <summary>Medical chart</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WFContentType.EntityItem">
            <summary>Entity Item</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.WFContentType.EISMessageItem">
            <summary>EISMessage Item</summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.LifeCycle">
            <summary>Represents a workflow life cycle</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.ContentType">
            <summary>Gets the content type of workitems being routed through the life cycle.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.Icon">
            <summary>Contains the icon that is to be used to represent lifecycles of this type.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.Queues">
            <summary>Gets the list of queues that are in this life cycle that the user has rights to</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.Type">
            <summary>Gets the life cycle type, either a classic life cycle or a Unity life cycle.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.ID">
            <summary>Gets the life cycle ID</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.Name">
            <summary>Gets the life cycle name</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.BitmapID">
            <summary>Internal access to LifeCycle BitmapID</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.IconID">
            <summary>Internal access to LifeCycle IconID</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.LifeCycle.IsUnityLifeCycle">
            <summary>Internal access to LifeCycle IsUnityLifeCycle property</summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.LifeCycleList">
            <summary>A list of LifeCycles</summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.PortfolioRelation">
            <summary>Represents a portfolio relation for related workitem retrieval</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PortfolioRelation.ContentType">
            <summary>Gets the content type that the portfolio relation can be applied to</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PortfolioRelation.RelatedContentType">
            <summary>Gets the type of related content that the portfolio relation will find</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PortfolioRelation.ID">
            <summary>Gets the portfolio relation ID</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PortfolioRelation.Name">
            <summary>Gets the portfolio relation name</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.PortfolioRelation.GetRelatedDocumentList(Hyland.Unity.Document,System.Int64,Hyland.Unity.DocumentRetrievalOptions)">
            <summary>
                Gets the list of related documents based on the portfolio relation for the specified
                document.
            </summary>
            <param name="document">The Document for which to get related Documents.</param>
            <param name="maxDocuments">The maximum number of related documents to retrieve.</param>
            <param name="options">
                Used to set additional retrieval options. Note that some options may reduce
                performance; see specific options on <c>DocumentRetrievalOptions</c> for further details.
            </param>
            <returns>The list of related documents.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PortfolioRelation.GetRelatedDocumentList(Hyland.Unity.WorkView.Object,System.Int64,Hyland.Unity.DocumentRetrievalOptions)">
            <summary>
                Gets the list of related documents based on the portfolio relation for the specified
                workview object.
            </summary>
            <param name="wvObject">The WorkView Object for which to get related Documents.</param>
            <param name="maxDocuments">The maximum number of related documents to retrieve.</param>
            <param name="options">
                Used to set additional retrieval options. Note that some options may reduce
                performance; see specific options on <c>DocumentRetrievalOptions</c> for further details.
            </param>
            <returns>The list of related documents.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PortfolioRelation.GetRelatedObjectList(Hyland.Unity.Document,System.Int64,Hyland.Unity.WorkViewObjectRetrievalOptions)">
            <summary>
                Gets the list of related workview objects based on the portfolio relation for the
                specified document.
            </summary>
            <param name="document">The Document for which to get related WorkView Objects.</param>
            <param name="maxObjects">The maximum number of related WorkView Objects to retrieve.</param>
            <param name="options">Used to set additional WorkView Object Retrieval options.</param>
            <returns>The list of related WorkView Objects.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PortfolioRelation.GetRelatedObjectList(Hyland.Unity.WorkView.Object,System.Int64,Hyland.Unity.WorkViewObjectRetrievalOptions)">
            <summary>
                Gets the list of related workview objects based on the portfolio relation for the
                specified workview object.
            </summary>
            <param name="wvObject">The WorkView Object for which to get related WorkView Objects.</param>
            <param name="maxObjects">The maximum number of related WorkView Objects to retrieve.</param>
            <param name="options">Used to set additional WorkView Object Retrieval options.</param>
            <returns>The list of related WorkView Objects.</returns>
        </member>
        <member name="T:Hyland.Unity.Workflow.PortfolioRelationList">
            <summary>A list of portfolio relations</summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.PropertyBag">
            <summary>A PropertyBag used for Workflow to persist values</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PropertyBag.IsSynchronized">
            <summary>
                Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized
                (thread safe).
            </summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PropertyBag.SyncRoot">
            <summary>The SyncRoot of the PropertyBag.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PropertyBag.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys">
            <summary>This parameter throws an exception due to Property Bag item not being serializable.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#Values">
            <summary>This method throws an exception.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#Item(System.String)">
            <summary>Retrieves object from PropertyBag by key.</summary>
            <param name="key">The key to be indexed on</param>
            <returns>The value associated with the key.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Protected Constructor</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.ContainsKey(System.String)">
            <summary>Determines if the property bag contains a value for the specified property name</summary>
            <param name="key">The item's key.</param>
            <returns>True if the key has an existing value; false otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Boolean)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Byte)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Char)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.DateTime)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Decimal)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Double)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Int16)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Int32)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Int64)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.SByte)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Single)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.String)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.UInt16)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.UInt32)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.UInt64)">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Boolean[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Byte[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Char[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.DateTime[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Decimal[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Double[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Int16[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Int32[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Int64[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.SByte[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.Single[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.String[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.UInt16[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.UInt32[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Set(System.String,System.UInt64[])">
            <summary>
                Adds a value to the bag if the key does not exists. If the key already exists in the bag
                the value is updated.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Boolean@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Byte@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Char@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.DateTime@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Decimal@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Double@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Int16@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Int32@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Int64@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.SByte@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Single@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.String@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.UInt16@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.UInt32@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.UInt64@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Boolean[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Byte[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Char[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.DateTime[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Decimal[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Double[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Int16[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Int32[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Int64[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.SByte[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Single[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.String[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.UInt16[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.UInt32[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.UInt64[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.CopyTo(System.Array,System.Int32)">
            <summary>
                This method copies the entire Property Bag to a provided array starting at the specified
                index.
            </summary>
            <param name="array">Array to copy values to.</param>
            <param name="index">Array index to start at.</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>This method is not implemented; throws exception.</summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Clear">
            <summary>Clears the PropertyBag</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>This method is not implemented; throws exception.</summary>
            <param name="item">The item</param>
            <returns>The flag that returns if the </returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>This method is not implemented; throws exception.</summary>
            <param name="array">The array</param>
            <param name="arrayIndex">The array index</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>Returns <c>false</c>.</summary>
            <returns>Returns <c>false</c>.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)">
            <summary>This method throws an exception due to dictionary being read-only.</summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)">
            <summary>Checks if a key is present in dictionary.</summary>
            <param name="key">The key to be tested</param>
            <returns>Returns <c>true</c> if the key exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.Remove(System.String)">
            <summary>Removes a value from the property bag by the key</summary>
            <param name="key">If the value was successfully removed if it existed.</param>
            <returns>If item exists</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.TryGetValue(System.String,System.Object@)">
            <summary>Tries to get a Value.  Potentially boxes the value.  No exception is thrown.</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If item exists</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.System#Collections#IEnumerable#GetEnumerator">
            <summary>This method retrieves an IEnumerator for ICollection implementation.</summary>
            <returns>The IEnumerator that enumerates this collection</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.PropertyBag.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <summary>This method retrieves an IEnumerator from IDictionary implementation.</summary>
            <returns>The Generic IEnumerator that enumerates this collection</returns>
        </member>
        <member name="T:Hyland.Unity.Workflow.Queue">
            <summary>Workflow Queue</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.AutoFeed">
            <summary>Determines if this queue is an auto-feed queue</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.DefaultCustomQuery">
            <summary>Gets the default custom query for queues that route documents</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.ExclusiveView">
            <summary>Determines if this queue is an exclusive view queue</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.HelpText">
            <summary>Gets the help text</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.Hidden">
            <summary>Determines if this queue should be hidden</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.Icon">
            <summary>Contains the icon that is to be used to represent queues of this type.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.LifeCycle">
            <summary>Gets the life cycle this queue is in</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.PortfolioRelations">
            <summary>Gets the portfolio relations configured on a Unity queue</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.ID">
            <summary>Gets the queue ID</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Queue.Name">
            <summary>Gets the queue name</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.CreateQueueQueryOptions">
            <summary>Creates a <see cref="T:Hyland.Unity.Workflow.QueueQueryOptions" /> for this queue</summary>
            <returns>The created QueueQueryOptions</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.GetAdHocUserTasks">
            <summary>Gets the list of AdHoc Tasks for this Queue that the User has rights to.</summary>
            <returns>A list of AdHoc Tasks for this Queue that the User has rights to.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.GetDocumentCount(Hyland.Unity.Workflow.QueueQueryOptions)">
            <summary>Gets the count of the Documents in this Queue</summary>
            <param name="options">Optional settings that control the type of Documents returned</param>
            <returns>The count of the Documents in this Queue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.GetDocumentList(Hyland.Unity.Workflow.QueueQueryOptions,System.Int64,Hyland.Unity.DocumentRetrievalOptions)">
            <summary>Gets the list of Documents in this Queue</summary>
            <param name="queueQueryOptions">Optional settings that control the type of Documents returned</param>
            <param name="maxDocuments">The maximum number of Documents to return</param>
            <param name="retrievalOptions">
                Used to set additional retrieval options. Note that some options may
                reduce performance; see specific options on <c>DocumentRetrievalOptions</c> for further
                details.
            </param>
            <returns>A list of documents in this queue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.GetFilters">
            <summary>Gets the list of Custom Queries for this Queue that the User has rights to.</summary>
            <returns>A list of Custom Queries for this Queue that the User has rights to.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.GetFolderList(Hyland.Unity.Workflow.QueueQueryOptions,System.Int64,Hyland.Unity.FolderRetrievalOptions)">
            <summary>Gets the list of Folders (managed folders) in this Queue</summary>
            <param name="queueQueryOptions">Optional settings that control the type of Documents returned</param>
            <param name="maxFolders">The maximum number of Documents to return</param>
            <param name="retrievalOptions">Used to set additional retrieval options.</param>
            <returns>The list of Folders (managed folders) in this Queue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.GetObjectList(Hyland.Unity.Workflow.QueueQueryOptions,System.Int64,Hyland.Unity.WorkViewObjectRetrievalOptions)">
            <summary>Gets the list of WorkView Objects in this Queue</summary>
            <param name="queueQueryOptions">Optional settings that control the type of Documents returned</param>
            <param name="maxObjects">The maximum number of Documents to return</param>
            <param name="retrievalOptions">Used to set additional retrieval options.</param>
            <returns>The list of WorkView Objects in this Queue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.GetRelatedDocumentList(Hyland.Unity.Document,System.Int64,Hyland.Unity.DocumentRetrievalOptions)">
            <summary>Gets the list of related Documents for the specified Document</summary>
            <param name="document">The primary Document</param>
            <param name="maxDocuments">The maximum number of related Documents to return</param>
            <param name="options">
                Used to set additional retrieval options. Note that some options may reduce
                performance; see specific options on <c>DocumentRetrievalOptions</c> for further details.
            </param>
            <returns>A list of Documents related to the primary Document</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.GetWorkItemCount(Hyland.Unity.Workflow.QueueQueryOptions)">
            <summary>Gets the count of the WorkItems in this Queue</summary>
            <param name="options">Optional settings that control the type of WorkItems returned</param>
            <returns>The count of the WorkItems in this Queue</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.TransitionDocument(Hyland.Unity.Workflow.Queue,Hyland.Unity.Document)">
            <summary>
                Transitions the Document from this Queue to the specified destination Queue. The content
                of both Queues must be Document.
            </summary>
            <param name="destinationQueue">The queue to transition the document to</param>
            <param name="document">The document to transition</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.TransitionFolder(Hyland.Unity.Workflow.Queue,Hyland.Unity.Folder)">
            <summary>
                Transitions the Folder (managed folder) from this Queue to the specified destination
                Queue. The content of both Queues must be Folder.
            </summary>
            <param name="destinationQueue">The Queue to transition the Folder to</param>
            <param name="folder">The Folder to transition</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Queue.TransitionObject(Hyland.Unity.Workflow.Queue,Hyland.Unity.WorkView.Object)">
            <summary>
                Transitions the WorkView Object from this Queue to the specified destination Queue. The
                content of both Queues must be WorkView Object.
            </summary>
            <param name="destinationQueue">The Queue to transition the WorkView Object to</param>
            <param name="wvObject">The WorkView Object to transition</param>
        </member>
        <member name="T:Hyland.Unity.Workflow.QueueList">
            <summary>A list of Workflow Queues</summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.QueueQueryListType">
            <summary>The types of the QueueQueryLists</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.QueueQueryListType.AllDocuments">
            <summary>Retrieves all documents in the queue</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.QueueQueryListType.UnassignedDocuments">
            <summary>Retrieve the unassigned documents in the queue</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.QueueQueryListType.UserDocuments">
            <summary>Retrieve the documents assigned to the specified user</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.QueueQueryListType.CurrentUser">
            <summary>Retrieve the documents assigned to the current user</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.QueueQueryListType.AllWorkItems">
            <summary>Retrieves all workitems in the Unity queue</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.QueueQueryListType.UnassignedWorkItems">
            <summary>Retrieves the unassigned workitems in the Unity queue</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.QueueQueryListType.UserWorkItems">
            <summary>Retrieves the workitems in the Unity queue assigned to the specified user</summary>
        </member>
        <member name="F:Hyland.Unity.Workflow.QueueQueryListType.CurrentUserWorkItems">
            <summary>Retrieves the workitems in the Unity queue assigned to the current user</summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.QueueQueryOptions">
            <summary>The Options for Queue Queries</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.QueueQueryOptions.Filter">
            <summary>Gets/Sets the document query to use to filter the list of documents</summary>
            <remarks>This <see cref="T:Hyland.Unity.DocumentQuery" /> object should not be executed. It will return all
                <see cref="T:Hyland.Unity.Document" />s that meet its criteria, including
                <see cref="T:Hyland.Unity.Document" />s not in the Workflow <see cref="T:Hyland.Unity.Workflow.Queue" />.</remarks>
        </member>
        <member name="P:Hyland.Unity.Workflow.QueueQueryOptions.IgnoreAutoFeed">
            <summary>Determines if the auto-feed functionality should be disabled (if enabled for the queue)</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.QueueQueryOptions.ListType">
            <summary>Determines which documents to return (all documents, user documents</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.QueueQueryOptions.User">
            <summary>
                If ListType is UserDocuments then this property determines which users documents to
                retrieve.
            </summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.ReadOnlyPropertyBag">
            <summary>A read-only property bag</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.ReadOnlyPropertyBag.Count">
            <summary>The count of the values of the PropertyBag</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.ReadOnlyPropertyBag.IsSynchronized">
            <summary>Is the PropertyBag synchronized</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.ReadOnlyPropertyBag.SyncRoot">
            <summary>The SyncRoot of the PropertyBag</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <summary>Returns <c>true</c>.</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys">
            <summary>
                This method should not be used from Unity scripts. This method can throw a Remoting
                exception if used from a script.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#Values">
            <summary>This method throws an exception</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#Item(System.String)">
            <summary>
                This method should not be used from Unity scripts. This method can throw a Remoting
                exception if used from a script.
            </summary>
            <param name="key">The key to be indexed on</param>
            <returns>The value associated with the key.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.#ctor(Hyland.Unity.Workflow.PropertyBag)">
            <summary>Protected Constructor</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Boolean@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Byte@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Char@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.DateTime@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Decimal@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Double@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Int16@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Int32@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Int64@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.SByte@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Single@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.String@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.UInt16@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.UInt32@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.UInt64@)">
            <summary>Tries to get a value from the PropertyBag</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If the value was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Boolean[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Byte[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Char[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.DateTime[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Decimal[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Double[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Int16[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Int32[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Int64[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.SByte[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Single[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.String[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.UInt16[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.UInt32[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.UInt64[]@)">
            <summary>
                Tries to get an Array of values from the PropertyBag.  Exception is thrown if the found
                type does not match the requested type.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="value">Array that will be given back if found.</param>
            <returns>If the Array was found.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.CopyTo(System.Array,System.Int32)">
            <summary>
                This method should not be used from Unity scripts. This method can throw a Remoting
                exception if used from a script.
            </summary>
            <param name="array">Array to copy values to.</param>
            <param name="index">Array index to start at.</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>This method is not implemented</summary>
            <param name="item">The item</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.Clear">
            <summary>Clears the PropertyBag</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>This method is not implemented</summary>
            <param name="item">The item</param>
            <returns>The flag that returns if the </returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>This method is not implemented</summary>
            <param name="array">The array</param>
            <param name="arrayIndex">The array index</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>Returns <c>false</c>.</summary>
            <returns>Returns <c>false</c>.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)">
            <summary>This method throws an exception</summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)">
            <summary>Checks if a key is present</summary>
            <param name="key">The key to be tested</param>
            <returns>Returns <c>true</c> if the key exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.Remove(System.String)">
            <summary>Removes a value from the PropertyBag by the key</summary>
            <param name="key">If the value was successfully removed if it existed.</param>
            <returns>If item exists</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.TryGetValue(System.String,System.Object@)">
            <summary>Tries to get a Value.  Potentially boxes the value.  No exception is thrown.</summary>
            <param name="key">Key to search for.</param>
            <param name="value">Value that will be given back if found.</param>
            <returns>If item exists</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                This method should not be used from Unity scripts. This method can throw a Remoting
                exception if used from a script.
            </summary>
            <returns>A standard enumerator</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.ReadOnlyPropertyBag.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <summary>
                This method should not be used from Unity scripts. This method can throw a Remoting
                exception if used from a script.
            </summary>
            <returns>A standard enumerator</returns>
        </member>
        <member name="T:Hyland.Unity.Workflow.TaskList">
            <summary>Represents a workflow task list</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.TaskList.ID">
            <summary>Gets the task list ID</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.TaskList.Name">
            <summary>Gets the task list name</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.TaskList.Execute(Hyland.Unity.Workflow.Queue,Hyland.Unity.Document)">
            <summary>Executes this TaskList against the specified Document in the specified Queue</summary>
            <param name="queue">The Queue to execute the TaskList against.</param>
            <param name="document">The Document to execute the TaskList against.</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.TaskList.Execute(Hyland.Unity.Workflow.Queue,Hyland.Unity.WorkView.Object)">
            <summary>Executes this TaskList against the specified WorkView Object in the specified Queue</summary>
            <param name="queue">The Queue to execute the TaskList against.</param>
            <param name="wvObject">The WorkView Object to execute the TaskList against.</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.TaskList.Execute(Hyland.Unity.Workflow.Queue,Hyland.Unity.Folder)">
            <summary>
                Executes this TaskList against the specified Folder (managed folder) in the specified
                Queue
            </summary>
            <param name="queue">The Queue to execute the TaskList against.</param>
            <param name="folder">The Folder (managed folder) to execute the TaskList against.</param>
        </member>
        <member name="T:Hyland.Unity.Workflow.TaskListList">
            <summary>A list of task lists</summary>
        </member>
        <member name="T:Hyland.Unity.Workflow.Workflow">
            <summary>Unity Workflow Actions</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Workflow.LifeCycles">
            <summary>Gets the list of LifeCycles the user has rights to</summary>
        </member>
        <member name="P:Hyland.Unity.Workflow.Workflow.Queues">
            <summary>Gets the list of Queues the user has rights to</summary>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddDocumentToLifeCycle(Hyland.Unity.Document,Hyland.Unity.Workflow.LifeCycle)">
            <summary>Adds the Document to the specified LifeCycle.</summary>
            <param name="document">The Document to add to the LifeCycle</param>
            <param name="lifeCycle">The LifeCycle to add the Document to</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddDocumentToLifeCycles(Hyland.Unity.Document)">
            <summary>Adds the Document to all of the LifeCycles associated with the document's DocumentType</summary>
            <param name="document">The Document to add to the LifeCycles</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToLifeCycle(Hyland.Unity.Document,Hyland.Unity.Workflow.LifeCycle)">
            <summary>Adds the Document to the specified LifeCycle.</summary>
            <param name="document">The Document to add to the LifeCycle</param>
            <param name="lifeCycle">The LifeCycle to add the Document to</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToLifeCycle(Hyland.Unity.WorkView.Object,Hyland.Unity.Workflow.LifeCycle)">
            <summary>Adds the WorkView Object to the specified LifeCycle.</summary>
            <param name="wvObject">The WorkView Object to add to the LifeCycle</param>
            <param name="lifeCycle">The LifeCycle to add the WorkView Object to</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToLifeCycle(Hyland.Unity.Folder,Hyland.Unity.Workflow.LifeCycle)">
            <summary>Adds the Folder (managed folder) to the specified LifeCycle.</summary>
            <param name="folder">The Folder (managed folder) to add to the LifeCycle</param>
            <param name="lifeCycle">The LifeCycle to add the Folder (managed folder) to</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToLifeCycle(Hyland.Unity.Document,Hyland.Unity.Workflow.Queue)">
            <summary>Adds the Document to the specified LifeCycle.</summary>
            <param name="document">The Document to add to the LifeCycle</param>
            <param name="queue">
                The Queue to add the Document to. If the Document is already in the Life Cycle
                in any Queue this method does nothing.
            </param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToLifeCycle(Hyland.Unity.WorkView.Object,Hyland.Unity.Workflow.Queue)">
            <summary>Adds the WorkView Object to the specified LifeCycle.</summary>
            <param name="wvObject">The WorkView Object to add to the LifeCycle</param>
            <param name="queue">
                The Queue to add the WorkView Object to. If the WorkView Object is already in
                the Life Cycle in any Queue this method does nothing.
            </param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToLifeCycle(Hyland.Unity.Folder,Hyland.Unity.Workflow.Queue)">
            <summary>Adds the Folder (managed folder) to the specified LifeCycle.</summary>
            <param name="folder">The Folder (managed folder) to add to the LifeCycle</param>
            <param name="queue">
                The Queue to add the Folder (managed folder) to. If the Folder (managed folder)
                is already in the Life Cycle in any Queue this method does nothing.
            </param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToWorkflow(Hyland.Unity.Document)">
            <summary>Adds the Document to Workflow</summary>
            <param name="document">The Document to add to Workflow</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToWorkflow(Hyland.Unity.WorkView.Object)">
            <summary>Adds the WorkView Object to Workflow</summary>
            <param name="wvObject">The WorkView Object to add to Workflow</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.AddToWorkflow(Hyland.Unity.Folder)">
            <summary>Adds the Folder (managed folder) to Workflow</summary>
            <param name="folder">The Folder (managed folder) to add to Workflow</param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.GetLifeCycles(Hyland.Unity.DocumentType)">
            <summary>Gets the list of LifeCycles that are associated with the specified DocumentType</summary>
            <param name="documentType">The document type to get the life cycles for</param>
            <returns>A list of LifeCycles associated with the document type</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.GetLifeCycles(Hyland.Unity.WorkView.Class)">
            <summary>Gets the list of LifeCycles that are associated with the specified WorkView Class</summary>
            <param name="wvClass">The WorkView Class to get the life cycles for</param>
            <returns>A list of LifeCycles associated with the WorkView Class</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.GetLifeCycles(Hyland.Unity.FolderType)">
            <summary>
                Gets the list of LifeCycles that are associated with the specified FolderType (managed
                folder)
            </summary>
            <param name="folderType">The Folder (managed folder) type to get the life cycles for</param>
            <returns>A list of LifeCycles associated with the FolderType (managed folder)</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.GetLifeCyclesForDocumentType(Hyland.Unity.DocumentType)">
            <summary>Gets the list of LifeCycles that are associated with the specified DocumentType</summary>
            <param name="documentType">The DocumentType to get the LifeCycles for</param>
            <returns>A list of LifeCycles associated with the DocumentType</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.GetQueues(Hyland.Unity.Document)">
            <summary>Gets the list of Queues the Document is in</summary>
            <param name="document">The Document to get the Queues for</param>
            <returns>A list of Queues where the Document currently resides</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.GetQueues(Hyland.Unity.WorkView.Object)">
            <summary>Gets the list of Queues the WorkView Object is in</summary>
            <param name="wvObject">The WorkView Object to get the queues for</param>
            <returns>A list of Queues where the WorkView Object currently resides</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.GetQueues(Hyland.Unity.Folder)">
            <summary>Gets the list of Queues the Folder (managed folder) is in</summary>
            <param name="folder">The Folder (managed folder) to get the Queues for</param>
            <returns>A list of Queues where the Folder (managed folder) currently resides</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.GetQueuesForDocument(Hyland.Unity.Document)">
            <summary>Gets the list of Queues the Document is in</summary>
            <param name="document">The Document to get the Queues for</param>
            <returns>A list of Queues where the Document currently resides</returns>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.RemoveFromLifeCycle(Hyland.Unity.Document,Hyland.Unity.Workflow.LifeCycle,System.Boolean)">
            <summary>Removes the Document from the specified LifeCycle</summary>
            <param name="document">The Document to remove from the LifeCycle</param>
            <param name="lifeCycle">The LifeCycle to remove the Document from</param>
            <param name="removeAllUserAssignments">
                Whether to remove all load balancing assignments, if
                applicable
            </param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.RemoveFromLifeCycle(Hyland.Unity.WorkView.Object,Hyland.Unity.Workflow.LifeCycle,System.Boolean)">
            <summary>Removes the WorkView Object from the specified LifeCycle</summary>
            <param name="wvObject">The WorkView Object to remove from the LifeCycle</param>
            <param name="lifeCycle">The LifeCycle to remove the WorkView Object from</param>
            <param name="removeAllUserAssignments">
                Whether to remove all load balancing assignments, if
                applicable
            </param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.RemoveFromLifeCycle(Hyland.Unity.Folder,Hyland.Unity.Workflow.LifeCycle,System.Boolean)">
            <summary>Removes the Folder (managed folder) from the specified LifeCycle</summary>
            <param name="folder">The Folder (managed folder) to remove from the LifeCycle</param>
            <param name="lifeCycle">The LifeCycle to remove the Folder (managed folder) from</param>
            <param name="removeAllUserAssignments">
                Whether to remove all load balancing assignments, if
                applicable
            </param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.RemoveFromWorkflow(Hyland.Unity.Document,System.Boolean)">
            <summary>Removes the Document from Workflow</summary>
            <param name="document">The Document to remove from Workflow</param>
            <param name="removeAllUserAssignments">
                Whether to remove all load balancing assignments, if
                applicable
            </param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.RemoveFromWorkflow(Hyland.Unity.WorkView.Object,System.Boolean)">
            <summary>Removes the WorkView Object from Workflow</summary>
            <param name="wvObject">The WorkView Object to remove from Workflow</param>
            <param name="removeAllUserAssignments">
                Whether to remove all load balancing assignments, if
                applicable
            </param>
        </member>
        <member name="M:Hyland.Unity.Workflow.Workflow.RemoveFromWorkflow(Hyland.Unity.Folder,System.Boolean)">
            <summary>Removes the Folder (managed folder) from Workflow</summary>
            <param name="folder">The Folder (managed folder) to remove from Workflow</param>
            <param name="removeAllUserAssignments">
                Whether to remove all load balancing assignments, if
                applicable
            </param>
        </member>
        <member name="T:Hyland.Unity.ClientWorkflowEventArgs">
            <summary>Workflow Event Arguments for Client Side Script</summary>
        </member>
        <member name="P:Hyland.Unity.ClientWorkflowEventArgs.BatchDocumentsRemaining">
            <summary>Gets the number of documents remaining to be executed against the task</summary>
        </member>
        <member name="P:Hyland.Unity.ClientWorkflowEventArgs.PersistentPropertyBag">
            <summary>Gets the property bag that contains properties scoped to a life cycle and work item</summary>
        </member>
        <member name="P:Hyland.Unity.ClientWorkflowEventArgs.PropertyBag">
            <summary>
                Gets the property bag that retains its properties for the duration of the workflow
                operation
            </summary>
        </member>
        <member name="P:Hyland.Unity.ClientWorkflowEventArgs.Queue">
            <summary>Gets the current queue.  Can be null if the script is being executed under a system task</summary>
        </member>
        <member name="P:Hyland.Unity.ClientWorkflowEventArgs.ScriptResult">
            <summary>
                Gets/sets the script result. This value is only used by the run unity script rule and
                controls whether the rule executes its OnTrue or OnFalse task list
            </summary>
        </member>
        <member name="P:Hyland.Unity.ClientWorkflowEventArgs.SessionPropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of the session</summary>
        </member>
        <member name="P:Hyland.Unity.ClientWorkflowEventArgs.UserInterfaceId">
            <summary>Identification of the user interface where the client-side workflow script is executing</summary>
        </member>
        <member name="M:Hyland.Unity.ClientWorkflowEventArgs.#ctor(Hyland.Unity.Document,Hyland.Unity.Workflow.Queue,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,System.Int64,System.Boolean)">
            <summary>Initializes this object</summary>
            <param name="document">Current Document being acted upon.</param>
            <param name="queue">Can be null if executing within a system task</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
            <param name="scopedPropertyBag">
                The property bag that will retain its properties for the duration
                of the workflow operation
            </param>
            ///
            <param name="persistentPropertyBag">
                The property bag that contains properties scoped to a life
                cycle and work item
            </param>
            <param name="batchDocumentsRemaining">
                The number of documents remaining to be executed against the
                task
            </param>
            <param name="scriptResult">Default script result.</param>
        </member>
        <member name="T:Hyland.Unity.IClientWorkflowScript">
            <summary>Workflow Event Interface for client side workflow script</summary>
        </member>
        <member name="M:Hyland.Unity.IClientWorkflowScript.OnClientWorkflowScriptExecute(Hyland.Unity.Application,Hyland.Unity.ClientWorkflowEventArgs)">
            <summary>Method executed on a workflow event</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.WorkflowEventArgs" /> object that contains the parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.IWorkflowApprovalConditionScript">
            <summary>Workflow Event Interface</summary>
        </member>
        <member name="M:Hyland.Unity.IWorkflowApprovalConditionScript.Evaluate(Hyland.Unity.Application,Hyland.Unity.WorkflowApprovalConditionArgs)">
            <summary>Called by the approval engine to evaluate a condition contained in an approval rule.</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.WorkflowApprovalConditionArgs" /> object that contains the
                parameters for the current interface.
            </param>
            <returns>Determines how the condition evaluates</returns>
        </member>
        <member name="T:Hyland.Unity.IWorkflowApprovalRoleMemberScript">
            <summary>The interface for retrieving approval role members</summary>
        </member>
        <member name="M:Hyland.Unity.IWorkflowApprovalRoleMemberScript.GetApprovalRoleMembers(Hyland.Unity.Application,Hyland.Unity.WorkflowApprovalArgs)">
            <summary>Called by the approval engine to retrieve the members from an approval role</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.WorkflowApprovalArgs" /> object that contains the parameters for
                the current interface.
            </param>
            <returns>A list of users who are members of a role</returns>
        </member>
        <member name="T:Hyland.Unity.IWorkflowScript">
            <summary>Workflow Event Interface for server side workflow script</summary>
        </member>
        <member name="M:Hyland.Unity.IWorkflowScript.OnWorkflowScriptExecute(Hyland.Unity.Application,Hyland.Unity.WorkflowEventArgs)">
            <summary>Method executed on a workflow event</summary>
            <param name="app">The connected <see cref="T:Hyland.Unity.Application" /> object</param>
            <param name="args">
                The <see cref="T:Hyland.Unity.WorkflowEventArgs" /> object that contains the parameters for the
                current interface.
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkflowApprovalArgs">
            <summary>Arguments for workflow approval engine related script</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowApprovalArgs.PropertyBag">
            <summary>
                Gets the property bag that retains its properties for the duration of the workflow
                operation
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowApprovalArgs.SessionPropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of the session</summary>
        </member>
        <member name="M:Hyland.Unity.WorkflowApprovalArgs.#ctor(Hyland.Unity.Document,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag)">
            <summary>Initializes this object</summary>
            <param name="document">Current Document being acted upon.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
            <param name="scopedPropertyBag">
                The property bag that will retain its properties for the duration
                of the workflow operation
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkflowApprovalConditionArgs">
            <summary>Workflow Event Arguments</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowApprovalConditionArgs.PropertyBag">
            <summary>
                Gets the property bag that retains its properties for the duration of the workflow
                operation
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowApprovalConditionArgs.Queue">
            <summary>Gets the current queue.  Can be null if the script is being executed under a system task</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowApprovalConditionArgs.SessionPropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of the session</summary>
        </member>
        <member name="M:Hyland.Unity.WorkflowApprovalConditionArgs.#ctor(Hyland.Unity.Document,Hyland.Unity.Workflow.Queue,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag)">
            <summary>Initializes this object</summary>
            <param name="document">Current Document being acted upon.</param>
            <param name="queue">Can be null if executing within a system task</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
            <param name="scopedPropertyBag">
                The property bag that will retain its properties for the duration
                of the workflow operation
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkflowEventArgs">
            <summary>Workflow Event Arguments for Server Side Script</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowEventArgs.BatchDocumentsRemaining">
            <summary>Gets the number of documents remaining to be executed against the task</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowEventArgs.EISMessageItem">
            <summary>
                Gets the current <see cref="P:Hyland.Unity.WorkflowEventArgs.EISMessageItem" /> if the script is executed against an
                EISMessageItem Otherwise, returns null.
            </summary>
            <value>The current EISMessageItem.</value>
        </member>
        <member name="P:Hyland.Unity.WorkflowEventArgs.PersistentPropertyBag">
            <summary>Gets the property bag that contains properties scoped to a life cycle and work item</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowEventArgs.PropertyBag">
            <summary>
                Gets the property bag that retains its properties for the duration of the workflow
                operation
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowEventArgs.Queue">
            <summary>Gets the current queue.  Can be null if the script is being executed under a system task</summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowEventArgs.ScriptResult">
            <summary>
                Gets/sets the script result. This value is only used by the run unity script rule and
                controls whether the rule executes its OnTrue or OnFalse task list
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkflowEventArgs.SessionPropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of the session</summary>
        </member>
        <member name="M:Hyland.Unity.WorkflowEventArgs.#ctor(Hyland.Unity.Document,Hyland.Unity.Workflow.Queue,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,Hyland.Unity.Workflow.PropertyBag,System.Int64,System.Boolean)">
            <summary>Initializes this object</summary>
            <param name="document">Current Document being acted upon.</param>
            <param name="queue">Can be null if executing within a system task</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
            <param name="scopedPropertyBag">
                The property bag that will retain its properties for the duration
                of the workflow operation
            </param>
            <param name="persistentPropertyBag">
                The property bag that contains properties scoped to a life
                cycle and work item
            </param>
            <param name="batchDocumentsRemaining">
                The number of documents remaining to be executed against the
                task
            </param>
            <param name="scriptResult">Default script result.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewAfterExecuteFilterScript">
            <summary>Represents a script which is executed after a Filter Query is executed.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewAfterExecuteFilterScript.OnWorkViewAfterExecuteFilter(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewAfterExecuteFilterEventArgs)">
            <summary>
                Method executed after executing a WorkView Filter. This method allows for the modifying of
                the executing Filter.
            </summary>
            <example>
                This method allows for the adding of constraints and/or sorts to the currently executing
                Filter.
            </example>
            <remarks>This method is executed for every Filter for the Class this script is configured for.</remarks>
            <param name="unityApplication">The connected Unity Application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewBeforeDeleteObjectScript">
            <summary>Represents a script which is executed when a WorkView Object is deleted.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewBeforeDeleteObjectScript.OnWorkViewBeforeDeleteObject(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewBeforeDeleteObjectEventArgs)">
            <summary>
                Method executed before deleting a WorkView Object. This method allows the canceling of the
                delete action if needed.
            </summary>
            <remarks>
                This method allows for custom validation, custom logging, etc. prior to the WorkView
                Object being deleted.
            </remarks>
            <param name="unityApplication">The connected Unity Application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewBeforeExecuteFilterScript">
            <summary>Represents a script which is executed when a Filter Query is executed.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewBeforeExecuteFilterScript.OnWorkViewBeforeExecuteFilter(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewBeforeExecuteFilterEventArgs)">
            <summary>
                Method executed before executing a WorkView Filter. This method allows for the modifying
                of the executing Filter.
            </summary>
            <example>
                This method allows for the adding of constraints and/or sorts to the currently executing
                Filter.
            </example>
            <remarks>This method is executed for every Filter for the Class this script is configured for.</remarks>
            <param name="unityApplication">The connected Unity Application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewBeforeOpenObjectScript">
            <summary>Represents a script which is executed when an Object is opened.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewBeforeOpenObjectScript.OnWorkViewBeforeOpenObject(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewBeforeOpenObjectEventArgs)">
            <summary>
                Method executed before opening a WorkView Object. This method allows for the modifying,
                canceling the opening of, etc of the Object being opened. This method also allows the
                controlling of which Action buttons are visible/hidden when the object opens.
            </summary>
            <param name="unityApplication">The connected unity application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewBeforeSaveObjectScript">
            <summary>Represents a script which is executed when an Object is saved.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewBeforeSaveObjectScript.OnWorkViewBeforeSaveObject(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewBeforeSaveObjectEventArgs)">
            <summary>
                Method executed before saving a WorkView Object. This method allows the canceling of the
                save action if needed.
            </summary>
            <remarks>
                This method allows for custom validation, custom logging, etc. prior to the WorkView
                Object being saved.
            </remarks>
            <param name="unityApplication">The connected Unity application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewCreateObjectScript">
            <summary>Represents a script which is executed when an Object is created.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewCreateObjectScript.OnWorkViewCreateObject(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewCreateObjectEventArgs)">
            <summary>
                Method executed after a new WorkView Object has been created, but before it is returned to
                the caller.
            </summary>
            <remarks>
                This method allows for customization of the new WorkView Object prior to it being returned
                to the caller.
            </remarks>
            <param name="unityApplication">The connected Unity application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewExecuteActionButtonScript">
            <summary>
                Represents a script which is executed when the WorkView Action (of type: 'Execute Unity
                Script') is triggered.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewExecuteActionButtonScript.OnWorkViewExecuteActionButtonScript(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs)">
            <summary>Method executed when the action to which this script is associated is triggered.</summary>
            <param name="unityApplication">The connected Unity Application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewLoadApplicationGlobalScript">
            <summary>
                Represents a script which is executed when a WorkView Application is selected at a global
                level.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewLoadApplicationGlobalScript.OnWorkViewLoadApplicationGlobal(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewLoadApplicationGlobalEventArgs)">
            <summary>
                Method executed when a WorkView Application is opened the very first time and is only
                executed once per life of the Application Server process.
            </summary>
            <remarks>
                Use this method to add static data to the global variable collect or any other code to
                perform one-time application initialization. This method is executed after the current user's
                identity string has been resolved (if security attributes are being used).
            </remarks>
            <param name="unityApplication">The connected unity application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewLoadApplicationSessionScript">
            <summary>
                Represents a script which is executed when a WorkView Application is selected at a Session
                level.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewLoadApplicationSessionScript.OnWorkViewLoadApplicationSession(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewLoadApplicationSessionEventArgs)">
            <summary>
                Method executed when a WorkView application is opened the very first time for the current
                user/session.
            </summary>
            <remarks>
                Use this method to add any session-specific application initialization. For example,
                setting often accessed user-specific information into runtime variables. This method is
                executed after the current user's identity string has been resolved (if security attributes are
                being used).
            </remarks>
            <param name="unityApplication">The connected unity application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewGetExtendOnCreateClassesScript">
            <summary>
                Represents a script which is executed when creating an object that can be extended on
                creation
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewGetExtendOnCreateClassesScript.OnWorkViewGetExtendOnCreateClasses(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewGetExtendOnCreateClassesEventArgs)">
            <summary>Method executed when creating a base object that can be extended on creation</summary>
            <remarks>The extension class options for the object will be returned in this method's arguments</remarks>
            <param name="unityApplication">The connected Unity Application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewGetTransformClassesScript">
            <summary>Represents a script which is executed when transforming an object that can be extended</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewGetTransformClassesScript.OnWorkViewGetTransformClasses(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewGetTransformClassesEventArgs)">
            <summary>Method executed when transforming object that can be extended</summary>
            <remarks>The extension class options for the object will be returned in this method's arguments</remarks>
            <param name="unityApplication">The connected Unity Application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewPopulateDocumentFolderScript">
            <summary>
                Represents a script which is executed when a Dynamic Folder configured as 'Fill folder via
                Script' is loaded.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewPopulateDocumentFolderScript.OnWorkViewPopulateDocumentFolder(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewPopulateDocumentFolderEventArgs)">
            <summary>
                Method executed when a WorkView Class dynamic DocumentFolder marked as 'Fill folder via
                script' is loaded.
            </summary>
            <remarks>This method allows for the filling of an Object's dynamic DocumentFolder with Documents.</remarks>
            <param name="unityApplication">The connected unity application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.IWorkViewGetExternalClassDataScript">
            <summary>
                Represents a script which is executed when an external class is configured as 'Unity
                Script Sourced' is executed.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewGetExternalClassDataScript.OnWorkViewGetExternalObject(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewGetExternalObjectEventArgs)">
            <summary>
                Method executed when a WorkView external class object (that is configured as 'Unity Script
                Sourced') is being loaded.
            </summary>
            <remarks>This method is used to load the external object with data from an external system.</remarks>
            <param name="unityApplication">The connected unity application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.IWorkViewGetExternalClassDataScript.OnWorkViewPopulateExternalFilterResults(Hyland.Unity.Application,Hyland.Unity.WorkView.WorkViewPopulateExternalFilterResultsEventArgs)">
            <summary>
                Method executed when a WorkView external class filter (that is configured as 'Unity Script
                Sourced') is executed.
            </summary>
            <remarks>
                This method allows for the filling the results of a filter query with data from an
                external system. <see cref="T:Hyland.Unity.WorkView.Object" />s will be displayed in the filter in the order which they
                were added to the <see cref="T:Hyland.Unity.WorkView.ExternalObjectList" /> Results.
            </remarks>
            <param name="unityApplication">The connected unity application. <see cref="T:Hyland.Unity.WorkView.Application" /></param>
            <param name="args">The arguments used within this script.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewAfterExecuteFilterEventArgs">
            <summary>The data associated with the WorkView FilterQuery execution event.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewAfterExecuteFilterEventArgs.Application">
            <summary>Returns the current (runtime) WorkView Application.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewAfterExecuteFilterEventArgs.QueryResults">
            <summary>Returns the WorkView FilterQuery that is being executed.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewAfterExecuteFilterEventArgs.SessionPropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of the session</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewAfterExecuteFilterEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.ClientFilterQueryResultItemList,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnWorkViewBeforeExecuteFilter
                script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="filterQueryResultItemList">The WorkView FilterQuery that is being executed.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewBeforeDeleteObjectEventArgs">
            <summary>The data associated with the WorkView Object deletion event.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewBeforeDeleteObjectEventArgs.Object">
            <summary>Returns the WorkView Object that is being deleted.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewBeforeDeleteObjectEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.DeleteObject,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnWorkViewBeforeDeleteObject
                script.
            </summary>
            <param name="wvApplication">The current (runtime) WorkView Application.</param>
            <param name="wvObject">The WorkView Object that is being deleted.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewBeforeExecuteFilterEventArgs">
            <summary>The data associated with the WorkView FilterQuery execution event.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewBeforeExecuteFilterEventArgs.FilterQuery">
            <summary>Returns the WorkView FilterQuery that is being executed.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewBeforeExecuteFilterEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.ClientFilterQuery,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnWorkViewBeforeExecuteFilter
                script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="filterQuery">The WorkView FilterQuery that is being executed.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewBeforeOpenObjectEventArgs">
            <summary>The data associated with the event of opening a WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewBeforeOpenObjectEventArgs.Object">
            <summary>Returns the current WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewBeforeOpenObjectEventArgs.Views">
            <summary>Gets the collection of WorkView Views associated to the current WorkView Object.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewBeforeOpenObjectEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.OpenObject,Hyland.Unity.WorkView.ViewList,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnBeforeOpenObjectEventScript
                script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="wvObject">The WorkView Object that is being opened.</param>
            <param name="views">
                The collection of WorkView Views that are associated to the specified WorkView
                Object.
            </param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewBeforeSaveObjectEventArgs">
            <summary>The data associated with the WorkView Object saving event.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewBeforeSaveObjectEventArgs.Object">
            <summary>Returns the WorkView Object that has (potentially) been modified.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewBeforeSaveObjectEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.SaveObject,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnWorkViewBeforeSaveObjectEvent
                script.
            </summary>
            <param name="wvApplication">The current (runtime) WorkView Application.</param>
            <param name="wvCurrentObject">The WorkView Object that has (potentially) been modified.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewCreateObjectEventArgs">
            <summary>The data associated with the WorkView Object creation event.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewCreateObjectEventArgs.BaseObject">
            <summary>Returns the WorkView Object that the Object was created from. Can be null.</summary>
            Named BaseObject to be consistent with ClientFilterQuery's BaseObject property.
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewCreateObjectEventArgs.Object">
            <summary>Returns the WorkView Object that was created.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewCreateObjectEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.CreateObject,Hyland.Unity.WorkView.CreateObjectBaseObject,Hyland.Unity.Workflow.PropertyBag)">
            <summary>Initializes a new instance of the arguments used in the OnWorkViewCreateObject script.</summary>
            <param name="wvApplication">The current (runtime) WorkView Application.</param>
            <param name="wvObject">The WorkView Object that was created.</param>
            <param name="wvBaseObject">The WorkView Object that the Object was created from. Can be null.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewEventArgs">
            <summary>Base class for all WorkView related event arguments.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewEventArgs.Application">
            <summary>Returns the current (runtime) WorkView Application.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewEventArgs.ScriptResult">
            <summary>Returns the ScriptResult object with data associated to the executed script.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewEventArgs.SessionPropertyBag">
            <summary>Gets the property bag that retains its properties for the duration of the session</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.Workflow.PropertyBag)">
            <summary>Initializes a new instance of the base arguments used in all WorkView scripts.</summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs">
            <summary>The data associated with the event of executing a WorkView Action.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs.Object">
            <summary>Returns the current WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs.UIActions">
            <summary>Returns the current list of UIActions configured in sequence.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.Object,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnExecuteActionButtonScript
                method.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="wvObject">The current WorkView object.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs.AddUIActionCloseObject(System.Int64,System.Int64)">
            <summary>Adds a UI action to close a currently open WorkView Object.</summary>
            <param name="classID">The ID of the Class of the Object that is being closed.</param>
            <param name="objectID">The ID of the Object to close.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs.AddUIActionDisplayDocument(System.Int64)">
            <summary>Adds a UI action to display the specified document.</summary>
            <param name="documentID">The message that will be displayed to the user.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs.AddUIActionMessageBox(System.String)">
            <summary>Adds a UI action to display a message box with the specified string message.</summary>
            <param name="message">The message that will be displayed to the user.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs.AddUIActionOpenObject(System.Int64,System.Int64)">
            <summary>Adds a UI action to open the specified WorkView Object.</summary>
            <param name="classID">The ID of the Class of the Object that is being closed.</param>
            <param name="objectID">The ID of the Object to open.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewExecuteActionButtonScriptEventArgs.SetDisplayData(System.String,Hyland.Unity.WorkView.DisplayContentType)">
            <summary>
                Sets the specified content and content type to display as a result of the execution of the
                Action.
            </summary>
            <param name="content">The content to be displayed</param>
            <param name="contentType">The content type that needs to be displayed</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewGetExtendOnCreateClassesEventArgs">
            <summary>Custom Object Extension Options associated with 'Can Extend On Create'.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewGetExtendOnCreateClassesEventArgs.AvailableClasses">
            <summary>The list of eligible classes that can be created from the base class.</summary>
            <remarks>A list of the Classes that have the 'extend-on-create' option set.</remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewGetExtendOnCreateClassesEventArgs.BaseObject">
            <summary>Returns the parent object of the object being created.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewGetExtendOnCreateClassesEventArgs.SelectableClasses">
            <summary>A configurable list of selectable eligible classes for the base class.</summary>
            <remarks>Must add a valid extension of the Base Class!</remarks>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewGetExtendOnCreateClassesEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.ReadOnlyObject,Hyland.Unity.WorkView.ClassList,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the GetExtendOnCreateOptionsScript
                script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="wvParentObject">The Parent Object of the Object being created.</param>
            <param name="defaultClasses">The default extension options that would be presented.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewGetExternalObjectEventArgs">
            <summary>The data associated with the WorkView get external object event.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewGetExternalObjectEventArgs.ExternalObject">
            <summary>Returns the external object.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewGetExternalObjectEventArgs.#ctor(Hyland.Unity.WorkView.Class,System.Int64)">
            <summary>
                Initializes a new instance of the arguments used in the OnWorkViewGetExternalObject
                script.
            </summary>
            <param name="wvClass">The Class the external object is associated to.</param>
            <param name="id">The ID of the external object that is being loaded.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewGetTransformClassesEventArgs">
            <summary>Custom Object Extension Options associated with object transformation.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewGetTransformClassesEventArgs.AvailableClasses">
            <summary>The list of eligible classes that can be created from the base class.</summary>
            <remarks>A list of the Classes that have the 'extend-on-create' option set.</remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewGetTransformClassesEventArgs.Object">
            <summary>Returns the object being transformed.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewGetTransformClassesEventArgs.SelectableClasses">
            <summary>A configurable list of selectable eligible classes transformations for the base class.</summary>
            <remarks>Must add a valid extension of the Base Class!</remarks>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewGetTransformClassesEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.ReadOnlyObject,Hyland.Unity.WorkView.ClassList,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the GetExtendOnCreateOptionsScript
                script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="wvObject">The WorkView Object that is being extended.</param>
            <param name="defaultClasses">The default extension options that would be presented.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewLoadApplicationGlobalEventArgs">
            <summary>The data associated with the event of loading a WorkView Application at the global level.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewLoadApplicationGlobalEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnWorkViewLoadApplicationGlobal
                script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewLoadApplicationSessionEventArgs">
            <summary>The data associated with the event of loading a WorkView Application at the Session level.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewLoadApplicationSessionEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnWorkViewLoadApplicationSession
                script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewPopulateDocumentFolderEventArgs">
            <summary>The data associated with the WorkView DocumentFolder population event.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewPopulateDocumentFolderEventArgs.DocumentFolder">
            <summary>Returns the WorkView Document Folder that is being populated.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewPopulateDocumentFolderEventArgs.Object">
            <summary>Returns the WorkView Object that is being populated with Documents.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewPopulateDocumentFolderEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.PopulateDocumentFolderObject,Hyland.Unity.WorkView.DocumentFolder,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the OnWorkViewPopulateDocumentFolder
                script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="wvObject">The WorkView Object that is being populated with Documents.</param>
            <param name="documentFolder">The WorkView DocumentFolder that is being populated.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewPopulateDocumentFolderEventArgs.AssociateDocument(Hyland.Unity.Document)">
            <summary>Associates or 'links' the specified Document to the current document folder.</summary>
            <param name="document">The document to be linked</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkViewPopulateExternalFilterResultsEventArgs">
            <summary>The data associated with the WorkView populate external filter results event.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewPopulateExternalFilterResultsEventArgs.FilterQuery">
            <summary>The associated filter query</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewPopulateExternalFilterResultsEventArgs.Results">
            <summary>Returns the collection of external objects that are associated to this filter query.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkViewPopulateExternalFilterResultsEventArgs.Class">
            <summary>Returns the class this external filter results is associated to.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewPopulateExternalFilterResultsEventArgs.#ctor(Hyland.Unity.WorkView.Application,Hyland.Unity.WorkView.Class,Hyland.Unity.WorkView.PopulateExternalClassFilterQuery,Hyland.Unity.Workflow.PropertyBag)">
            <summary>
                Initializes a new instance of the arguments used in the
                OnWorkViewPopulateExternalFilterResults script.
            </summary>
            <param name="application">The current (runtime) WorkView Application.</param>
            <param name="wvClass">The class this filter query is associated to.</param>
            <param name="filterQuery">The WorkView Filter Query that is to be executed.</param>
            <param name="sessionPropertyBag">
                The property bag that will retain its properties for the duration
                of the session
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewPopulateExternalFilterResultsEventArgs.CreateExternalObject(System.Int64)">
            <summary>
                Creates a new instance of an ExternalObject that can be added to the results of this
                filter query.
            </summary>
            <param name="id">The ID of the external object.</param>
            <returns>The ExternalObject that has been initialized.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.Action">
            <summary>Represents a WorkView Action.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Action.Type">
            <summary>Gets the Type of the Action</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Action.ID">
            <summary>Gets the ID of the Action.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Action.Name">
            <summary>Gets the Name of the Action</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.Action.Execute(Hyland.Unity.WorkView.Object)">
            <summary>Executes the current action on the specified WorkView Object.</summary>
            <param name="wvObject">The WorkView Object.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.ActionList">
            <summary>Represents a list of WorkView Actions.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.Application">
            <summary>Represents a WorkView Application.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Application.Actions">
            <summary>Gets the list of Actions associated to this WorkView Application.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Application.Classes">
            <summary>Gets the collection of Classes associated to this WorkView Application.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Application.DefaultFullTextCatalog">
            <summary>Returns the default full text catalog associated to this WorkView Application.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Application.Filters">
            <summary>Gets the collection of Filters associated to this WorkView Application.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Application.ID">
            <summary>Gets the unique numeric ID of the Application.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Application.Name">
            <summary>Gets the name of the Application</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ApplicationList">
            <summary>Represents a list of WorkView Applications.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.Attribute">
            <summary>Represents a WorkView Attribute.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Attribute.Class">
            <summary>Gets the Class to which this Attribute belongs.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Attribute.DataLength">
            <summary>
                Gets the maximum allowed length for this attribute. This property applies only to
                attributes of type Alphanumeric and Currency.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Attribute.RelatedClass">
            <summary>
                Returns the Class that this relationship attribute relates to. If this attribute is not of
                type relationship, this will return null;
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Attribute.ClassID">
            <summary>Gets the ID of the Class to which this Attribute is belongs.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.AttributeList">
            <summary>Represents a list of WorkView Attributes.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.AttributeBase">
            <summary>Represents the base of all WorkView Attributes.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeBase.AttributeType">
            <summary>Gets the Data Type of the Attribute.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeBase.ID">
            <summary>Gets the ID of the attribute.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeBase.Name">
            <summary>Gets the Name of the attribute.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeBase.#ctor(Hyland.Unity.Application)">
            <summary>Initializes a new instance of an attribute/stock attribute.</summary>
            <param name="app">The unity application</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.AttributeValue">
            <summary>Represents a WorkView Attribute value.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.AlphanumericValue">
            <summary>Gets Attribute value as Alphanumeric.</summary>
            <returns>returns the Attribute value as string</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Alphanumeric type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.Attribute">
            <summary>Gets the Attribute to which this AttributeValue is associated.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.BooleanValue">
            <summary>Gets Attribute value as Boolean.</summary>
            <returns>Returns the Attribute value as bool</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Boolean type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.CurrencyValue">
            <summary>Gets Attribute value as Currency.</summary>
            <returns>returns the Attribute value as decimal</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Currency type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.DateTimeValue">
            <summary>Gets Attribute value as Date/Time.</summary>
            <returns>returns the Attribute value as DateTime</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the DateTime type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.DateValue">
            <summary>Gets Attribute value as Date.</summary>
            <returns>returns the Attribute value as DateTime</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Date type or if the
                value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.DecimalValue">
            <summary>Gets Attribute value as Decimal.</summary>
            <returns>returns the Attribute value as double.</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the FloatingPoint type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.DocumentValue">
            <summary>Gets Attribute value as Document. This value represents the ID of the Document.</summary>
            <returns>returns the Attribute value as long</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Document type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.EncryptedAlphanumericValue">
            <summary>Gets Attribute value as Encrypted Alphanumeric.</summary>
            <returns>returns the Attribute value as string</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Encrypted Alphanumeric type or if the
                value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.FloatingPointValue">
            <summary>Gets Attribute value as Floating Point.</summary>
            <returns>returns the Attribute value as double.</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the FloatingPoint type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.FormattedTextValue">
            <summary>Gets Attribute value as FormattedText.</summary>
            <returns>returns the Attribute value as string</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the FormattedText type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.HasValue">
            <summary>Determines if this AttributeValue has a valid value set.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.IntegerValue">
            <summary>Gets Attribute value as Integer.</summary>
            <returns>returns the Attribute value as a long</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Integer type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.RelationshipValue">
            <summary>Gets Attribute value as Relationship. The value represents the ID of the related object.</summary>
            <returns>returns the Attribute value as long.</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Relationship type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.TextValue">
            <summary>Gets Attribute value as Text.</summary>
            <returns>returns the Attribute value as string</returns>
            <remarks>
                This method throws an exception if the Attribute value is not of the Text type or if the
                value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.Value">
            <summary>Gets the attribute value as a System.object type.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.Name">
            <summary>Gets the name of the attribute.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValue.ClassID">
            <summary>
                Used internally to determine the class that the attribute on this AttributeValue belongs
                to.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValue.ToString">
            <summary>Returns a the string value of the current AttributeValue.</summary>
            <returns>
                Returns a string.Empty when the AttributeValue is blank and the string value of the
                AttributeValue when it is not blank.
            </returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.AttributeValueList">
            <summary>This represents a WorkView Attribute Value List.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.AttributeValueModifier">
            <summary>
                This class represents the modifier for the Attribute values of a WorkView object and is to
                be used when setting Attribute values on a WorkView Object.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValueModifier.SaveHistoryChanges">
            <summary>
                Gets/Sets whether history changes need to be stored upon modifying the WorkView Object.
                This is set to "true" by default. Please note that setting this property to "false"
                automatically sets "SendNotifications" to "false" and Notifications(if any) are not sent.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.AttributeValueModifier.SendNotifications">
            <summary>
                Gets\Sets whether notifications need to be sent upon modifying the WorkView Object. This
                is set to "true" by default.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.ClearAttributeValue(System.String)">
            <summary>Clears the specified attribute value with the specified name from the object.</summary>
            <param name="attributeName">The name of the attribute to be cleared</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.ClearAttributeValue(Hyland.Unity.WorkView.Attribute)">
            <summary>
                Clears the specified attribute value associated to the specified attribute from the
                object.
            </summary>
            <param name="attribute">The attribute to be cleared.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.String,System.String)">
            <summary>
                Sets the string value to the attribute with the specified attributeName. Use this method
                when setting Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attributeName">The attribute name on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.String)">
            <summary>
                Sets the string value to the specified attribute object. Use this method when setting
                Alphanumeric, Text, FormattedText, or EncryptedAlphanumeric attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.String,System.Int64)">
            <summary>
                Sets the long value to the attribute with the specified attributeName. Use this method
                when setting an Integer attribute value, a Relationship attribute value or a Document attribute
                value.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Int64)">
            <summary>
                Sets the long value to the specified attribute object. Use this method when setting an
                Integer attribute value, a Relationship attribute value or a Document attribute value.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.String,System.Decimal)">
            <summary>
                Sets the decimal value on the attribute with the specified attribute name. Use this when
                setting Currency attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Decimal)">
            <summary>
                Sets the decimal value on the specified attribute object. Use this when setting Currency
                attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.String,System.DateTime)">
            <summary>
                Sets the DateTime value to the attribute with the specified attributeName. Use this method
                when setting either Date or Date\Time attribute type values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.DateTime)">
            <summary>
                Sets the DateTime value to the specified attribute object. Use this method when setting
                either Date or Date\Time attribute type values.
            </summary>
            <param name="attribute">The attribute object on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.String,System.Boolean)">
            <summary>
                Sets the bool value to the attribute with the specified attribute name. Use this method
                when setting Boolean type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Boolean)">
            <summary>
                Sets the bool value to the specified attribute object. Use this method when setting
                Boolean type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.String,System.Double)">
            <summary>
                Sets the double value to the attribute with the specified attribute name. Use this method
                when setting Floating Point type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Double)">
            <summary>
                Sets the double value to the specified attribute object. Use this method when setting
                Floating Point type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.ApplyChanges">
            <summary>
                Apply changes to the attribute values for the WorkView Object. Takes the default value of
                "true" for SaveHistoryChanges and SendNotifications properties unless explicitly specified
                otherwise.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.Int64,System.String)">
            <summary>
                Sets the string value to the attribute with the specified attributeID. Use this method
                when setting Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attributeID">The numeric ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.Int64,System.Int64)">
            <summary>
                Sets the long value to the attribute with the specified attributeID. Use this method when
                setting an Integer attribute value, a Relationship attribute value or a Document attribute
                value.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.Int64,System.Decimal)">
            <summary>
                Sets the decimal value on the attribute with the specified attribute ID. Use this when
                setting Currency attribute values.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.Int64,System.DateTime)">
            <summary>
                Sets the DateTime value to the attribute with the specified attributeID. Use this method
                when setting either Date or Date\Time attribute type values.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.Int64,System.Boolean)">
            <summary>
                Sets the bool value to the attribute with the specified attribute ID. Use this method when
                setting Boolean type attribute values.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.AttributeValueModifier.SetAttributeValue(System.Int64,System.Double)">
            <summary>
                Sets the double value to the attribute with the specified attribute ID. Use this method
                when setting Floating Point type attribute values.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.BaseObject">
            <summary>
                Represents the BaseObject for
                CreateObject,DeleteObject,OpenObject,ReadOnlyObject,SaveObject having all common properties.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.BaseObject.ActiveStatus">
            <summary>Returns the ActiveStatus of this WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.BaseObject.CreatedBy">
            <summary>Returns the CreatedBy of this WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.BaseObject.CreatedDate">
            <summary>Returns the CreatedDate of this WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.BaseObject.ID">
            <summary>Returns the ID of this WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.BaseObject.RevisionBy">
            <summary>Returns the RevisionBy of this WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.BaseObject.RevisionDate">
            <summary>Returns the RevisionDate of this WorkView Object.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.Class">
            <summary>Represents a WorkView Class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Class.Attributes">
            <summary>Gets the list of <see cref="T:Hyland.Unity.WorkView.Attribute" />'s belonging to this Class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Class.DocumentFolders">
            <summary>Returns the list of <see cref="T:Hyland.Unity.WorkView.DocumentFolder" />'s associated to this class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Class.ExtendsClass">
            <summary>Returns the source class that the current class is extended from.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Class.KeytypeMaps">
            <summary>Returns the list of key type maps associated to this class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Class.Notifications">
            <summary>Returns the list of <see cref="P:Hyland.Unity.WorkView.Class.Notifications" />'s associated to this class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Class.ID">
            <summary>Gets the unique numeric ID of this Class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Class.Name">
            <summary>Gets the name of this Class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Class.WVApplication">
            <summary>This returns the application that the current class belongs to.</summary>
            <remarks>
                This application is guaranteed to be the current contextual application because the only
                way to retrieve a class in Unity is off of an Application.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.WorkView.Class.CreateDynamicFilterQuery">
            <summary>Returns a dynamic filter query associated to this class.</summary>
            <returns>A dynamic filter query associated to this class. </returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.Class.CreateObject">
            <summary>
                Creates a new WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> for the specified Class and initializes it
                with its default values and an active status set to INACTIVE.
            </summary>
            <returns>A newly created inactive WorkView <see cref="T:Hyland.Unity.WorkView.Object" /></returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.Class.CreateObject(System.Boolean)">
            <summary>
                Creates a new WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> for the specified Class and initializes it
                with its default values and an initial active status set to INACTIVE. This method is used to
                create Inactive objects.
            </summary>
            <param name="activateObjectOnSave">
                If set to "False", then the object is not activated upon save,
                i.e when setting attribute values on this newly created object using an AttributeValueModifier,
                calling ApplyChanges() will NOT activate the object. If set to "True", which is the default
                behavior, the object is activated upon save, i.e. when setting attribute values on this newly
                created object using an AttributeValueModifier, calling ApplyChanges() will activate the
                object.
            </param>
            <returns>A newly created inactive WorkView <see cref="T:Hyland.Unity.WorkView.Object" /></returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.Class.GetObjectByID(System.Int64)">
            <summary>Gets a WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> with the specified ID.</summary>
            <param name="objectID">The unique numeric identifier of the object.</param>
            <returns>The WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> with the specified ID.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.ClassList">
            <summary>Represents a WorkView Class List.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.WritableClassList">
            <summary>Represents a WorkView Class List that can have classes added.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WritableClassList.Add(Hyland.Unity.WorkView.Class)">
            <summary>Adds a new Class to this list.</summary>
            <param name="wvclass">The external object to add.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.ClientFilterQuery">
            <summary>
                Represents a WorkView Filter Query in the context of the 'OnWorkViewBeforeExecuteFilter'
                script.
            </summary>
            <remarks>
                This class is used solely by an IWorkViewBeforeExecuteFilterScript and is not intended to
                be used from a stand alone script.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.ClientFilterQuery.BaseObject">
            <summary>
                Returns the Object that the currently executing Filter is bound to. This property only
                applies to Filters that are embedded on an Object (i.e. Embedded on a view).
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ClientFilterQuery.DynamicConstraints">
            <summary>
                Returns the collection of constraints that have been dynamically added to this executing
                filter query. This collection does not include any of the fixed constraints (those are
                accessible via the 'Constraints' collection).
            </summary>
            <returns> A collection of FilterConstraint objects.</returns>
        </member>
        <member name="P:Hyland.Unity.WorkView.ClientFilterQuery.DynamicConstraintsCleared">
            <summary>Returns whether the script cleared the collection of dynamic constraints</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQuery.AddConstraint(Hyland.Unity.WorkView.FilterConstraint)">
            <summary>Adds the specified constraint to the filter query.</summary>
            <param name="constraint">The constraint to apply to this Filter Query.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQuery.ClearDynamicConstraints">
            <summary>Clears the collection of dynamic constraints that have been applied to this filter query.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQuery.SetFilter(Hyland.Unity.WorkView.FilterConstraintList)">
            <summary>Initializes this filter query to be associated with its filter.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ClientFilterQueryResultItem">
            <summary>
                Represents a Client Filter Query result item. This object will be used to represent a
                particular row that will be displayed as a result of a filter query after the values are
                retrieved but before the results are displayed in the client. Within the Unity scripting
                interface the user will be able to access data from the original query and modify the cells of
                each added column through this interface.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItem.#ctor(Hyland.Unity.Application,System.Collections.Generic.Dictionary{System.String,System.Object},Hyland.Unity.WorkView.Class,System.Int64)">
            <summary>
                Constructs an object to maintain a particular row of data that will be displayed by the
                WorkView Client as the result of a filter query operation.
            </summary>
            <param name="app">The Unity application object</param>
            <param name="objectID">The objectID of the WorkView object for this row</param>
            <param name="values">The dataAddress and values for all attributes of the object for this row</param>
            <param name="wvClass">The class of the object for this row</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItem.SetFilterColumnValue(System.String,System.String)">
            <summary>
                Modifies an existing column value of WorkView Attribute type Alphanumeric, Text,
                Formatted Text, or Encrypted Alphanumeric.
            </summary>
            <param name="columnName">
                The dotted address for a particular attribute of the current object or the
                header of a column that has been added for this particular row.
            </param>
            <param name="value">
                The Alphanumeric, Text, Formatted Text, or Encrypted Alphanumeric value for the column representing this
                WorkView attribute or added column.
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItem.SetFilterColumnValue(System.String,System.DateTime)">
            <summary>Modifies an existing column value of WorkView Attribute type DateTime or Date.</summary>
            <param name="columnName">
                The dotted address for a particular attribute of the current object or the
                header of a column that has been added for this particular row.
            </param>
            <param name="value">
                The DateTime or Date value for the column representing this WorkView attribute
                or added column.
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItem.SetFilterColumnValue(System.String,System.Decimal)">
            <summary>Modifies an existing column value of WorkView Attribute type Decimal or Currency.</summary>
            <param name="columnName">
                The dotted address for a particular attribute of the current object or the
                header of a column that has been added for this particular row.
            </param>
            <param name="value">
                The Decimal value for the column representing this WorkView attribute or added
                column.  This method will accept decimals for setting attributes of type Currency as well.
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItem.SetFilterColumnValue(System.String,System.Double)">
            <summary>Modifies an existing column value of WorkView Attribute type Float.</summary>
            <param name="columnName">
                The dotted address for a particular attribute of the current object or the
                header of a column that has been added for this particular row.
            </param>
            <param name="value">
                The Float value for the column representing this WorkView attribute or added
                column.
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItem.SetFilterColumnValue(System.String,System.Int64)">
            <summary>Modifies an existing column value of WorkView Attribute type Integer.</summary>
            <param name="columnName">
                The dotted address for a particular attribute of the current object or the
                header of a column that has been added for this particular row.
            </param>
            <param name="value">
                The Integer value for the column representing this WorkView attribute or added
                column.
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItem.SetFilterColumnValue(System.String,System.Boolean)">
            <summary>Modifies an existing column value of WorkView Attribute type Boolean.</summary>
            <param name="columnName">
                The dotted address for a particular attribute of the current object or the
                header of a column that has been added for this particular row.
            </param>
            <param name="value">
                The Boolean value for the column representing this WorkView attribute or added
                column.
            </param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItem.SetFilterColumnValue(System.String,System.Object,Hyland.Unity.WorkView.AttributeType)">
            <summary>Modifies an existing column value.</summary>
            <param name="columnName">
                The dotted address for a particular attribute of the current object or the
                header of a column that has been added for this particular row.
            </param>
            <param name="value">The value for the column representing this WorkView attribute or added column.</param>
            <param name="type">The attribute type of the value.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.ClientFilterQueryResultItemList">
            <summary>List of FilterQueryResultItemsElem</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItemList.#ctor">
            <summary>
                Construction of a list of ClientFilterQueryResultItem objects.  This represents all of the
                rows that will be displayed by the client when a filter query has run.  The user can add
                columns in this interface.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ClientFilterQueryResultItemList.AddColumn(System.String,Hyland.Unity.WorkView.AttributeType)">
            <summary>Adds a column to the current Filter query result List.</summary>
            <param name="displayName">The name of the column being added.</param>
            <param name="type">
                The attribute type of the column being added.  This can be any one of the
                WorkView attribute data types that are valid to use in a filter query (Relations and Documents
                are excluded; an exception will be thrown if either of these types is specified).
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.CreateObject">
            <summary>Represents a WorkView Object in the context of the 'OnWorkViewCreateObject' script.</summary>
            <remarks>
                This class is used solely by an 'IWorkViewCreateObjectScript' and is not intended to be
                used from a stand alone script.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.CreateObject.Activate">
            <summary>
                Gets \ Sets whether to activate the newly created object. This value is set to "false" by
                default.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.CreateObject.AttributeValues">
            <summary>
                Represents the current attribute values on this WorkView object. These attribute values
                represent the default values for this object.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.CreateObject.Class">
            <summary>Gets the Class to which this Object belongs.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.CreateObject.ClearedAttributeValues">
            <summary>Represents the currently cleared attribute values on this WorkView object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.CreateObject.ModifiedAttributeValues">
            <summary>Represents the currently modified attribute values on this WorkView object.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.ClearAttributeValue(System.String)">
            <summary>Clears the specified attribute value with the specified name from the object.</summary>
            <param name="attributeName">The name of the attribute to be cleared</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.ClearAttributeValue(Hyland.Unity.WorkView.Attribute)">
            <summary>
                Clears the specified attribute value associated to the specified attribute from the
                object.
            </summary>
            <param name="attribute">The attribute to be cleared.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.GetRelatedObject(System.String)">
            <summary>
                Gets the related WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> associated to the specified dotted
                address. An example of the dotted address would be "Vendor.Buyer".
            </summary>
            <param name="dottedAddress">
                A string identifying the dotted symbolic address of the desired related
                object.
            </param>
            <returns>The related WorkView <see cref="T:Hyland.Unity.WorkView.Object" />.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(System.String,System.String)">
            <summary>
                Sets the string value to the attribute with the specified attributeName. Use this method
                when setting Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attributeName">The attribute name on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.String)">
            <summary>
                Sets the string value to the specified attribute object. Use this method when setting
                Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(System.String,System.Int64)">
            <summary>
                Sets the long value to the attribute with the specified attributeName. Use this method
                when setting an Integer attribute value, a Relationship attribute value or a Document attribute
                value.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Int64)">
            <summary>
                Sets the long value to the specified attribute object. Use this method when setting an
                Integer attribute value, a Relationship attribute value or a Document attribute value.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(System.String,System.Decimal)">
            <summary>
                Sets the decimal value on the attribute with the specified attribute name. Use this when
                setting Currency attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Decimal)">
            <summary>
                Sets the decimal value on the specified attribute object. Use this when setting Currency
                attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(System.String,System.DateTime)">
            <summary>
                Sets the DateTime value to the attribute with the specified attributeName. Use this method
                when setting either Date or Date\Time attribute type values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.DateTime)">
            <summary>
                Sets the DateTime value to the specified attribute object. Use this method when setting
                either Date or Date\Time attribute type values.
            </summary>
            <param name="attribute">The attribute object on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(System.String,System.Boolean)">
            <summary>
                Sets the bool value to the attribute with the specified attribute name. Use this method
                when setting Boolean type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Boolean)">
            <summary>
                Sets the bool value to the specified attribute object. Use this method when setting
                Boolean type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(System.String,System.Double)">
            <summary>
                Sets the double value to the attribute with the specified attribute name. Use this method
                when setting Floating Point type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.CreateObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Double)">
            <summary>
                Sets the double value to the specified attribute object. Use this method when setting
                Floating Point type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.CreateObjectBaseObject">
            <summary>Represents a WorkView Object that a new object is created from (i.e. embedded filter).</summary>
            <remarks>
                This class is used solely by an 'IWorkViewCreateObjectScript' and is not intended to be
                used from a stand alone script.
            </remarks>
        </member>
        <member name="T:Hyland.Unity.WorkView.Dataset">
            <summary>Represents a WorkView DataSet.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Dataset.DatasetValues">
            <summary>Returns the values within the Dataset</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Dataset.Name">
            <summary>Returns the Name of the Dataset</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Dataset.ID">
            <summary>Returns the ID of the Dataset</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.DatasetList">
            <summary>Represents a list of WorkView Datasets.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.DatasetValue">
            <summary>Represents a WorkView DataSetValue.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DatasetValue.Value">
            <summary>Returns the Data Value of the DatasetValue</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.DatasetValueList">
            <summary>Represents a list of WorkView DatasetValues.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.DatasetValueList.Find(System.String)">
            <summary>Finds the DatasetValue object in the list by the supplied value string.</summary>
            <param name="value">The string to match on the value of the DatasetValue object.</param>
            <returns>The DatasetValue containing the string supplied.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.DeleteObject">
            <summary>Represents a WorkView Object in the context of the 'OnWorkViewBeforeDeleteObject' script.</summary>
            <remarks>
                This class is used solely by an 'IWorkViewBeforeDeleteObjectScript' and is not intended to
                be used from a stand alone script.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.DeleteObject.AttributeValues">
            <summary>Represents the attribute values on the current WorkView object that is being deleted.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DeleteObject.Class">
            <summary>Gets the Class to which this Object belongs.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.DeleteObject.GetRelatedObject(System.String)">
            <summary>
                Gets the related WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> associated to the specified dotted
                address. An example of the dotted address would be "Vendor.Buyer".
            </summary>
            <param name="dottedAddress">
                A string identifying the dotted symbolic address of the desired related
                object.
            </param>
            <returns>The related WorkView <see cref="T:Hyland.Unity.WorkView.Object" />.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.DependentObject">
            <summary>Represents a WorkView object that is dependent on another WorkView object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DependentObject.Class">
            <summary>Gets the Class to which this Object belongs.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DependentObject.ID">
            <summary>Gets the unique numeric ID of the WorkView Object.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.DependentObjectList">
            <summary>Represents a list of Dependent WorkView Objects.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.DocumentFolder">
            <summary>Represents a Document Folder associated to a WorkView class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DocumentFolder.ID">
            <summary>Gets the ID of the Document Folder.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DocumentFolder.Name">
            <summary>Gets the Name of the Document Folder.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DocumentFolder.KeyMapID">
            <summary>Gets the ID of the KeyMap that is configured for this Document Folder.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.DocumentFolderList">
            <summary>Represents a WorkView DocumentFolder List.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.DocumentFolderList.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.DynamicFilterQuery">
            <summary>Represents a dynamic Filter query.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DynamicFilterQuery.Class">
            <summary>Gets the Class of the source Filter for this Filter Query.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.DynamicFilterQuery.WithLikeConstraintsGrouped">
            <summary>Gets or sets whether or not to group patterns of constraints that are applied to the same data address.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.DynamicFilterQuery.AddFilterColumn(System.String)">
            <summary>
                Adds the column with the specified dotted address to be retrieved as one of the result
                columns for this query.
            </summary>
            <param name="dottedAddress">The dottedAddress</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.DynamicFilterQuery.Execute(System.Int64)">
            <summary>Executes the current dynamic Filter Query.  Set WithLikeConstraintsGrouped to true to get correct results when creating constraint chains on an individual data address.</summary>
            <param name="maximum">The maximum number of results to return.</param>
            <returns> The result list associated to the execution of the current Filter Query. </returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.DynamicFilterQuery.ExecuteCount">
            <summary>Executes the Filter Query and returns a count of the number of results obtained.</summary>
            <returns>The count of the result items associated to the execution of the current Filter Query.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.ActionType">
            <summary>Represents the various Action Types for WorkView.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.UnDefined">
            <summary>Undefined Action</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.ExecuteScript">
            <summary>Execute script.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.ModifyObjectAttribute">
            <summary>Modify Attribute.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.ExecuteActionList">
            <summary>Execute a list of Actions.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.DisplayEForm">
            <summary>Display E-Form Action.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.AutoSaveEForm">
            <summary>Auto Save an E-Form Action.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.ModifyObjectClass">
            <summary>Modify an Object Class.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.SendNotification">
            <summary>Send a Notification Action.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.SelectModifyObjectClass">
            <summary>Modify an Object Class by selection.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.DisplayFilteredTemplate">
            <summary>Display Template Filter Action.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.ExecuteUnityScript">
            <summary>Execute a Unity Script.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.AddToWorkflowLifeCycle">
            <summary>Add the current object to the specified Workflow Life Cycle</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActionType.ExecuteWorkflowSystemTask">
            <summary>Execute the specified system task on the current object.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ActiveStatus">
            <summary>Represents the Active Status of a WorkView Object.</summary>
            <value>0 - Active</value>
            <value>1 - Inactive</value>
            <value>2 - Deleted</value>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActiveStatus.Active">
            <summary>Represents that the Object is active.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActiveStatus.Inactive">
            <summary>Represents that the Object is Inactive.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ActiveStatus.Deleted">
            <summary>Represents that the Object is deleted.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.AttributeType">
            <summary>Represents different types for an Attribute.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Integer">
            <summary>Integer.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Currency">
            <summary>Currency.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Float">
            <summary>Float.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Date">
            <summary>Date</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.DateTime">
            <summary>Date Time</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Alphanumeric">
            <summary>Alphanumeric.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Text">
            <summary>Text</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Relation">
            <summary>Relation.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Boolean">
            <summary>Boolean.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Document">
            <summary>Document.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.FormattedText">
            <summary>Formatted Text</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.Decimal">
            <summary>Decimal</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.AttributeType.EncryptedAlphanumeric">
            <summary>Encrypted Alphanumeric</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.Connector">
            <summary>Represents the connectors for a Filter Query</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Connector.AndConnector">
            <summary>And</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Connector.OrConnector">
            <summary>Or</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.DisplayContentType">
            <summary>Represents the possible status codes for different WorkView operations.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.DisplayContentType.Text">
            <summary>Display data as text.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.DisplayContentType.HTML">
            <summary>Display data as an HTML Document.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.DisplayContentType.MicrosoftExcel">
            <summary>Display data as an Excel spreadsheet.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.DisplayContentType.MicrosoftWord">
            <summary>Display data as a Microsoft Word document.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.Grouping">
            <summary>Represents a Grouping</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Grouping.NoParenthesis">
            <summary>No Parenthesis</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Grouping.OpenParenthesis">
            <summary>Open parenthesis</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Grouping.CloseParenthesis">
            <summary>Closed Parenthesis</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.NotificationTestType">
            <summary>Notification TestType.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.Always">
            <summary>Always.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.WasNew">
            <summary>WasNew.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.WasChanged">
            <summary>WasChanged.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.WasDeleted">
            <summary>WasDeleted.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.TestWithScript">
            <summary>Test with script.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.TestWithScriptWhenChanged">
            <summary>Test with script when changed.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.TestObjectAgainstFilter">
            <summary>Test object against filter.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.FilterForDependentObjects">
            <summary>Filter for dependent object.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.TestFilterCount">
            <summary>Test filter count.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.TestAttributeValue">
            <summary>Test attribute value.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.TestAttributeValueChangedTo">
            <summary>Test attribute value changed to.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationTestType.TestAttributeValueChanged">
            <summary>Test attribute value changed.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.NotificationType">
            <summary>The Notification type.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationType.NoNotificationAction">
            <summary>No Notification.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.NotificationType.NotifyByEmail">
            <summary>Notify by email.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.Operator">
            <summary>Represents WorkView Operator.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.Equal">
            <summary>Equal</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.LessThan">
            <summary>Less than</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.GreaterThan">
            <summary>Greater than</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.LessThanEqual">
            <summary>Less than or equal to</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.GreaterThanEqual">
            <summary>Greater than</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.NotEqual">
            <summary>Not Equal</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.Like">
            <summary>Like</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.NotLike">
            <summary>Not Like</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.Null">
            <summary>Null</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.Operator.NotNull">
            <summary>Not Null</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.SortType">
            <summary>Represents the SortType</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.SortType.DESCENDING">
            <summary>Descending.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.SortType.ASCENDING">
            <summary>Ascending.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.UIActionType">
            <summary>Represents the UIAction Types.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.UIActionType.OpenObject">
            <summary>Displays a message box.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.UIActionType.MessageBox">
            <summary>Opens a WorkView Object.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.UIActionType.CloseObject">
            <summary>Closes a WorkView Object.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.UIActionType.DisplayDocument">
            <summary>Displays a document.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.Filter">
            <summary>Represents a WorkView Filter.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Filter.Class">
            <summary>Returns the Class associated to this Filter.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Filter.ID">
            <summary>Returns the ID of the Filter.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Filter.Name">
            <summary>Returns the Name of the Filter</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.Filter.CreateFilterQuery">
            <summary>Returns a Filter query associated to the specified filter object.</summary>
            <returns>A <see cref="T:Hyland.Unity.WorkView.FilterQuery" /> object.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterList">
            <summary>Represents a list of WorkView Filters.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterColumnValue">
            <summary>Represents a single filter column value.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.AlphanumericValue">
            <summary>Gets the filter column value as a string.</summary>
            <returns>returns the filter column value as a string</returns>
            <remarks>
                This method throws an exception if the Attribute type is not one of the Alphanumeric type
                or if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.BooleanValue">
            <summary>Gets the filter column value as boolean.</summary>
            <returns>Returns the filter column value as boolean.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the Boolean type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.CurrencyValue">
            <summary>Gets the filter column value as Currency.</summary>
            <returns>Returns the filter column value as Currency.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the Currency type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.DateTimeValue">
            <summary>Gets the filter column value as DateTime.</summary>
            <returns>Returns the filter column value as DateTime.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the DateTime type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.DateValue">
            <summary>Gets the filter column value as Date.</summary>
            <returns>Returns the filter column value as DateTime.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the Date type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.DecimalValue">
            <summary>Gets the filter column value as Decimal.</summary>
            <returns>Returns the filter column value as Decimal.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the Decimal type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.DocumentValue">
            <summary>Gets the filter column value as a Document value.</summary>
            <returns>Returns the filter column value as long.</returns>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.EncryptedAlphanumericValue">
            <summary>Gets the filter column value as EncryptedAlphanumeric.</summary>
            <returns>Returns the filter column value as a string.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the EncryptedAlphanumeric
                type or if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.FloatingPointValue">
            <summary>Gets the filter column value as FloatingPoint.</summary>
            <returns>Returns the filter column value as a double.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the Floating Point
                type or if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.FormattedTextValue">
            <summary>Gets the filter column value as FormattedText.</summary>
            <returns>Returns the filter column value as a string.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the FormattedText
                type or if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.HasValue">
            <summary>Gets whether the current filter column value has a valid value.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.IntegerValue">
            <summary>Gets the filter column value as integer.</summary>
            <returns>Returns the filter column value as integer.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the Integer type or
                if the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.TextValue">
            <summary>Gets the filter column value as Text.</summary>
            <returns>Returns the filter column value as a string.</returns>
            <remarks>
                This method throws an exception if the Attribute Value is not one of the Text type or if
                the value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterColumnValue.Value">
            <summary>Gets the Filter column value as a System.Object type.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.FilterColumnValue.checkType(Hyland.Unity.WorkView.AttributeType,Hyland.Unity.WorkView.AttributeType)">
            <summary>
                Method to check whether the current attribute type matches the type of the Filter column
                value.
            </summary>
            <param name="typeToCheckFor"></param>
            <param name="type"></param>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterQuery">
            <summary>Represents a Filter Query.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterQueryBaseObject">
            <summary>Represents a WorkView Object that a Filter is bound to.</summary>
            <remarks>
                This class is used solely by an 'IWorkViewBeforeExecuteFilterScript' and is not intended
                to be used from a stand alone script.
            </remarks>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterConstraint">
            <summary>Represents a WorkView Filter Constraint.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.AlphanumericValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.BooleanValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.Connector">
            <summary>Returns the Connector applied between this constraint and the next.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.ConstraintType">
            <summary>Returns the type of the attribute associated to this constraint.</summary>
            <remarks>
                If this constraint is associated to a related attribute (i.e.
                RelatedVendor.PrimaryContact.Fullname), this will return the type of the 'last' attribute (i.e.
                the type of the Fullname attribute).
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.CurrencyValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.DateTimeValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.DateValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.DecimalValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.DocumentValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.DottedAddress">
            <summary>
                Returns the address of the WorkView Attribute by which the FilterQuery will be
                constrained.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.EncryptedAlphanumericValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.FloatingPointValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.FormattedTextValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.Grouping">
            <summary>Returns the grouping options for this FilterQueryConstraint.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.HasValue">
            <summary>Returns whether this constraint has a valid value.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.IntegerValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.Operator">
            <summary>Returns the <see cref="P:Hyland.Unity.WorkView.FilterConstraint.Operator" /> applied to this FilterQueryConstraint.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.RelationshipValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.TextValue">
            <summary>Returns the value of this constraint.</summary>
            <returns>Returns the value of this constraint.</returns>
            <remarks>
                This method throws an exception if the value is not of the proper type or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.Value">
            <summary>Gets the value of this constraint as a System.Object type.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.Attribute">
            <summary>
                Returns the attribute this constraint is configured for. If the constraint is configured
                for a related attribute, this will return the last attribute in the dotted address (i.e.
                Project.Owner.Name will return the 'Name' attribute).
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.Filter">
            <summary>Returns the associated filter.</summary>
            <remarks>
                This is NOT guaranteed to be set. If this is a dynamic filter query, we do not have a
                filter; only a class.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterConstraint.Class">
            <summary>Returns the associated Class.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.FilterConstraint.SetValue(System.Object)">
            <summary>Sets the underlying, strongly-typed value of this constraint.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterConstraintList">
            <summary>Represents a list of constraints.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ExecutableFilterQuery">
            <summary>Represents a filter query that can be executed via the API.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExecutableFilterQuery.#ctor(Hyland.Unity.Application)">
            <summary>Initializes a new instance of a filter query.</summary>
            <param name="app">The connected Application object</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExecutableFilterQuery.#ctor(Hyland.Unity.Application,Hyland.Unity.WorkView.Filter)">
            <summary>Initializes a new instance of a filter query.</summary>
            <param name="app">The connected Application object</param>
            <param name="filter">The filter this filter query is associated to.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExecutableFilterQuery.Execute(System.Int64)">
            <summary>Executes the current Filter Query.</summary>
            <param name="maximum">The maximum number of results to return.</param>
            <returns> The result list associated to the execution of the current Filter Query. </returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExecutableFilterQuery.ExecuteCount">
            <summary>Executes the Filter Query and returns a count of the number of results obtained.</summary>
            <returns>The count of the result items associated to the execution of the current Filter Query.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExecutableFilterQuery.AddRows(System.Xml.XmlDocument,System.Data.DataTable)">
            <summary>
                This function iterates through the passed XmlDocument, which holds the results of an
                executed filter query, and adds rows to a DataTable object.  The DataTable is then used as a
                DataSource for the DataGrid.
            </summary>
            <param name="doc">XmlDocument that holds the results of an executed Filter Query.</param>
            <param name="dataTable">DataTable to be populated by passed XmlDocument.</param>
            <returns>The DataTable object.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExecutableFilterQuery.ConstructDataTable(System.String)">
            <summary>Constructs the results table for this filter query.</summary>
            <param name="resultXml">The xml results.</param>
            <returns>The results table for this filter query.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExecutableFilterQuery.CreateDataTable(System.Xml.XmlDocument)">
            <summary>
                Instantiates and adds header columns to DataTable object.  Basically, the purpose of this
                function is to get a datatable ready for rows to be added to it.
            </summary>
            <param name="doc">XmlDocument that holds the results of an executed Filter Query.</param>
            <returns>DataTable to be populated by passed XmlDocument.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterQueryBase">
            <summary>The base for all filter query classes.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.FilterQueryBase.#ctor(Hyland.Unity.Application)">
            <summary>
            Initializes a new instance of a filter query.
            </summary>
            <param name="app">The connected Application object</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.FilterQueryBase.#ctor(Hyland.Unity.Application,Hyland.Unity.WorkView.Filter)">
            <summary>
            Initializes a new instance of a filter query.
            </summary>
            <param name="app">The connected Application object</param>
            <param name="filter">The filter this filter query is associated to.</param>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.Filter">
            <summary>
            Gets/Sets the underlying filter.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.ConstraintList">
            <summary>
            DO NOT DELETE THIS PROPERTY
            Constraints associated to the FilterQuery. 
            This will be used when calling Execute methods as they also contain user added constraint items and we do not want to make a service request if the list is null.
            We do not want to enforce user into using the pre-configured constraints unless user requests them before by calling Constraints property before executing the FilterQuery.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.SortList">
            <summary>
            DO NOT DELETE THIS PROPERTY
            Sorts associated to the filter query.
            This will be used when calling Execute methods as they also contain user added sort items and we do not want to make a service request if the list is null.
            We do not want to enforce users into using the pre-configured sorts unless user requests them before by calling Sorts property before executing the FilterQuery.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.ID">
            <summary>
            Gets the ID of the source WorkView Filter for this Filter Query.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.Name">
            <summary>
            Gets the Name of the source WorkView Filter for this Filter Query.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.Class">
            <summary>Gets the Class of the source Filter for this Filter Query.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.ViewAttributes">
            <summary>The collection of view attributes that are associated to this filter query.</summary>
            <returns> A collection of FilterViewAttribute objects that are used in by this filter query. </returns>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.Constraints">
            <summary>
            The collection of constraints that are associated to this filter query.
            </summary>
            <returns> A collection of FilterConstraint objects that are used in by this filter query. </returns>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryBase.Sorts">
            <summary>
            The collection of sorts that are associated to this filter query.
            </summary>
            <returns> A collection of FilterSort objects that are used in by this filter query. </returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.ModifiableFilterQuery">
            <summary>Represents a filter query that can be modified via the API.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ModifiableFilterQuery._truncateTextFields">
            <summary>
                Default behavior is to truncate long text - legacy behavior. Caller must override to get
                full text blobs.
            </summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ModifiableFilterQuery._addConstraints">
            <summary>This list maintains the sorts added using AddConstraints method.</summary>
        </member>
        <member name="F:Hyland.Unity.WorkView.ModifiableFilterQuery._addSorts">
            <summary>This list maintains the sorts added using AddSort method.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ModifiableFilterQuery.TruncateTextFields">
            <summary>
                Gets/Sets the mode for long text retrieval.  Defaults to truncating text at 255
                characters, but can be set FALSE to get ALL text from long-texted attributes.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ModifiableFilterQuery.AddedConstraints">
            <summary>Gets list of constraints added using AddConstraint method.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ModifiableFilterQuery.AddedSorts">
            <summary>Gets the list of sorts added using AddSort method.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.#ctor(Hyland.Unity.Application)">
            <summary>Initializes a new instance of a modifiable filter query.</summary>
            <param name="app">The connected Application object</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.#ctor(Hyland.Unity.Application,Hyland.Unity.WorkView.Filter)">
            <summary>Initializes a new instance of a modifiable filter query.</summary>
            <param name="app">The connected Application object</param>
            <param name="filter">The filter this filter query is associated to.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.String)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="op">Represents a WorkView Operator Enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.Int64)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="op">Represents a WorkView Operator Enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.Decimal)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="op">Represents a WorkView Operator Enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.DateTime)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="op">Represents a WorkView Operator Enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.Double)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="op">Represents a WorkView Operator Enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.Boolean)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="op">Represents a WorkView Operator Enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.String,Hyland.Unity.WorkView.Connector,Hyland.Unity.WorkView.Grouping)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="wvOperator">Represents a WorkView Operator enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
            <param name="connector">Represents a WorkView connector which could be 'AND' or 'OR'</param>
            <param name="grouping">Represents a grouping for the constraint.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.Int64,Hyland.Unity.WorkView.Connector,Hyland.Unity.WorkView.Grouping)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="wvOperator">Represents a WorkView Operator enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
            <param name="connector">Represents a WorkView connector which could be 'AND' or 'OR'</param>
            <param name="grouping">Represents a grouping for the constraint.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.DateTime,Hyland.Unity.WorkView.Connector,Hyland.Unity.WorkView.Grouping)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="wvOperator">Represents a WorkView Operator enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
            <param name="connector">Represents a WorkView connector which could be 'AND' or 'OR'</param>
            <param name="grouping">Represents a grouping for the constraint.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.Double,Hyland.Unity.WorkView.Connector,Hyland.Unity.WorkView.Grouping)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="wvOperator">Represents a WorkView Operator enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
            <param name="connector">Represents a WorkView connector which could be 'AND' or 'OR'</param>
            <param name="grouping">Represents a grouping for the constraint.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.Decimal,Hyland.Unity.WorkView.Connector,Hyland.Unity.WorkView.Grouping)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="wvOperator">Represents a WorkView Operator enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
            <param name="connector">Represents a WorkView connector which could be 'AND' or 'OR'</param>
            <param name="grouping">Represents a grouping for the constraint.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddConstraint(System.String,Hyland.Unity.WorkView.Operator,System.Boolean,Hyland.Unity.WorkView.Connector,Hyland.Unity.WorkView.Grouping)">
            <summary>Adds a constraint to the filter query.</summary>
            <param name="dottedAddress">
                The address of the constraint Attribute that is being applied to this
                Filter Query.
            </param>
            <param name="wvOperator">Represents a WorkView Operator enumeration.</param>
            <param name="value">Represents the value of the attribute on which the search is to be performed.</param>
            <param name="connector">Represents a WorkView connector which could be 'AND' or 'OR'</param>
            <param name="grouping">Represents a grouping for the constraint.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ModifiableFilterQuery.AddSort(System.String,Hyland.Unity.WorkView.SortType)">
            <summary>Adds a sort to this filter query.</summary>
            <param name="dottedAddress">
                The address of the sort attribute that is being applied to this filter
                query.
            </param>
            <param name="sortType">
                The sort criteria (ASCENDING or DESCENDING) to be applied on the specified
                dottedAddress.
            </param>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterSort">
            <summary>Represents a sort configured for a WorkView filter query.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterSort.DottedAddress">
            <summary>Returns the address of the WorkView Attribute by which the FilterQuery will be sorted.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterSort.SortType">
            <summary>Returns whether the sort is ascending or descending.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterSortList">
            <summary>Represents a list of sorts for a filter.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterViewAttribute">
            <summary>Represents a View Attribute for a filter query.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterViewAttribute.DottedAddress">
            <summary>Returns the address of the WorkView Attribute that will be displayed in the filter.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterViewAttribute.Heading">
            <summary>The Heading value of the View Attribute</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterViewAttributeList">
            <summary>Represents a particular filter's View Attributes</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FullTextCatalog">
            <summary>Represents a WorkView full text catalog.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FullTextCatalog.AssociatedClasses">
            <summary>Returns a collection of classes associated to the current full text catalog.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FullTextCatalog.ID">
            <summary>Represents the unique numeric identifier of the full text catalog.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FullTextCatalog.Name">
            <summary>Represents the name of  the full text catalog.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.FullTextCatalog.CreateFullTextQuery">
            <summary>Creates a Full text search query associated to the current catalog.</summary>
            <returns>A full text query object that can be used to execute a full text search query.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.FullTextCatalogList">
            <summary>Represents a collection of catalogs configured for Full Text Searching.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FullTextQuery">
            <summary>Represents a Full Text Catalog Query.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FullTextQuery.FullTextCatalog">
            <summary>Returns the Full text catalog associated to the current full text query.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.FullTextQuery.AddClassToSearch(Hyland.Unity.WorkView.Class)">
            <summary>
                If multiple classes have been configured for the catalog associated to the current full
                text query, you can specify to search on only specific classes within the catalog. By default,
                if you do not add any classes to restrict your search on, the current full text query performs
                a search against ALL classes configured for the catalog.
            </summary>
            <param name="wvClass">A class in which to search.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.FullTextQuery.AddCreatedDateRange(System.DateTime,System.DateTime)">
            <summary>
                Adds a created date range to be applied as a constraint to the current full text query.
                This will constrain the search to return WorkView objects created during the specified time
                period.
            </summary>
            <param name="fromDate">Date to start at.</param>
            <param name="toDate">Date to range to.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.FullTextQuery.AddModifiedDateRange(System.DateTime,System.DateTime)">
            <summary>
                Adds a modified date range to be applied as a constraint to the current full text query.
                This will constrain the search to return WorkView objects modified during the specified time
                period.
            </summary>
            <param name="fromDate">Date to start at.</param>
            <param name="toDate">Date to range to.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.FullTextQuery.AddTextSearchConstraint(System.String)">
            <summary>Adds a text search constraint to the full text query.</summary>
            <param name="queryString">The search string.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.FullTextQuery.Execute(System.Int64)">
            <summary>Executes the current full text query with the specified constraints.</summary>
            <param name="count">The number of results to return.</param>
            <returns>Results of the full text query search.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.FullTextQueryResultItem">
            <summary>Represents a single item of the result set of a full text query.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FullTextQueryResultItem.ID">
            <summary>Represents the unique identifier of the item.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FullTextQueryResultItem.Name">
            <summary>Represents the name of the item.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FullTextQueryResultItemList">
            <summary>Represents a list of Full Text Query result set.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.FullTextQueryResultObject">
            <summary>Represents a WorkView object associated to an item of a Full text query result set.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FullTextQueryResultObject.Class">
            <summary>Gets the class associated to the WorkView object associated to this item.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.FullTextQueryResultObject.GetObject">
            <summary>Gets the WorkView object associated to the current full text query result item.</summary>
            <returns>WorkView object</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.Keytype">
            <summary>Represents a WorkView Keytype.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Keytype.DataAddress">
            <summary>Returns the DataAddress associated to the keytype.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Keytype.ID">
            <summary>Returns the ID of the keytype.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Keytype.KeyWordNum">
            <summary>Returns the KeyTypeNum associated to the keytype.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Keytype.Operator">
            <summary>Returns the Operator associated to the keytype.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Keytype.Value">
            <summary>Returns the Value associated to the keytype.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.KeytypeList">
            <summary>Represents a list of WorkView Keytypes.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.KeytypeMap">
            <summary>Represents a WorkView KeytypeMap.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.KeytypeMap.ClassID">
            <summary>Returns the associated class id of the keytype map.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.KeytypeMap.Keytypes">
            <summary>Returns the keytypes within the keytype map.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.KeytypeMap.ID">
            <summary>Returns the ID of the keytype map.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.KeytypeMap.Name">
            <summary>Returns the Name of the keytype map.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.KeytypeMapList">
            <summary>Represents a list of WorkView KeytypeMaps.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1">
            <summary>Base list for Unity WorkView specific lists.</summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
        </member>
        <member name="P:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1.Item(System.Int32)">
            <summary>Indexer</summary>
            <param name="index">Index</param>
            <returns>Item at the index</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1.Find(System.String)">
            <summary>Finds the IIndexedByName objects by the supplied Name</summary>
            <param name="name">Name</param>
            <returns>IIndexedByName object</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1.Add(`0)">
            <summary>Adds an Item to the end of the list</summary>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1.Clear">
            <summary>Clears the list</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1.Insert(System.Int32,`0)">
            <summary>Inserts the item at the index.</summary>
            <param name="index">Index</param>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1.Remove(`0)">
            <summary>Removes Item from the list.</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1.RemoveAt(System.Int32)">
            <summary>Removes the item at the index.</summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.NameOnlySearchableIndexedList`1.Find(System.Int64)">
            <summary>Finds the IIndexedByID objects by the supplied ID</summary>
            <param name="id">ID</param>
            <returns>IIndexedByID object</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.Notification">
            <summary>Represents a WorkView Notification.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Notification.NotificationTestType">
            <summary>Gets the Notification test type.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Notification.NotificationType">
            <summary>Gets the Notification type.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Notification.ID">
            <summary>Gets the ID of the Notification.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Notification.Name">
            <summary>Gets the Name of the Notification</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.Notification.Send">
            <summary>Sends out the current notification.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.Notification.Send(System.Int64)">
            <summary>
                Sends out the current notification by taking into context the WorkView object specified by
                the object id.
            </summary>
            <param name="objectID">The unique numeric identifier of the WorkView object.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.Notification.Send(Hyland.Unity.WorkView.Object)">
            <summary>Sends the current notification by taking into context the specified WorkView Object.</summary>
            <param name="wvObject">The object to be used as the context.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.NotificationList">
            <summary>Represents a list of WorkView Notifications.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.Object">
            <summary>Represents a WorkView object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.ActiveStatus">
            <summary>Returns the status of this Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.AttributeValues">
            <summary>Gets the list of Attribute Values associated to this WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.BaseClassID">
            <summary>Returns the ID of the 'base' Class of this Object.</summary>
            <remarks>This property is only valid if this Object is of an extended Class.</remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.Class">
            <summary>Gets the Class to which this Object belongs.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.CreatedBy">
            <summary>Gets the User who created the WorkView Object. Returns a Unity user object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.CreatedDate">
            <summary>Gets the created date of this WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.Documents">
            <summary>Gets the collection of Documents that are statically attached to this Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.History">
            <summary>Gets the History associated to this object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.Name">
            <summary>Gets the name of the WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.RevisionBy">
            <summary>Gets the user who did the last revision for this Object. Returns a Unity user object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.RevisionDate">
            <summary>Gets the date the last revision was made.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.ID">
            <summary>Gets the unique numeric ID of the WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.Object.ActivateObjectOnSaveWhenNew">
            <summary>Gets\Sets whether this object is to be activated when ApplyChanges() is called.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.Activate">
            <summary>Activates the current WorkView Object.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.AttachDocument(System.Int64)">
            <summary>Attaches an existing OnBase Document to this Object.</summary>
            <param name="documentID">The unique ID of the OnBase document.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.AttachDocument(Hyland.Unity.Document)">
            <summary>Attaches an existing OnBase Document to this object.</summary>
            <param name="document">The Document object which represents the OnBase Document.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.Copy">
            <summary>Makes a copy of the current object and returns it.</summary>
            <remarks>
                Creates an exact copy of this <see cref="T:Hyland.Unity.WorkView.Object" />, initialized with a new, unique ID. If
                a default value is configured for an Attribute and it is marked as 'unique' or contains a
                sequence, the value from this Object will not be copied to the new Object; a new default value
                will be generated. The Created Date and Created By values will not be copied from this Object.
            </remarks>
            <returns>A copy of this <see cref="T:Hyland.Unity.WorkView.Object" />.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.CreateAttributeValueModifier">
            <summary>
                This methods creates and instantiates an <see cref="T:Hyland.Unity.WorkView.AttributeValueModifier" /> for this
                Object. Use this method to modify or save attribute values to this Object.
            </summary>
            <returns>An <see cref="T:Hyland.Unity.WorkView.AttributeValueModifier" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.Delete">
            <summary>
                Deletes this WorkView Object. Also deletes all dependent objects corresponding to this
                object. For a list of WorkView Objects that are dependent on this Object, use
                GetDependentObjects().
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.DetachDocument(Hyland.Unity.Document)">
            <summary>Detaches a document from the WorkView Object.</summary>
            <param name="document">The document to be detached.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.DetachDocument(System.Int64)">
            <summary>Detaches the document with the specified ID from the WorkView Object.</summary>
            <param name="documentID">The ID of the document to be detached.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.GetDependentObjects">
            <summary>
                Returns a list of all Objects that are dependent on the current WorkView object. The list
                includes multi-level dependent objects.
            </summary>
            <returns><see cref="T:Hyland.Unity.WorkView.DependentObjectList" /> containing the dependent objects</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.GetRelatedObject(System.String)">
            <summary>
                Gets the related WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> associated to the specified dotted
                address. An example of the dotted address would be "Customer.Name".
            </summary>
            <param name="dottedAddress">
                A string identifying the dotted symbolic address of the desired related
                object.
            </param>
            <returns>The related WorkView <see cref="T:Hyland.Unity.WorkView.Object" />.</returns>
            <remarks>
                If any of the related Objects specified in the dotted address are not found, 'null' is
                returned.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.WorkView.Object.Transform(Hyland.Unity.WorkView.Class)">
            <summary>Transforms this Object to be a part of the specified Class.</summary>
            <remarks>
                This method can only be used for Objects and Classes that are a part of or are Extension
                Classes.
            </remarks>
            <param name="wvClass">The class to which the object should be transformed to.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.ObjectList">
            <summary>Represents a list of WorkView Objects.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ObjectHistoryItem">
            <summary>Represents a single history entry for an Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ObjectHistoryItem.AttributeName">
            <summary>Gets the Attribute Name.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ObjectHistoryItem.DateTime">
            <summary>Represents the date of the Transaction.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ObjectHistoryItem.EndValue">
            <summary>Represents the end value of the Attribute Value that was changed.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ObjectHistoryItem.StartValue">
            <summary>Represents the start value of the Attribute Value that was changed.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ObjectHistoryItem.TransactionID">
            <summary>Represents the TransactionID of the Object History.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ObjectHistoryItem.UserName">
            <summary>Name of the user who created the current history transaction.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ObjectHistoryItemList">
            <summary>Represents a list of ObjectHistoryItems.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ExternalObject">
            <summary>Represents a WorkView object that is associated to an external class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ExternalObject.AttributeValues">
            <summary>Returns the collection of values associated to this object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ExternalObject.Class">
            <summary>Returns the Class this external object is associated to.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ExternalObject.ID">
            <summary>Returns the ID of this WorkView Object.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.#ctor(Hyland.Unity.Application,Hyland.Unity.WorkView.Class,System.Int64)">
            <summary>Initializes a new instance of an ExternalObject.</summary>
            <param name="app">The Unity Application.</param>
            <param name="wvClass">The class this external object is associated to.</param>
            <param name="id">The ID of the external object.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.#ctor(Hyland.Unity.Application,Hyland.Unity.WorkView.Class,System.Int64,Hyland.Unity.WorkView.AttributeValueList)">
            <summary>Initializes a new instance of an ExternalObject.</summary>
            <param name="app">The Unity Application.</param>
            <param name="wvClass">The class this external object is associated to.</param>
            <param name="id">The ID of the external object.</param>
            <param name="values">The collection of values for this external object.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.ClearAttributeValue(System.String)">
            <summary>Clears the specified attribute value with the specified name from the object.</summary>
            <param name="attributeName">The name of the attribute to be cleared</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.ClearAttributeValue(Hyland.Unity.WorkView.Attribute)">
            <summary>
                Clears the specified attribute value associated to the specified attribute from the
                object.
            </summary>
            <param name="attribute">The attribute to be cleared.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.String,System.String)">
            <summary>
                Sets the string value to the attribute with the specified attributeName. Use this method
                when setting Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attributeName">The attribute name on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.String)">
            <summary>
                Sets the string value to the specified attribute object. Use this method when setting
                Alphanumeric, Text or FormattedText attribute values.  EncryptedAlphanumeric is not permitted.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.String,System.Int64)">
            <summary>
                Sets the long value to the attribute with the specified attributeName. Use this method
                when setting an Integer attribute value, a Relationship attribute value or a Document attribute
                value.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Int64)">
            <summary>
                Sets the long value to the specified attribute object. Use this method when setting an
                Integer attribute value, a Relationship attribute value or a Document attribute value.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.String,System.Decimal)">
            <summary>
                Sets the decimal value on the attribute with the specified attribute name. Use this when
                setting Currency attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Decimal)">
            <summary>
                Sets the decimal value on the specified attribute object. Use this when setting Currency
                attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.String,System.DateTime)">
            <summary>
                Sets the DateTime value to the attribute with the specified attributeName. Use this method
                when setting either Date or Date\Time attribute type values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.DateTime)">
            <summary>
                Sets the DateTime value to the specified attribute object. Use this method when setting
                either Date or Date\Time attribute type values.
            </summary>
            <param name="attribute">The attribute object on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.String,System.Boolean)">
            <summary>
                Sets the bool value to the attribute with the specified attribute name. Use this method
                when setting Boolean type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Boolean)">
            <summary>
                Sets the bool value to the specified attribute object. Use this method when setting
                Boolean type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.String,System.Double)">
            <summary>
                Sets the double value to the attribute with the specified attribute name. Use this method
                when setting Floating Point type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Double)">
            <summary>
                Sets the double value to the specified attribute object. Use this method when setting
                Floating Point type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.Int64,System.String)">
            <summary>
                Sets the string value to the attribute with the specified attributeID. Use this method
                when setting Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attributeID">The numeric ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.Int64,System.Int64)">
            <summary>
                Sets the long value to the attribute with the specified attributeID. Use this method when
                setting an Integer attribute value, a Relationship attribute value or a Document attribute
                value.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.Int64,System.Decimal)">
            <summary>
                Sets the decimal value on the attribute with the specified attribute ID. Use this when
                setting Currency attribute values.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.Int64,System.DateTime)">
            <summary>
                Sets the DateTime value to the attribute with the specified attributeID. Use this method
                when setting either Date or Date\Time attribute type values.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.Int64,System.Boolean)">
            <summary>
                Sets the bool value to the attribute with the specified attribute ID. Use this method when
                setting Boolean type attribute values.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObject.SetAttributeValue(System.Int64,System.Double)">
            <summary>
                Sets the double value to the attribute with the specified attribute ID. Use this method
                when setting Floating Point type attribute values.
            </summary>
            <param name="attributeID">The ID of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.ExternalObjectList">
            <summary>Represents a list of external objects.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ExternalObjectList.Add(Hyland.Unity.WorkView.ExternalObject)">
            <summary>Adds a new external object to this list.</summary>
            <param name="externalObject">The external object to add.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.OpenObject">
            <summary>Represents a WorkView Object in the context of the 'OnWorkViewBeforeOpenObject' script.</summary>
            <remarks>
                This class is used solely by an 'IWorkViewBeforeOpenObjectScript' and is not intended to
                be used from a stand alone script.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.OpenObject.AttributeValues">
            <summary>
                Represents the current attribute values on this WorkView object. These attribute values
                are the values currently in the database.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.OpenObject.Class">
            <summary>Gets the Class to which this Object belongs.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.GetRelatedObject(System.String)">
            <summary>
                Gets the related WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> associated to the specified dotted
                address. An example of the dotted address would be "Vendor.Buyer".
            </summary>
            <param name="dottedAddress">
                A string identifying the dotted symbolic address of the desired related
                object.
            </param>
            <returns>The related WorkView <see cref="T:Hyland.Unity.WorkView.Object" />.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(System.String,System.String)">
            <summary>
                Sets the string value to the attribute with the specified attributeName. Use this method
                when setting Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attributeName">The attribute name on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.String)">
            <summary>
                Sets the string value to the specified attribute object. Use this method when setting
                Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(System.String,System.Int64)">
            <summary>
                Sets the long value to the attribute with the specified attributeName. Use this method
                when setting Integer attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Int64)">
            <summary>
                Sets the long value to the specified attribute object. Use this method when setting
                Integer attribute values or when setting a Relationship attribute value.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(System.String,System.Decimal)">
            <summary>
                Sets the decimal value on the attribute with the specified attribute name. Use this when
                setting Currency attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Decimal)">
            <summary>
                Sets the decimal value on the specified attribute object. Use this when setting Currency
                attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(System.String,System.DateTime)">
            <summary>
                Sets the DateTime value to the attribute with the specified attributeName. Use this method
                when setting either Date or Date\Time attribute type values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value </param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.DateTime)">
            <summary>
                Sets the DateTime value to the specified attribute object. Use this method when setting
                either Date or Date\Time attribute type values.
            </summary>
            <param name="attribute">The attribute object on which to set the value </param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(System.String,System.Boolean)">
            <summary>
                Sets the bool value to the attribute with the specified attribute name. Use this method
                when setting Boolean type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Boolean)">
            <summary>
                Sets the bool value to the specified attribute object. Use this method when setting
                Boolean type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(System.String,System.Double)">
            <summary>
                Sets the double value to the attribute with the specified attribute name. Use this method
                when setting Floating Point type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.OpenObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Double)">
            <summary>
                Sets the double value to the specified attribute object. Use this method when setting
                Floating Point type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value"></param>
        </member>
        <member name="T:Hyland.Unity.WorkView.PopulateDocumentFolderObject">
            <summary>
                Represents the current WorkView Object in the context of the
                'OnWorkViewPopulateDocumentFolder' script.
            </summary>
            <remarks>
                This class is used solely by an 'IWorkViewPopulateDocumentFolderObjectScript' and is not
                intended to be used from a stand alone script.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.PopulateDocumentFolderObject.AttributeValues">
            <summary>
                Represents the attribute values on the current WorkView object which is being populated
                with documents.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.PopulateDocumentFolderObject.GetRelatedObject(System.String)">
            <summary>
                Gets the related WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> associated to the specified dotted
                address. An example of the dotted address would be "Vendor.Buyer".
            </summary>
            <param name="dottedAddress">
                A string identifying the dotted symbolic address of the desired related
                object.
            </param>
            <returns>The related WorkView <see cref="T:Hyland.Unity.WorkView.Object" />.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.PopulateExternalClassFilterQuery">
            <summary>
                Represents a WorkView Filter Query in the context of the
                'OnWorkViewPopulateExternalFilterResults' script.
            </summary>
            <remarks>
                This class is used solely by an IWorkViewGetExternalClassDataScript and is not intended to
                be used from a stand alone script.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.WorkView.PopulateExternalClassFilterQuery.#ctor(Hyland.Unity.Application)">
            <summary>Initializes a new instance of this filter query.</summary>
            <param name="app">The connected Application object</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterQueryResultItem">
            <summary>Represents a Filter Query result.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.FilterQueryResultItem.ObjectID">
            <summary>
                Gets the ID of the WorkView Object that the current FilterQueryResultItem is associated
                to.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.FilterQueryResultItem.#ctor(Hyland.Unity.Application,System.Collections.Generic.Dictionary{System.String,System.Object},Hyland.Unity.WorkView.Class,System.Int64)">
            <summary>Construction</summary>
            <param name="app"></param>
            <param name="values"></param>
            <param name="wvClass"></param>
            <param name="objectID"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.FilterQueryResultItem.GetFilterColumnValue(System.String)">
            <summary>Returns a value in the current Filter query result.</summary>
            <param name="dottedAddress">The dotted address for a particular attribute.</param>
            <returns>A FilterColumnValue object.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.FilterQueryResultItemList">
            <summary>List of FilterQueryResultItems</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.FilterQueryResultItemList.#ctor">
            <summary>Construction.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ReadOnlyObject">
            <summary>
                Represents a WorkView Object that can not be modified in any way. It provides access to
                retrieve the properties and attribute values of the object.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ReadOnlyObject.AttributeValues">
            <summary>Represents the attribute values on this WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ReadOnlyObject.BaseClassID">
            <summary>Returns the source class ID that the BaseObject's class is extended from.</summary>
            <remarks>
                This property is only useful if this Object is of an extended Class. Otherwise it just
                returns this Object's Class ID.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.ReadOnlyObject.Class">
            <summary>Gets the Class to which this Object belongs.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ReadOnlyObject.Documents">
            <summary>Gets the collection of Documents that are statically attached to this Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ReadOnlyObject.History">
            <summary>Gets the History associated to this object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ReadOnlyObject.Name">
            <summary>Gets the name of the WorkView Object.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.ReadOnlyObject.GetRelatedObject(System.String)">
            <summary>
                Gets the related WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> associated to the specified dotted
                address. An example of the dotted address would be "Vendor.Buyer".
            </summary>
            <param name="dottedAddress">
                A string identifying the dotted symbolic address of the desired related
                object.
            </param>
            <returns>The related WorkView <see cref="T:Hyland.Unity.WorkView.Object" />.</returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.SaveObject">
            <summary>Represents a WorkView Object in the context of the 'OnWorkViewBeforeSaveObject' script.</summary>
            <remarks>
                This class is used solely by an 'IWorkViewBeforeSaveObjectScript' and is not intended to
                be used from a stand alone script.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.WorkView.SaveObject.AttributeValues">
            <summary>
                Represents the previous attribute values on this WorkView object. These attribute values
                are the values currently in the database.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.SaveObject.Class">
            <summary>Gets the Class to which this Object belongs.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.SaveObject.ModifiedAttributeValues">
            <summary>
                Represents the most recent collection of modified attribute values on this WorkView
                object.
            </summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.SaveObject.ClearedAttributeValues">
            <summary>Represents the currently cleared attribute values on this WorkView object.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.ClearAttributeValue(System.String)">
            <summary>Clears the specified attribute value with the specified name from the object.</summary>
            <param name="attributeName">The name of the attribute to be cleared</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.ClearAttributeValue(Hyland.Unity.WorkView.Attribute)">
            <summary>
                Clears the specified attribute value associated to the specified attribute from the
                object.
            </summary>
            <param name="attribute">The attribute to be cleared.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.GetRelatedObject(System.String)">
            <summary>
                Gets the related WorkView <see cref="T:Hyland.Unity.WorkView.Object" /> associated to the specified dotted
                address. An example of the dotted address would be "Vendor.Buyer".
            </summary>
            <param name="dottedAddress">
                A string identifying the dotted symbolic address of the desired related
                object.
            </param>
            <returns>The related WorkView <see cref="T:Hyland.Unity.WorkView.Object" />.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(System.String,System.String)">
            <summary>
                Sets the string value to the attribute with the specified attributeName. Use this method
                when setting Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attributeName">The attribute name on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.String)">
            <summary>
                Sets the string value to the specified attribute object. Use this method when setting
                Alphanumeric, Text or FormattedText attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(System.String,System.Int64)">
            <summary>
                Sets the long value to the attribute with the specified attributeName. Use this method
                when setting an Integer attribute value, a Relationship attribute value or a Document attribute
                value.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Int64)">
            <summary>
                Sets the long value to the specified attribute object. Use this method when setting an
                Integer attribute value, a Relationship attribute value or a Document attribute value.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(System.String,System.Decimal)">
            <summary>
                Sets the decimal value on the attribute with the specified attribute name. Use this when
                setting Currency attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Decimal)">
            <summary>
                Sets the decimal value on the specified attribute object. Use this when setting Currency
                attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(System.String,System.DateTime)">
            <summary>
                Sets the DateTime value to the attribute with the specified attributeName. Use this method
                when setting either Date or Date\Time attribute type values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.DateTime)">
            <summary>
                Sets the DateTime value to the specified attribute object. Use this method when setting
                either Date or Date\Time attribute type values.
            </summary>
            <param name="attribute">The attribute object on which to set the value </param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(System.String,System.Boolean)">
            <summary>
                Sets the bool value to the attribute with the specified attribute name. Use this method
                when setting Boolean type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Boolean)">
            <summary>
                Sets the bool value to the specified attribute object. Use this method when setting
                Boolean type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(System.String,System.Double)">
            <summary>
                Sets the double value to the attribute with the specified attribute name. Use this method
                when setting Floating Point type attribute values.
            </summary>
            <param name="attributeName">The name of the attribute on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.SaveObject.SetAttributeValue(Hyland.Unity.WorkView.Attribute,System.Double)">
            <summary>
                Sets the double value to the specified attribute object. Use this method when setting
                Floating Point type attribute values.
            </summary>
            <param name="attribute">The attribute object on which to set the value.</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.ScriptResult">
            <summary>Class used to return information from a WorkView script.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ScriptResult.CancelEvent">
            <summary>Gets/Sets whether the occurring event should be canceled.</summary>
            <example>
                Setting this to true for the 'OnBeforeDeleteObjectScript' will cancel the deletion of the
                specified Object.
            </example>
        </member>
        <member name="P:Hyland.Unity.WorkView.ScriptResult.ReturnMessage">
            <summary>
                Gets/Sets the message that will be returned to the end user. By setting this, the action
                being executed will be canceled.
            </summary>
            <example>
                In the OnWorkViewBeforeDeleteObject script, setting a value of 'User does not have rights
                to delete this object.' will mark this action to be canceled and the deleting of this object
                will NOT occur. The specified message will be returned to the end user.
            </example>
        </member>
        <member name="M:Hyland.Unity.WorkView.ScriptResult.#ctor">
            <summary>Initializes a new instance of a ScriptResult.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.Services.HylandServices.Formatters.Deserializers.ClientFilterQueryResultItemListDeserializer.ConvertAliasToAttributeNameUsingMapping(Hyland.Types.ElementList,Hyland.Types.Element)">
            <summary>
                Process a filterQueryItem object and using the columnAliasMappings mapping object convert
                the alias field returned by QueryResults and convert it to a standard dotted address that the
                user will be using to reference the field in the script.  The resulting dataAddress and value
                are returned in a Dictionary object that is made available to the script user through the
                ClientFilterQueryResultItem class.
            </summary>
            <param name="columnAliasMappings">
                An object that maps alias values for a filterQueryItem to
                dataAddress values
            </param>
            <param name="filterQueryItem">The filterQueryItem to be processed</param>
            <returns></returns>
        </member>
        <member name="T:Hyland.Unity.WorkView.Services.HylandServices.WorkViewServiceAccessBase.getCachableCollection">
            <summary>The delegate that will be called to retrieve the results collection that should be cached.</summary>
            <remarks>
                Preferably we would utilize System.Func instead but as of now we cannot use .NET 3.5
                items.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.WorkView.Services.HylandServices.WorkViewServiceAccessBase.deserializeFilterViewAttributeList(Hyland.Types.ElementList)">
            <summary>Deserializes a collection of ViewAttributes</summary>
            <param name="serializedViews"></param>
        </member>
        <member name="M:Hyland.Unity.WorkView.Services.HylandServices.WorkViewServiceAccessBase.GetCachedList``2(System.String,Hyland.Unity.WorkView.Services.HylandServices.WorkViewServiceAccessBase.getCachableCollection,Hyland.Unity.Services.HylandServices.Formatters.IElementListDeserializer{``0,``1})">
            <summary>
                Returns a list of items from the static cache. IElementListDeserializer can be defined
                to use a specific deserializer.
            </summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.StockAttribute">
            <summary>Represents a WorkView Stock Attribute.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.StockAttribute.FromID(System.Int64)">
            <summary>Returns the StockAttribute with the specified id.</summary>
            <param name="id">The id of the stock attribute.</param>
        </member>
        <member name="M:Hyland.Unity.WorkView.StockAttribute.FromName(System.String)">
            <summary>Returns the StockAttribute with the specified name.</summary>
            <param name="name">The name of the stock attribute.</param>
        </member>
        <member name="T:Hyland.Unity.WorkView.StockAttributeList">
            <summary>Represents a list of WorkView Stock Attributes.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.UIAction">
            <summary>Represents a User Interface action abstract class.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIAction.UIActionType">
            <summary>Gets the Action Type for a specific user interface action.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.UIActionList">
            <summary>Represents a list of User Interface actions.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.UIActionCloseObject">
            <summary>Represents the User Interface action of closing a WorkView Object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionCloseObject.UIActionType">
            <summary>Gets the UIAction Type</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionCloseObject.ClassID">
            <summary>Gets\Sets the Class ID of the WorkView object to be closed.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionCloseObject.ObjectID">
            <summary>Gets\Sets the Object ID of the WorkView object to be closed.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.UIActionCloseObject.#ctor(System.Int64,System.Int64)">
            <summary>Represents the User Interface action of closing an object.</summary>
            <param name="classID"></param>
            <param name="objectID"></param>
        </member>
        <member name="T:Hyland.Unity.WorkView.UIActionDisplayDocument">
            <summary>Represents the User Interface action of displaying the discovered or generated document.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionDisplayDocument.UIActionType">
            <summary>Gets the UIAction Type</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionDisplayDocument.DocumentID">
            <summary>Gets or sets the Document ID of document to be displayed.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.UIActionDisplayDocument.#ctor(System.Int64)">
            <summary>Represents the User Interface action of displaying a document.</summary>
            <param name="documentID"></param>
        </member>
        <member name="T:Hyland.Unity.WorkView.UIActionMessageBox">
            <summary>Represents the User Interface action of displaying a MessageBox.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionMessageBox.UIActionType">
            <summary>Gets the User interface action type.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionMessageBox.Message">
            <summary>
                Gets\Sets the message to be displayed corresponding to the Message Box User Interface
                action.
            </summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.UIActionMessageBox.#ctor(System.String)">
            <summary>Represents the user interface action of a Message box.z</summary>
            <param name="message"></param>
        </member>
        <member name="T:Hyland.Unity.WorkView.UIActionOpenObject">
            <summary>Represents the User Interface action of opening a WorkView object.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionOpenObject.UIActionType">
            <summary>Gets the UIAction Type.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionOpenObject.ClassID">
            <summary>Gets\Sets the Class ID of the WorkView object to be opened.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.UIActionOpenObject.ObjectID">
            <summary>Gets\Sets the Object ID of the WorkView object to be opened.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.UIActionOpenObject.#ctor(System.Int64,System.Int64)">
            <summary>Represents the User Interface action of opening an object.</summary>
            <param name="classID"></param>
            <param name="objectID"></param>
        </member>
        <member name="T:Hyland.Unity.WorkView.View">
            <summary>Represents a WorkView object view.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.View.Actions">
            <summary>Gets the list of actions that are associated to the view.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.View.ID">
            <summary>Gets the ID of the View.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.View.Name">
            <summary>Gets the Name of the View</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ViewList">
            <summary>Represents a list of WorkView Views.</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ViewAction">
            <summary>Represents a WorkView Action associated to a View.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ViewAction.Hide">
            <summary>Gets \ Sets whether to display the current action on a view.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ViewAction.ID">
            <summary>Gets the ID of the view action.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ViewAction.Name">
            <summary>Gets the Name of the view action</summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.ViewActionList">
            <summary>Represents a list of WorkView view actions.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.ViewActionList.HideAll">
            <summary>
                Gets\Sets whether to display or hide the current collection of Actions on the view. This
                value is set to false by default.
            </summary>
        </member>
        <member name="T:Hyland.Unity.WorkView.WorkView">
            <summary>Represents the entry point for all WorkView related functionality.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkView.Applications">
            <summary>Gets the list of WorkView Applications to which the current user has rights.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkView.Datasets">
            <summary>Gets the list of global Datasets that have been configured.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkView.FullTextCatalogs">
            <summary>Represents a collection of full text catalogs that are configured for the current user.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkView.KeytypeMaps">
            <summary>Gets the list of global KeytypeMap that have been configured.</summary>
        </member>
        <member name="P:Hyland.Unity.WorkView.WorkView.Notifications">
            <summary>Gets the list of global Notifications that have been configured.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkView.GetAttributeByID(System.Int64)">
            <summary>
            Gets an Attribute from the global list by ID.
            </summary>
            <param name="attributeID">The attribute's ID.</param>
            <returns>An attribute from the global list, or null if none could be found.</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkView.GetAttributes(System.Int64)">
            <summary>Returns the collection of attributes associated to the specified class.</summary>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkView.GetClassByID(System.Nullable{System.Int64})">
            <summary>
            This method retrieves a class from Datasource. This does not consider user rights
            </summary>
            <param name="id">Class ID</param>
            <returns>Class corresponding to the given ID</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkView.GetUserDefinedFilterByID(System.Int64)">
            <summary>
            Gets the User Defined Filters. 
            Since these filters are created from the client and always to to reflect the latest settings it is not cached.
            </summary>
            <param name="id">Id of the <seealso cref="T:Hyland.Unity.WorkView.Filter"/></param>
            <returns>User defined Filter</returns>
        </member>
        <member name="M:Hyland.Unity.WorkView.WorkViewSerializer.ConvertAliasToAttributeNameUsingMapping(Hyland.Types.ElementList,Hyland.Types.Element)">
            <summary>
                Process a filterQueryItem object and using the columnAliasMappings mapping object convert
                the alias field returned by QueryResults and convert it to a standard dotted address that the
                user will be using to reference the field in the script.  The resulting dataAddress and value
                are returned in a Dictionary object that is made available to the script user through the
                ClientFilterQueryResultItem class.
            </summary>
            <param name="columnAliasMappings">
                An object that maps alias values for a filterQueryItem to
                dataAddress values
            </param>
            <param name="filterQueryItem">The filterQueryItem to be processed</param>
            <returns></returns>
        </member>
        <member name="T:Hyland.Unity.Exceptions">
            <summary>Static helper class to standardize and centralize the creation of the thrown Exceptions.</summary>
        </member>
        <member name="M:Hyland.Unity.Exceptions.DocumentPurged">
            <summary>Throws an exception due to a document being purged.</summary>
            <exception cref="T:System.InvalidOperationException">Document has been purged.</exception>
        </member>
        <member name="M:Hyland.Unity.Exceptions.ObjectDisposed(System.Object)">
            <summary>Throws an exception due to an object being disposed</summary>
            <exception cref="T:System.ObjectDisposedException">Object is disposed.</exception>
        </member>
        <member name="T:Hyland.Unity.AuthenticationFailedException">
            <summary>Exception thrown when session authentication fails.</summary>
        </member>
        <member name="M:Hyland.Unity.AuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                This supports the Unity internal infrastructure and it not intended to be used from your
                code.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:Hyland.Unity.BatchStatusInvalidException">
            <summary>
                Exception thrown when an attempt is made to utilize a Batch in a way for which its status
                is not valid.
            </summary>
        </member>
        <member name="T:Hyland.Unity.CryptoConfigSettingNotSupportedException">
            <summary>Exception thrown when the cryptography configuration setting is not supported.</summary>
        </member>
        <member name="T:Hyland.Unity.DatabaseVersionNotSupportedException">
            <summary>Exception thrown when the database version is not supported.</summary>
        </member>
        <member name="T:Hyland.Unity.InvalidLicensingException">
            <summary>Exception thrown when an invalid license is accessed.</summary>
        </member>
        <member name="M:Hyland.Unity.InvalidLicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                This supports the Unity internal infrastructure and it not intended to be used from your
                code.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:Hyland.Unity.InvalidLoginException">
            <summary>Exception thrown when the user/password combination is invalid.</summary>
        </member>
        <member name="T:Hyland.Unity.MaxConcurrentLicensesException">
            <summary>Exception thrown when the maximum number of concurrent licenses are in use.</summary>
        </member>
        <member name="T:Hyland.Unity.MaxLicensesException">
            <summary>Exception thrown when the maximum number of licenses are in use.</summary>
        </member>
        <member name="T:Hyland.Unity.NamedLicenseNotAvailableException">
            <summary>Exception thrown when a license specified is not assigned to a user.</summary>
        </member>
        <member name="P:Hyland.Unity.NamedLicenseNotAvailableException.NamedLicenseTypes">
            <summary>The license or licenses that were not assigned to the User.</summary>
        </member>
        <member name="T:Hyland.Unity.QueryMeterException">
            <summary>Exception thrown when the query meter length is exceeded.</summary>
        </member>
        <member name="T:Hyland.Unity.SessionNotFoundException">
            <summary>Exception thrown when the session is not found.</summary>
        </member>
        <member name="T:Hyland.Unity.SystemLockedOutException">
            <summary>Exception thrown when the system is locked.</summary>
        </member>
        <member name="T:Hyland.Unity.UnrestrictedQueryException">
            <summary>Exception thrown when a query requiring restrictions has had no restrictions set.</summary>
        </member>
        <member name="T:Hyland.Unity.UserAccountLockedException">
            <summary>Exception thrown when the user account is locked.</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.AddGlobalListToCache``1(Hyland.Unity.Application,System.Collections.Generic.IList{``0})">
            <summary>Add global list to private session cache</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.AddListsToCache``1(Hyland.Unity.Application,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary> Adds both user list and global list to private session cache</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.AddListToStaticCache``1(Hyland.Unity.Application,System.Object,System.Object,System.Boolean)">
            <summary>
            Adds ElementList with excluded IDs to Static Cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="application">Current application object</param>
            <param name="eList">ElementList to store in the cache</param>
            <param name="excludedIDs">a String of exclded IDs</param>
            <param name="useGlobalKey">true to use "GlobalxxxList", false otherwise</param>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.AddListToStaticCache(Hyland.Unity.Application,System.String,System.Object)">
            <summary>
            Add element list to static cache
            </summary>
            <param name="application">Current application object</param>
            <param name="key">Key name to use when adding to the cache</param>
            <param name="eList">Element List to add to the cache</param>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.AddItemToCache``1(Hyland.Unity.Application,``0,System.Boolean)">
            <summary>Adds a single item to either user dictionary or a global dictionary in the private session cache</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.AddItemToCache``1(Hyland.Unity.Application,``0)">
            <summary>Adds a single user item to either user dictionary in the private session cache</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.AddUserListToCache``1(Hyland.Unity.Application,System.Collections.Generic.IList{``0})">
            <summary>Adds a User List to user dictionary in private session cache</summary>       
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.ClearCachedList``1(Hyland.Unity.Application)">
            <summary>Clear all the items of a given type in dictionary. Removes it from static cache too</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.RemoveListFromStaticCache``1(Hyland.Unity.Application)">
            <summary>
            Removes the lists corresponding to the given item 
            </summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.RemoveListFromStaticCache(Hyland.Unity.Application,System.String,System.String)">
            <summary>
            Removes the list corresponding to the give key
            </summary>
            <param name="application">current application object</param>
            <param name="key">Key corresponsing to the list to remove</param>
            <param name="excludedIDsKey">Key corresponding to the exludedIds if one exists</param>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.RemoveItem``1(Hyland.Unity.Application,``0)">
            <summary>Remove a single item from dictionary</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.TryGetGlobalItem``1(Hyland.Unity.Application,System.String,``0@)">
            <summary>Returns an item even if a user does not have rights to it</summary>      
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.TryGetGlobalItem``1(Hyland.Unity.Application,System.Int64,``0@)">
            <summary>Returns an item even if a user does not have rights to it</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.TryGetUserItem``1(Hyland.Unity.Application,System.Int64,``0@)">
            <summary>Returns an item only if the user has rights to it</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.TryGetUserItem``1(Hyland.Unity.Application,System.String,``0@)">
            <summary>Returns an item only if the user has rights to it</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.TryGetGlobalList``1(Hyland.Unity.Application,System.Collections.Generic.IList{``0}@)">
            <summary>Includes all the items from DB</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.TryGetListFromStaticCache``1(Hyland.Unity.Application,System.Object@,System.Object@)">
            <summary>Retrieves ElementList from static cache</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.TryGetListFromStaticCache``1(Hyland.Unity.Application,System.Object@,System.Boolean)">
            <summary>Retrieves ElementList from static cache</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.ApplicationExtension.TryGetUserList``1(Hyland.Unity.Application,System.Collections.Generic.IList{``0}@)">
            <summary>Retrieves all the items that the user has access to</summary>
        </member>
        <member name="T:Hyland.Unity.Extensions.KeywordTypeExtensions">
            <summary>Extension methods specific to <see cref="T:Hyland.Unity.KeywordType" />
            </summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.KeywordTypeExtensions.TryCreateKeyword(Hyland.Unity.KeywordType,System.Object,Hyland.Unity.Keyword@)">
            <summary>
                Creates a keyword by attempting to convert the given value to the correct data type for
                the given <see cref="T:Hyland.Unity.KeywordType" />
            </summary>
            <param name="keywordType">The <see cref="T:Hyland.Unity.KeywordType" /> to use.</param>
            <param name="value">The possible value for the <see cref="T:Hyland.Unity.Keyword" />.</param>
            <param name="keyword">
                The constructed <see cref="T:Hyland.Unity.Keyword" /> if the conversion is successful, null
                otherwise.
            </param>
            <returns>Boolean to determine whether or not the keyword was successfully created.</returns>
        </member>
        <member name="T:Hyland.Unity.Extensions.UpopExtensions">
            <summary>Extension methods specific to creating Upop Actions.</summary>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.Document)">
            <summary>Upop actions which can be performend on a <see cref="T:Hyland.Unity.Document" />.</summary>
            <param name="document">The <see cref="T:Hyland.Unity.Document" /> which the Upop actions will be performed on.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.DocumentUpopActions" /> object which provides access to generators for Upop
                actions which are performed on a <see cref="T:Hyland.Unity.Document" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.CustomQuery)">
            <summary>Upop actions which can be performed on a <see cref="T:Hyland.Unity.CustomQuery" />.</summary>
            <param name="customQuery">
                The <see cref="T:Hyland.Unity.CustomQuery" /> which the Upop actions will be performed
                on.
            </param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.CustomQueryUpopActions" /> object which provides access to generators for
                Upop actions which are performed on a <see cref="T:Hyland.Unity.CustomQuery" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.WorkView.Class)">
            <summary>Upop actions which can be performed on a WorkView <see cref="T:Hyland.Unity.WorkView.Class" />.</summary>
            <param name="wvClass">The <see cref="T:Hyland.Unity.WorkView.Class" /> which the Upop actions will be performed on.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.ClassUpopActions" /> object which provides access to generators for Upop
                actions which are performed on a WorkView <see cref="T:Hyland.Unity.WorkView.Class" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.Workflow.Queue)">
            <summary>Upop actions which can be performed on a Workflow <see cref="T:Hyland.Unity.Workflow.Queue" />.</summary>
            <param name="queue">The <see cref="T:Hyland.Unity.Workflow.Queue" /> which the Upop actions will be performed on.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.QueueUpopActions" /> object which provides access to generators for Upop
                actions which are performed on a Workflow <see cref="T:Hyland.Unity.Workflow.Queue" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.Folder)">
            <summary>Upop actions which can be performed on a <see cref="T:Hyland.Unity.Folder" />.</summary>
            <param name="folder">The <see cref="T:Hyland.Unity.Folder" /> which the Upop actions will be performed on.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.FolderUpopActions" /> object which provides access to generators for Upop
                actions which are performed on a <see cref="T:Hyland.Unity.Folder" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.WorkView.Object)">
            <summary>Upop actions which can be performed on a <see cref="T:Hyland.Unity.WorkView.Object" />.</summary>
            <param name="wvObject">The <see cref="T:Hyland.Unity.WorkView.Object" /> which the Upop actions will be performed on.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.ObjectUpopActions" /> object which provides access to generators for Upop
                actions which are performed on a <see cref="T:Hyland.Unity.WorkView.Object" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.EFormTemplate)">
            <summary>Upop actions which can be performed on an <see cref="T:Hyland.Unity.EFormTemplate" />.</summary>
            <param name="template">
                The <see cref="T:Hyland.Unity.EFormTemplate" /> which the Upop actions will be performed
                on.
            </param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.EFormTemplateUpopActions" /> object which provides access to generators for
                Upop actions which are performed on an <see cref="T:Hyland.Unity.EFormTemplate" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.UnityForm.FormTemplate)">
            <summary>Upop actions which can be performed on a Unity Form <see cref="T:Hyland.Unity.UnityForm.FormTemplate" />.</summary>
            <param name="template">The <see cref="T:Hyland.Unity.UnityForm.FormTemplate" /> which the Upop actions will be performed on.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.FormTemplateUpopActions" /> object which provides access to generators for
                Upop actions which are performed on a Unity Form <see cref="T:Hyland.Unity.UnityForm.FormTemplate" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(Hyland.Unity.WorkView.FilterQuery)">
            <summary>Upop actions which can be performed on a WorkView <see cref="T:Hyland.Unity.WorkView.FilterQuery" />.</summary>
            <param name="filterQuery">
                The <see cref="T:Hyland.Unity.WorkView.FilterQuery" /> which the Upop actions will be performed
                on.
            </param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.FilterQueryUpopActions" /> object which provides access to generators for
                Upop actions which are performed on a WorkView <see cref="T:Hyland.Unity.WorkView.FilterQuery" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Extensions.UpopExtensions.Upop(System.Collections.Generic.IEnumerable{Hyland.Unity.Document})">
            <summary>Upop actions which can be performed on a list of <see cref="T:Hyland.Unity.Document" />s.</summary>
            <param name="documents">The <see cref="T:Hyland.Unity.Document" />s which the Upop actions will be performed on.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.DocumentListUpopActions" /> object which provides access to generators for
                Upop actions which are performed on a list of <see cref="T:Hyland.Unity.Document" />s.
            </returns>
            <remarks>Calling this method will enumerate the IEnumerable.</remarks>
        </member>
        <member name="T:Hyland.Unity.FontSettings">
            <summary>Use to set up Font Settings.</summary>
        </member>
        <member name="P:Hyland.Unity.FontSettings.Bold">
            <summary>Whether or not the font should be bold. This defaults to false.</summary>
        </member>
        <member name="P:Hyland.Unity.FontSettings.Color">
            <summary>The color of the font. This defaults to Black.</summary>
        </member>
        <member name="P:Hyland.Unity.FontSettings.Italic">
            <summary>Whether or not the font should be italicized. This defaults to false.</summary>
        </member>
        <member name="P:Hyland.Unity.FontSettings.Name">
            <summary>The name of the font. This defaults to Arial.</summary>
        </member>
        <member name="P:Hyland.Unity.FontSettings.Size">
            <summary>The size of the font. This defaults to 10.</summary>
        </member>
        <member name="P:Hyland.Unity.FontSettings.Strikeout">
            <summary>Whether or not the font should have a line through it. This defaults to false.</summary>
        </member>
        <member name="P:Hyland.Unity.FontSettings.Underline">
            <summary>Whether or not the font should be underlined. This defaults to false.</summary>
        </member>
        <member name="M:Hyland.Unity.FontSettings.#ctor">
            <summary>Create a font with default settings.</summary>
        </member>
        <member name="T:Hyland.Unity.IApplicationOptions">
            <summary>
                This supports the Unity internal infrastructure and it not intended to be used from your
                code.
            </summary>
        </member>
        <member name="T:Hyland.Unity.ICoreContext">
            <summary>Interface for the entry point to Core logic, be it Hyland Serives, direct, or others.</summary>
        </member>
        <member name="T:Hyland.Unity.IdentitySettings">
            <summary>Values used to identify an <see cref="T:Hyland.Unity.Application" /> object.</summary>
        </member>
        <member name="P:Hyland.Unity.IdentitySettings.Name">
            <summary>The identifying name of the application. Cannot be null or empty.</summary>
        </member>
        <member name="M:Hyland.Unity.ItemsContainer`1.TryGetGlobalItem(System.Int64,`0@)">
            <summary>
                Use this method when you want to return the global item. Generally for GlobalXXXList
                properties
            </summary>
            <param name="id"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.ItemsContainer`1.TryGetGlobalList(System.Collections.Generic.IList{`0}@)">
            <summary>return global items only if it is a complete list</summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.ItemsContainer`1.TryGetItem(System.Int64,`0@)">
            <summary>
                Use this method when you want to search in the global list too but do not want to return
                the item. This is to avoid making another request to the user if we already requested the item
                before and we know that user does not have access to it.
            </summary>
            <param name="id"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.ItemsContainer`1.TryGetItem(System.String,`0@)">
            <summary>
                This does not return global item. We already made a request for the item before and we
                know that user does not have rights then we return null
            </summary>
            <param name="name"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Hyland.Unity.Logging.ILog">
            <summary>Interface defining the basic functionality of a logging object.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.ILog.IsEnabled">
            <summary>True if the log is enabled.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.ILog.Name">
            <summary>The name of this log.</summary>
            <remarks>The name should be unique as it is used as an identifier.</remarks>
        </member>
        <member name="M:Hyland.Unity.Logging.ILog.Write(Hyland.Unity.Logging.Messages.IMessage)">
            <summary>Write a message to this log.</summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.ILog.Write(System.Collections.Generic.IEnumerable{Hyland.Unity.Logging.Messages.IMessage})">
            <summary>Write a list of messages to this log.</summary>
            <param name="messages">The messages to write.</param>
        </member>
        <member name="T:Hyland.Unity.Logging.Log">
            <summary>
                The primary implementation of the ILog interface.  Keeping with the original design, each
                log object is primarily associated with one MessageType.  Thus, a log should be viewed as a
                conduit for a specific type of message, not a pipeline for multiple types of messages.  If
                pipeline functionality is required, that can be implemented overtop of the existing
                logging/diagnostic framework.
            </summary>
        </member>
        <member name="F:Hyland.Unity.Logging.Log._messageSinks">
            <summary>The message sinks that will be massed messages.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Log.MessageType">
            <summary>The primary MessageType associated with this log.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Log.IsEnabled">
            <summary>True if the log is enabled.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Log.Name">
            <summary>The (unique) name for this log.</summary>
        </member>
        <member name="M:Hyland.Unity.Logging.Log.#ctor(Hyland.Unity.Logging.Messages.MessageType)">
            <summary>Construct of log object for a specific message type.</summary>
            <param name="messageType">The primary type of message associated with this log.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.Log.Write(Hyland.Unity.Logging.Messages.IMessage)">
            <summary>Writes a message to the message sinks associated with this object.</summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.Log.Write(System.Collections.Generic.IEnumerable{Hyland.Unity.Logging.Messages.IMessage})">
            <summary>Writes a list of messages to the message sinks associated with this object.</summary>
            <param name="messages">The messages to write.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.Log.AddMessageSink(Hyland.Unity.Logging.Sinks.IMessageSink)">
            <summary>Adds a message sink to this log.</summary>
            <param name="sink">The message sink to add.</param>
            <remarks>If <c>sink</c> is <c>null</c>, no exception will be thrown.</remarks>
        </member>
        <member name="T:Hyland.Unity.Logging.LogFactory">
            <summary>
                This factory class provides access to the logging objects defined.  For each MessageType,
                a logging object will be created and the legacy name of that message type will be used as a
                retrieval key, as well as the message type itself.
            </summary>
        </member>
        <member name="F:Hyland.Unity.Logging.LogFactory.LogDictionary">
            <summary>Maps log names to the specific log object.</summary>
        </member>
        <member name="M:Hyland.Unity.Logging.LogFactory.#cctor">
            <summary>Initialize dictionary that maps log names to log object instances.</summary>
        </member>
        <member name="M:Hyland.Unity.Logging.LogFactory.GetLog(Hyland.Unity.Logging.Messages.MessageType)">
            <summary>Retrieve a log object based on the associated message type.</summary>
            <param name="messageType">The message type of the log to retrieve.</param>
            <returns>The log object associated with the message type.</returns>
            <remarks>This is the preferred way to retrieve a logging object.</remarks>
        </member>
        <member name="T:Hyland.Unity.Logging.Messages.AbstractMessage">
            <summary>
                Provides a base implementation of the functionality needed to implement the IMessage
                interface. The implementation uses a key-value pair to build messages.  This is consistent with
                the DiagInfo XML message format used by older version of the diagnostics subsystem.
            </summary>
        </member>
        <member name="F:Hyland.Unity.Logging.Messages.AbstractMessage.EnUs">
            <summary>The culture for these messages (currently "en-US" only).</summary>
        </member>
        <member name="F:Hyland.Unity.Logging.Messages.AbstractMessage._backingDictionary">
            <summary>The dictionary that manages the key-value pairs of data for this message.</summary>
        </member>
        <member name="F:Hyland.Unity.Logging.Messages.AbstractMessage._messageText">
            <summary>The message text for this message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.AppPoolName">
            <summary>The Application Pool Name associated with the message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.Datasource">
            <summary>The datasource name associated with this message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.SessionGuid">
            <summary>The Session GUID associated with this message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.ThreadID">
            <summary>Set the value of the thread ID associated with the generation of this message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.User">
            <summary>The user associated with the command.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.CultureInfo">
            <summary>The culture associated with the message (currently "en-us" only).</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.LocalSequence">
            <summary>The sequence number of this message local to a machine (assigned outside this message).</summary>
            <remarks>Implemented because of the database connections.</remarks>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.MessageText">
            <summary>The message text for this message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.MessageTypeString">
            <summary>The string name of the message type.</summary>
            <remarks>For legacy support.</remarks>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.ProcessID">
            <summary>The process ID associated with this message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.Sequence">
            <summary>The sequence number of this message (assigned outside this message).</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.SourceTime">
            <summary>The time when the message was generated.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.TimeSpan">
            <summary>The timespan over which this event occurred, if applicable.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.Type">
            <summary>The message type associated with this log.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.AbstractMessage.Item(System.String)">
            <summary>Indexer for the key-value pairs associated with this message</summary>
            <param name="key">The key associated with the target value.</param>
            <returns>The value associated with the provided key.</returns>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.AbstractMessage.#ctor(Hyland.Unity.Logging.Messages.MessageType,System.String)">
            <summary>Initializes a message of a specific type.</summary>
            <param name="messageType">The type of message to be constructed.</param>
            <param name="typeString"></param>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.AbstractMessage.System#Collections#IEnumerable#GetEnumerator">
            <summary>Not implemented.</summary>
            <returns>Nothing, an exception is thrown.</returns>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.AbstractMessage.GetEnumerator">
            <summary>Returns an <c>Enumerator</c> of the key-value pairs associated with this message.</summary>
            <returns>The key-value pair enumerator.</returns>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.AbstractMessage.GetValue(System.String,System.String)">
            <summary>
                Get a value associated with a key.  Returns the provided default value if the key is not
                located.
            </summary>
            <param name="key">The key associated with the target value.</param>
            <param name="defaultValue">The default value to use if the key has not associated data.</param>
            <returns>The value associated with the provided key, if it exists, else the default value.</returns>
        </member>
        <member name="T:Hyland.Unity.Logging.Messages.ContextWrapper">
            <summary>This wrapper class helps in adding context information to diagnostic messages.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.BaseMessage">
            <summary>The message that is being wrapped.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.ID">
            <summary>The unique identifier for this message, if assigned.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.LocalSequence">
            <summary>The local sequence number of the current message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.ParentID">
            <summary>The unique identified of the parent message, if assigned.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.ParentMessage">
            <summary>The parent message of the message being wrapped.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.ProcessID">
            <summary>The ID of the process that generated the message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.Sequence">
            <summary>The sequence number of the current message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.TimeSpan">
            <summary>The timespan over which the event occurred, if applicable.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.ContextWrapper.Item(System.String)">
            <summary>Indexer that maps keys (string) to values (string).</summary>
            <param name="key">The key associated with the desired data.</param>
            <returns>The data associated with the provided key.</returns>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.ContextWrapper.#ctor(Hyland.Unity.Logging.Messages.IMessage)">
            <summary>Constructor</summary>
            <param name="message">The message to be wrapped.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.ContextWrapper.InitializeContext(System.Guid,Hyland.Unity.Logging.Messages.ContextWrapper)">
            <summary>Initialize this message with a GUID, and possibly a parent message context.</summary>
            <param name="id">The GUID to be associated with this message.</param>
            <param name="parent">The parent context of this message.  This value can be null.</param>
        </member>
        <member name="T:Hyland.Unity.Logging.Messages.IMessage">
            <summary>The interface defining a diagnostic message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.ContextId">
            <summary> A unique identifier for this message</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.CultureInfo">
            <summary>The culture info for this message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.LocalSequence">
            <summary>The local machine sequence number of the message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.MessageText">
            <summary>The message text for the message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.MessageTypeString">
            <summary>The string name of the message type for this message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.ProcessID">
            <summary>The ID of the process that generated the message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.Sequence">
            <summary>The sequence number of the message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.SourceTime">
            <summary>The time when this message was generated.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.TimeSpan">
            <summary>The timespan of an event related to the message, if applicable.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.Type">
            <summary>The message type of the message.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.IMessage.Item(System.String)">
            <summary>Indexer that maps key-value data pairs for the message.</summary>
            <param name="key">The key for the desired data.</param>
            <returns>The data associated with the provided key.</returns>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.IMessage.GetValue(System.String,System.String)">
            <summary>
                Get a value associated with a key.  Returns the provided default value if the key is not
                located.
            </summary>
            <param name="key">The key associated with the target value.</param>
            <param name="defaultValue">The default value to use if the key has not associated data.</param>
            <returns>The value associated with the provided key, if it exists, else the default value.</returns>
        </member>
        <member name="T:Hyland.Unity.Logging.Messages.IMessageFormatter">
            <summary>Defines the interface for a class that converts an IMessage into a string.</summary>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.IMessageFormatter.Apply(Hyland.Unity.Logging.Messages.IMessage)">
            <summary>Applies a transformation that converts an IMessage into a string representation.</summary>
            <param name="message">The message to be converted.</param>
            <returns>The string representation of the message.</returns>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.IMessageFormatter.Apply(System.Collections.Generic.IEnumerable{Hyland.Unity.Logging.Messages.IMessage})">
            <summary>Applies a transformation that converts a list of IMessage's into a string representation.</summary>
            <param name="messages">The messages to be converted.</param>
            <returns>The string representation of the messages.</returns>
        </member>
        <member name="T:Hyland.Unity.Logging.Messages.MessageType">
            <summary>This enumeration identifies the different diagnostic message types that are known.</summary>
        </member>
        <member name="F:Hyland.Unity.Logging.Messages.MessageType.Undefined">
            <summary>Used as an initialization value, or to indicate that the message type is unknown.</summary>
        </member>
        <member name="F:Hyland.Unity.Logging.Messages.MessageType.Empty">
            <summary>Messages to nowhere, /dev/null, the bit bucket even</summary>
        </member>
        <member name="F:Hyland.Unity.Logging.Messages.MessageType.Database">
            <summary>Messages related to database operations.</summary>
        </member>
        <member name="F:Hyland.Unity.Logging.Messages.MessageType.Unity">
            <summary>Messages related to the execution of Unity scripts.</summary>
        </member>
        <member name="T:Hyland.Unity.Logging.Messages.TokenAttribute">
            <summary>This attribute identifies the string token used to identify and map message types.</summary>
            <remarks>This has been implemented primarily to facilitate backwards compatibility.</remarks>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.TokenAttribute.Token">
            <summary>The string token used as an identifier.</summary>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.TokenAttribute.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="token">The string token used as an identifier.</param>
        </member>
        <member name="T:Hyland.Unity.Logging.Messages.UnityMessage">
            <summary>
                This message describes events generated by Unity.  This message class exists so that the
                message information can be discovered via reflection by classes that need this information
                (e.g., DiagnosticConsole, Diagnostics.NTService)
            </summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.UnityMessage.Class">
            <summary>Class the exception occurred in.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.UnityMessage.Method">
            <summary>Method the exception occurred in.</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.UnityMessage.Severity">
            <summary>Diagnostics Level</summary>
        </member>
        <member name="P:Hyland.Unity.Logging.Messages.UnityMessage.SourceLine">
            <summary>Line the exception occurred on.</summary>
        </member>
        <member name="M:Hyland.Unity.Logging.Messages.UnityMessage.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:Hyland.Unity.Logging.ContextWriterBase">
            <summary>
                This writer manages and stores the context of a message, allowing for stack trace like
                functionality within the diagnostics framework.
            </summary>
        </member>
        <member name="F:Hyland.Unity.Logging.ContextWriterBase.Log">
            <summary>The diagnostic log to which messages will be written.</summary>
        </member>
        <member name="M:Hyland.Unity.Logging.ContextWriterBase.#ctor(Hyland.Unity.Logging.Messages.MessageType)">
            <summary>Constructor</summary>
            <param name="messageType">The message type related to this writer.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.ContextWriterBase.Push(Hyland.Unity.Logging.Messages.ContextWrapper)">
            <summary>Pushes a message onto the context stack.</summary>
            <param name="message">The message being pushed.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.ContextWriterBase.WriteEnd(Hyland.Unity.Logging.Messages.ContextWrapper)">
            <summary>Writes a message initiates the end of a context for an operation.</summary>
            <param name="message"></param>
        </member>
        <member name="M:Hyland.Unity.Logging.ContextWriterBase.WriteStart(Hyland.Unity.Logging.Messages.ContextWrapper)">
            <summary>Writes a message and initiates a context for the beginning of an operation.</summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="T:Hyland.Unity.Logging.ProfileWriter">
            <summary>
                This diagnostic writer provides a method to profile the execution times and contexts of
                various operations through the use of diagnostic messages.
            </summary>
        </member>
        <member name="M:Hyland.Unity.Logging.ProfileWriter.#ctor(Hyland.Unity.Logging.Messages.MessageType)">
            <summary>The profile writer constructor</summary>
            <param name="messageType">The primary type of message to be written</param>
        </member>
        <member name="M:Hyland.Unity.Logging.ProfileWriter.Begin(Hyland.Unity.Logging.Messages.IMessage)">
            <summary>Begins the profile timer and sends a message</summary>
            <param name="message">The starting message to send.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.ProfileWriter.End(Hyland.Unity.Logging.Messages.IMessage)">
            <summary>Stops the profile timer and sends a messages.</summary>
            <param name="message">The ending message to send.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.ProfileWriter.Write(Hyland.Unity.Logging.Messages.IMessage)">
            <summary>Writes a simple message to the log without the need for a begin/end sequence.</summary>
            <param name="message">Diag Info containing the message to send</param>
        </member>
        <member name="T:Hyland.Unity.Logging.Sinks.IMessageSink">
            <summary>A message sink accepts diagnostic messages and does something with the message.</summary>
        </member>
        <member name="M:Hyland.Unity.Logging.Sinks.IMessageSink.Write(Hyland.Unity.Logging.Messages.IMessage)">
            <summary>Accept a message from a source.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Hyland.Unity.Logging.Sinks.IMessageSink.Write(System.Collections.Generic.IEnumerable{Hyland.Unity.Logging.Messages.IMessage})">
            <summary>Accept a list of messages to write from a source.</summary>
            <param name="messages">The messages to write.</param>
        </member>
        <member name="T:Hyland.Unity.Mobile.Mobile">
            <summary>The class that contains the API methods for Mobile/Briefcase.</summary>
        </member>
        <member name="M:Hyland.Unity.Mobile.Mobile.AssignToMobile(Hyland.Unity.Mobile.MobileDocumentProperties)">
            <summary>
                Sends a <see cref="T:Hyland.Unity.Document" /> to the specified <see cref="T:Hyland.Unity.User" />
            </summary>
            <param name="properties">The <see cref="T:Hyland.Unity.Mobile.MobileDocumentProperties" /> to specify who to assign to</param>
            <exception cref="T:System.ArgumentException">
                Thrown if Document is null or neither a UserList nor
                UserGroupList are present.
            </exception>
        </member>
        <member name="M:Hyland.Unity.Mobile.Mobile.CreateMobileDocumentProperties(Hyland.Unity.Document,Hyland.Unity.User)">
            <summary>Creates a new <see cref="T:Hyland.Unity.Mobile.MobileDocumentProperties" /> object.</summary>
            <param name="document">The <see cref="T:Hyland.Unity.Document" /> to assign.</param>
            <param name="user">The <see cref="T:Hyland.Unity.User" /> to assign.</param>
            <returns>A new <see cref="T:Hyland.Unity.Mobile.MobileDocumentProperties" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.Mobile.Mobile.CreateMobileDocumentProperties(Hyland.Unity.Document)">
            <summary>Creates a new <see cref="T:Hyland.Unity.Mobile.MobileDocumentProperties" /> object.</summary>
            <param name="document">The <see cref="T:Hyland.Unity.Document" /> to unassign.</param>
            <remarks>
                This should only be used on UnassignFromMobile as it will remove the Document from all
                user's mobile devices.
            </remarks>
            <returns>A new <see cref="T:Hyland.Unity.Mobile.MobileDocumentProperties" /> object.</returns>
        </member>
        <member name="M:Hyland.Unity.Mobile.Mobile.UnassignFromMobile(Hyland.Unity.Mobile.MobileDocumentProperties)">
            <summary>Removes the <see cref="T:Hyland.Unity.Document" /> from a User's mobile device.</summary>
            <param name="properties">The <see cref="T:Hyland.Unity.Mobile.MobileDocumentProperties" /> to specify who to assign to</param>
            <exception cref="T:System.ArgumentException">
                Thrown if Document is null or neither a UserList nor
                UserGroupList are present.
            </exception>
        </member>
        <member name="T:Hyland.Unity.Mobile.MobileDocumentProperties">
            <summary>This class represents properties to be used when syncing to a mobile device.</summary>
        </member>
        <member name="P:Hyland.Unity.Mobile.MobileDocumentProperties.Document">
            <summary>The <see cref="P:Hyland.Unity.Mobile.MobileDocumentProperties.Document" /> to assign to a Mobile device.</summary>
        </member>
        <member name="P:Hyland.Unity.Mobile.MobileDocumentProperties.User">
            <summary>The <see cref="P:Hyland.Unity.Mobile.MobileDocumentProperties.User" /> whose mobile device to sync to.</summary>
        </member>
        <member name="T:Hyland.Unity.Mobile.Services.HylandServices.MobileServiceAccess">
            <summary>
                This is a ServiceAccess class. It's entire function is to handle the request/response
                too/from the Application Server so that it can be taken out of the main implementation of a
                module. This should always implement an interface where any of the methods that make requests
                are declared in the interface and the implementations should be explicit instead of implicit.
                In the class(es) that consume a ServiceAccess, an instance of the interface should be used and
                not the class declaration itself.
            </summary>
        </member>
        <member name="T:Hyland.Unity.OnBaseAuthenticationProperties">
            <summary>The properties used to authenticate with OnBase using OnBase Authentication</summary>
        </member>
        <member name="P:Hyland.Unity.OnBaseAuthenticationProperties.DisconnectedMode">
            <summary>If set to <c>true</c> Unity should be connected in disconnected or stateless mode.</summary>
        </member>
        <member name="P:Hyland.Unity.OnBaseAuthenticationProperties.InstitutionID">
            <summary>The InstitutionID to be used. This is optional.</summary>
        </member>
        <member name="P:Hyland.Unity.OnBaseAuthenticationProperties.Password">
            <summary>The password to be used for connect.</summary>
        </member>
        <member name="P:Hyland.Unity.OnBaseAuthenticationProperties.Username">
            <summary>The username to be used for connect. For institution login, use this for User Code.</summary>
        </member>
        <member name="P:Hyland.Unity.OnBaseAuthenticationProperties.LicenseType">
            <summary>The LicenseType to be used. This is optional.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.DeliveryLocation">
            <summary>A Delivery Location that has been configured in the system.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.DeliveryLocation.ID">
            <summary>The ID of the Delivery Location.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.DeliveryLocation.Name">
            <summary>The Name of the Delivery Location.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.DeliveryLocationList">
            <summary>A list of Delivery Location objects</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.CustodyType">
            <summary>Type of custody allowed in a repository</summary>
        </member>
        <member name="F:Hyland.Unity.PhysicalRecords.CustodyType.Self">
            <summary>
                Specifies that users can check out physical records for themselves and require no
                second-party intervention.
            </summary>
        </member>
        <member name="F:Hyland.Unity.PhysicalRecords.CustodyType.SecondParty">
            <summary>Specifies that only users with permission to check-out and check in may do so.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.LocatorCheckOutStatus">
            <summary>Status of the Check Out</summary>
        </member>
        <member name="F:Hyland.Unity.PhysicalRecords.LocatorCheckOutStatus.CheckedIn">
            <summary>The locator is not checked out.</summary>
        </member>
        <member name="F:Hyland.Unity.PhysicalRecords.LocatorCheckOutStatus.CheckedOut">
            <summary>The locator is checked out.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.RequestStatus">
            <summary>Status of the Request</summary>
        </member>
        <member name="F:Hyland.Unity.PhysicalRecords.RequestStatus.Pending">
            <summary>
                The request is queued but is not the next request to be satisfied when a check out is
                executed.
            </summary>
        </member>
        <member name="F:Hyland.Unity.PhysicalRecords.RequestStatus.ReadyForCheckout">
            <summary>The request will be fulfilled the next time a check out is executed for this locator.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.RequestType">
            <summary>Type of the Request</summary>
        </member>
        <member name="F:Hyland.Unity.PhysicalRecords.RequestType.Original">
            <summary>The request is for the original physical record.</summary>
        </member>
        <member name="F:Hyland.Unity.PhysicalRecords.RequestType.Copy">
            <summary>The request is for a copy of the physical record.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.Locator">
            <summary>Represents a Physical Record Locator</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.ContentsDescription">
            <summary>The Contents Description of this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.Document">
            <summary>The document to which this locator is associated.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.LocationDescription">
            <summary>The Location Description of this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.Repository">
            <summary>The Repository in which this locator resides.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.SubLocation1">
            <summary>The sub-location (1) of this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.SubLocation2">
            <summary>The sub-location (2) of this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.SubLocation3">
            <summary>The sub-location (3) of this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.SubLocation4">
            <summary>The sub-location (4) of this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.UniqueID">
            <summary>The Unique ID of this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Locator.ID">
            <summary>The ID for this locator.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.LocatorList">
            <summary>A list of Locators.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.LocatorCheckOut">
            <summary>Contains information about the checked out locator</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.CheckedOutDate">
            <summary>Gets a DateTime object that is set to the date this record was checked out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.CheckedOutUser">
            <summary>Gets the User who checked out this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.DeliveryLocation">
            <summary>Gets the Delivery Location used to perform the check out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.ExpectedReturnDate">
            <summary>Gets a DateTime object that is set to the date this record is expected to be returned.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.Locator">
            <summary>Gets the Locator that was checked out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.Reason">
            <summary>Gets the Reason for the check out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.Status">
            <summary>Gets the Status of the check out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.UniqueID">
            <summary>Gets the Unique ID of the locator that was checked out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.LocatorCheckOut.UserWithPosession">
            <summary>
                Gets the User who has possession of this locator. This is not necessarily the same as the
                user who checked out the locator.
            </summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.PhysicalRecords">
            <summary>The class that contains API methods for physical records management.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.PhysicalRecords.DeliveryLocations">
            <summary>Returns all the Delivery Locations to which the user has rights.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.PhysicalRecords.Repositories">
            <summary>Returns all the Repositories to which the user has rights.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.PhysicalRecords.UniqueIDMaxLength">
            <summary>The maximum number of characters allowed in a Unique ID for a Physical Record locator.</summary>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CheckInLocator(Hyland.Unity.PhysicalRecords.CheckInLocatorProperties)">
            <summary>Checks in a physical record locator.</summary>
            <param name="properties"><see cref="T:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties" /> for checking in a locator.</param>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CheckOutLocator(Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties)">
            <summary>Checks out a physical record locator.</summary>
            <param name="properties"><see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> for checking out a locator.</param>
            <returns><see cref="T:Hyland.Unity.CheckOutStatus" /> containing the status of the check out operation.</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateCheckInLocatorProperties(Hyland.Unity.Document)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties" /> object.</summary>
            <param name="document">Document identifying the locator to check in.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateCheckInLocatorProperties(System.String)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties" /> object.</summary>
            <param name="uniqueID">Unique ID identifying the locator to check in.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateCheckInLocatorProperties(Hyland.Unity.PhysicalRecords.Locator)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties" /> object.</summary>
            <param name="locator">The Locator to check in.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateCheckOutLocatorProperties(Hyland.Unity.Document)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> object.</summary>
            <param name="document">Document identifying the locator to check out.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateCheckOutLocatorProperties(System.String)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> object.</summary>
            <param name="uniqueID">Unique ID identifying the locator to check out.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateCheckOutLocatorProperties(Hyland.Unity.PhysicalRecords.Request)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> object.</summary>
            <param name="request">The Request to fulfill with this check out.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateCheckOutLocatorProperties(Hyland.Unity.PhysicalRecords.Locator)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> object.</summary>
            <param name="locator">The Locator to check out.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateNewLocator(Hyland.Unity.PhysicalRecords.NewLocatorProperties)">
            <summary>Creates a new physical record locator.</summary>
            <param name="properties">
                <see cref="T:Hyland.Unity.PhysicalRecords.NewLocatorProperties" /> containing the values with which to populate the new
                locator.
            </param>
            <returns>The <see cref="T:Hyland.Unity.Document" /> created for the new locator.</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateNewLocatorProperties(Hyland.Unity.DocumentType,Hyland.Unity.PhysicalRecords.Repository)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.NewLocatorProperties" /> object.</summary>
            <param name="documentType">DocumentType in which the new locator will be created.</param>
            <param name="repository">Repository in which the new locator will be created.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.NewLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateRequestLocatorProperties(Hyland.Unity.Document,Hyland.Unity.PhysicalRecords.DeliveryLocation,System.String,System.DateTime,System.Int64)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object.</summary>
            <param name="document">Document identifying the locator to request.</param>
            <param name="deliveryLocation">Delivery Location for the request.</param>
            <param name="reasonForRequest">Reason for the request.</param>
            <param name="requiredBy">Date by which this request should be fulfilled.</param>
            <param name="numberOfDays">Number of days for which you want to have the locator checked out.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateRequestLocatorProperties(Hyland.Unity.Document,Hyland.Unity.PhysicalRecords.DeliveryLocation,System.String,System.DateTime)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object.</summary>
            <param name="document">Document identifying the locator to request.</param>
            <param name="deliveryLocation">Delivery Location for the request.</param>
            <param name="reasonForRequest">Reason for the request.</param>
            <param name="requiredBy">Date by which this request should be fulfilled.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateRequestLocatorProperties(System.String,Hyland.Unity.PhysicalRecords.DeliveryLocation,System.String,System.DateTime,System.Int64)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object.</summary>
            <param name="uniqueID">Unique ID identifying the locator to request.</param>
            <param name="deliveryLocation">Delivery Location for the request.</param>
            <param name="reasonForRequest">Reason for the request.</param>
            <param name="requiredBy">Date by which this request should be fulfilled.</param>
            <param name="numberOfDays">Number of days for which you want to have the locator checked out.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateRequestLocatorProperties(System.String,Hyland.Unity.PhysicalRecords.DeliveryLocation,System.String,System.DateTime)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object.</summary>
            <param name="uniqueID">Unique ID identifying the locator to request.</param>
            <param name="deliveryLocation">Delivery Location for the request.</param>
            <param name="reasonForRequest">Reason for the request.</param>
            <param name="requiredBy">Date by which this request should be fulfilled.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateRequestLocatorProperties(Hyland.Unity.PhysicalRecords.Locator,Hyland.Unity.PhysicalRecords.DeliveryLocation,System.String,System.DateTime,System.Int64)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object.</summary>
            <param name="locator">Locator to request.</param>
            <param name="deliveryLocation">Delivery Location for the request.</param>
            <param name="reasonForRequest">Reason for the request.</param>
            <param name="requiredBy">Date by which this request should be fulfilled.</param>
            <param name="numberOfDays">Number of days for which you want to have the locator checked out.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateRequestLocatorProperties(Hyland.Unity.PhysicalRecords.Locator,Hyland.Unity.PhysicalRecords.DeliveryLocation,System.String,System.DateTime)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object.</summary>
            <param name="locator">Locator to request.</param>
            <param name="deliveryLocation">Delivery Location for the request.</param>
            <param name="reasonForRequest">Reason for the request.</param>
            <param name="requiredBy">Date by which this request should be fulfilled.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.CreateUpdateLocatorProperties(Hyland.Unity.Document)">
            <summary>Creates a <see cref="T:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties" /> object.</summary>
            <param name="document">Document identifying the locator to update.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties" /> object</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.GetCheckedOutLocator(Hyland.Unity.PhysicalRecords.Locator)">
            <summary>
                Retrieves the checkout information for the given Locator. This method should only be
                called for a record that is checked out, otherwise an exception will be thrown.
            </summary>
            <param name="locator">The <see cref="T:Hyland.Unity.PhysicalRecords.Locator" /> for which to get the checkout information.</param>
            <returns>A <see cref="T:Hyland.Unity.PhysicalRecords.LocatorCheckOut" /> containing information about the checked out locator.</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.GetLocator(Hyland.Unity.Document)">
            <summary>Retrieves a locator from the given Document.</summary>
            <param name="doc">The Document associated with a locator.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.Locator" /> corresponding to this Document.</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.GetLocators(System.String)">
            <summary>Retrieves all locators associated with the given Unique ID.</summary>
            <param name="uniqueID">The Unique ID associated with one or more locators.</param>
            <returns>A <see cref="T:Hyland.Unity.PhysicalRecords.LocatorList" /> containing all the locators that have the matching uniqueID.</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.RequestLocator(Hyland.Unity.PhysicalRecords.RequestLocatorProperties)">
            <summary>Submits a request for a physical record locator.</summary>
            <param name="properties"><see cref="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties" /> for requesting a locator.</param>
            <returns><see cref="T:Hyland.Unity.PhysicalRecords.Request" /> containing information about the new request.</returns>
        </member>
        <member name="M:Hyland.Unity.PhysicalRecords.PhysicalRecords.UpdateLocator(Hyland.Unity.PhysicalRecords.UpdateLocatorProperties)">
            <summary>Updates a physical record locator.</summary>
            <param name="properties">
                <see cref="T:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties" /> containing the updated values for this locator.
            </param>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties">
            <summary>Properties used to check in a physical record locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties.Document">
            <summary>The document associated with the locator to check in.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties.Locator">
            <summary>The Locator to check in.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckInLocatorProperties.UniqueID">
            <summary>The Unique ID associated with the locator to check in.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties">
            <summary>Properties used to check out a physical record locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties.DeliveryLocation">
            <summary>
                [Optional] The Delivery Location for this check out. If this is not assigned then the
                Delivery Location specified in the Request will be used.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties.Document">
            <summary>The Document associated with the locator to check out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties.Locator">
            <summary>The Locator to check out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties.NumberOfDays">
            <summary>
                [Optional] The number of days for which you want to have the request checked out.  If this
                is not assigned then the number of days specified in the Request will be used.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties.Reason">
            <summary>
                [Optional] The reason for the check out. If this is not assigned then the Reason specified
                in the Request will be used.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties.Request">
            <summary>The request to checked out. This is returned by a call to RequestLocator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.CheckOutLocatorProperties.UniqueID">
            <summary>The Unique ID of the locator to check out.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.NewLocatorProperties">
            <summary>Properties used to create a new physical record locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.ContentsDescription">
            <summary>[Optional] The Contents Description of the new locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.DocumentType">
            <summary>The Document Type in which the new locator will be created.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.LocationDescription">
            <summary>[Optional] The Location Description of the new locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.Repository">
            <summary>The Repository in which the new locator will reside.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.SubLocation1">
            <summary>[Optional] The sub-location (1) of the new locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.SubLocation2">
            <summary>[Optional] The sub-location (2) of the new locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.SubLocation3">
            <summary>[Optional] The sub-location (3) of the new locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.SubLocation4">
            <summary>[Optional] The sub-location (4) of the new locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.NewLocatorProperties.UniqueID">
            <summary>
                [Optional] The Unique ID of the new locator. This is only optional if the specified
                Repository does not have the "ID Must Be Unique" option enabled.
            </summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.RequestLocatorProperties">
            <summary>Properties used to request a physical record locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.DeliveryInstructions">
            <summary>[Optional] The Delivery Instructions for this request.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.DeliveryLocation">
            <summary>The delivery location for this request.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.Document">
            <summary>The document that you are requesting.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.IsUrgent">
            <summary>[Optional] Specifies that this is an urgent request.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.Locator">
            <summary>The Locator being requested.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.NumberOfDays">
            <summary>The number of days for which you want to have the locator checked out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.Reason">
            <summary>The reason for this request.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.RequiredBy">
            <summary>The date by which this request should be fulfilled.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.Type">
            <summary>
                [Optional] The type of request to create. If not specified, this will default to
                RequestType.Original.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.RequestLocatorProperties.UniqueID">
            <summary>The Unique ID of the physical record locator being requested.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties">
            <summary>Properties used to update a physical record locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.ContentsDescription">
            <summary>[Optional] The new Contents Description for this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.Document">
            <summary>The document corresponding to the physical record locator which you want to update.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.LocationDescription">
            <summary>[Optional] The new Location Description for this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.Repository">
            <summary>[Optional] The new Repository for this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.SubLocation1">
            <summary>[Optional] The sub-location (1) for this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.SubLocation2">
            <summary>[Optional] The sub-location (2) for this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.SubLocation3">
            <summary>[Optional] The sub-location (3) for this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.SubLocation4">
            <summary>[Optional] The sub-location (4) for this locator.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.UpdateLocatorProperties.UniqueID">
            <summary>[Optional] The new Unique ID for this locator.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.Repository">
            <summary>A repository that has been configured in the system.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.ContentsDescription">
            <summary>The description of the contents in the Repository.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.CustodyType">
            <summary>The CustodyType of the repository.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.DeliveryLocations">
            <summary>The Delivery Locations to which this repository is associated.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.Description">
            <summary>The Repository description.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.IsCustodyTransferAllowed">
            <summary>Specifies whether a Custody Transfer is allowed in this repository.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.LocationDescriptionName">
            <summary>The location description name.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.MaxCheckOutDays">
            <summary>The maximum number of days an item can be checked out.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.MaximumIsDefault">
            <summary>
                Specifies whether MaxCheckOutDays is used as the number of days for all check outs in this
                repository. If this is true, the NumberOfDays property must not be set when requesting or
                checking out a locator. If this is false, the NumberOfDays property must be set when requesting
                or checking out a locator.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.Rules">
            <summary>The rules for this Repository.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.SubLocation1Name">
            <summary>Sub-location 1 Name</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.SubLocation2Name">
            <summary>Sub-location 2 Name</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.SubLocation3Name">
            <summary>Sub-location 3 Name</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.SubLocation4Name">
            <summary>Sub-location 4 Name</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.SubLocationMaxLength">
            <summary>The maximum number of characters allowed in a sublocation name.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.UniqueID">
            <summary>The Unique ID of the Repository.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.ID">
            <summary>The ID of the Delivery Method.</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Repository.Name">
            <summary>The Name of the Delivery Method.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.RepositoryList">
            <summary>A list of Repositories.</summary>
        </member>
        <member name="T:Hyland.Unity.PhysicalRecords.Request">
            <summary>Contains information about the newly created physical records locator Request</summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Request.ID">
            <summary>
                ID of the request.  This can be used to check out a specific request, rather than letting
                the system fulfill whichever request would come next.
            </summary>
        </member>
        <member name="P:Hyland.Unity.PhysicalRecords.Request.Status">
            <summary>Status of the request</summary>
        </member>
        <member name="T:Hyland.Unity.CustomQuery">
            <summary>A CustomQuery</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.DocumentTypes">
            <summary>The DocumentTypes for this Custom Query</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.Icon">
            <summary>Contains the icon that is to be used to represent this custom query.</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.Instructions">
            <summary>Asks the custom query for its user instructions</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.KeywordTypes">
            <summary>The KeywordTypes for this Custom Query</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.Type">
            <summary>Returns the custom query's type.</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.WorkflowFilterOnly">
            <summary>If TRUE, this custom query has been configured as a "Workflow Filter Only".</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.ID">
            <summary>The ID of the Custom Query</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.Name">
            <summary>The Name of the Custom Query</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.AllowTextSearch">
            <summary>If TRUE, this custom query has been configured to have a Text Search Button</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.BinaryOperator">
            <summary>
                Returns true or false depending on whether or not binary operators should be available for
                the custom query. False indicates that the custom query should not present binary operators for
                keyword types. The equal (=) operator will be assumed for all keyword types. True indicates
                that the user should be presented with binary operators from which to choose.
            </summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.DateOptions">
            <summary>Returns the date options for a custom query.</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.DefaultDateRangeEnd">
            <summary>This will be null if no date has been configured</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.DefaultDateRangeStart">
            <summary>This will be null if no date has been configured</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.KeywordDropDown">
            <summary>
                Returns true or false depending on whether or not keyword drop down lists should be
                available for the custom query. False indicates that the custom query should not present
                keyword drop down lists. True indicates that the user should be presented with keyword drop
                down lists from which to choose.
            </summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.OrDuplicateKeywords">
            <summary>
                Returns true or false depending on whether the custom query should apply the 'OR' operator
                to duplicate keywords. If the value is false, any duplicate keywords should be AND'ed together
                when generating the query. If the value is true, any duplicate keywords should be OR'ed
                together when generating the query.
            </summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.QueryWarningLevel">
            <summary>
                This option should affect the user interface of API clients. This option indicates that if
                the user attempts to execute a query against this custom query without applying constraints, he
                or she should be warned. It is the responsibility of the API client application to prompt the
                user if it chooses to adhere to this option.
            </summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.SortByDocumentType">
            <summary>if TRUE, this custom query has been configured to sort by document type.</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.SortOrder">
            <summary>Asks the custom query for its sort order</summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.UnaryOperator">
            <summary>
                Returns true or false depending on whether or not unary operators should be available for
                the custom query. False indicates that the custom query should not present unary operators for
                keyword types. The equal (=) operator will be assumed for all keyword types. True indicates
                that the user should be presented with unary operators from which to choose.
            </summary>
        </member>
        <member name="P:Hyland.Unity.CustomQuery.UseKeywordEdit">
            <summary>
                Returns true or false depending on whether the custom query should use keyword edit
                fields. If the value is false, the custom query should not provide the option to input keyword
                edit fields. If the value is true, the interface displaying the custom query should display
                keyword edit fields.
            </summary>
        </member>
        <member name="T:Hyland.Unity.CustomQueryList">
            <summary>A list of CustomQueries</summary>
        </member>
        <member name="T:Hyland.Unity.DisplayColumn">
            <summary>Represents a Display Column in a Query.</summary>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.AlphaNumericValue">
            <summary>Gets the column value as string.</summary>
            <returns>The column value as string</returns>
            <remarks>
                This method throw exception if the column is not one of the AlphaNumeric type or if the
                value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.Configuration">
            <summary>Gets the configuration information associated with this column.</summary>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.CurrencyValue">
            <summary>Gets the column value as currency.</summary>
            <returns>The column value as decimal</returns>
            <remarks>
                This method throw exception if the column is not a Currency or SpecificCurrency or if the
                value is blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.DateTimeValue">
            <summary>Gets the column value as DateTime.</summary>
            <returns>The column value as DateTime</returns>
            <remarks>
                This method throw exception if the column is not a Date or DateTime or if the value is
                blank.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.FloatingPointValue">
            <summary>Gets the column value as floating point.</summary>
            <returns>The column value as double</returns>
            <remarks>This method throw exception if the column is not a FloatingPoint or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.IsBlank">
            <summary>Indicates whether or not this column instance is blank.</summary>
            <value><c>true</c> if this column is blank; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.Numeric20Value">
            <summary>Gets the column value as numeric (up to 20 digits)</summary>
            <returns>The column value as decimal</returns>
            <remarks>This method throw exception if the column is not a Numeric20 or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.Numeric9Value">
            <summary>Gets the column value as numeric (up to 9 digits).</summary>
            <returns>The column value as long</returns>
            <remarks>This method throw exception if the column is not a Numeric9 or if the value is blank.</remarks>
        </member>
        <member name="P:Hyland.Unity.DisplayColumn.Value">
            <summary>Gets the column value as an object.</summary>
            <returns>The column value as object</returns>
            <remarks>
                This method should only be used when iterating through a DisplayColumnList and performing
                the same generic operation. DO NOT use this method if you know the column data type. Use one of
                the other GetValue methods. This method throws an exception if the value is blank.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException when value is blank.</exception>
        </member>
        <member name="M:Hyland.Unity.DisplayColumn.ToString">
            <summary>
                Gets the string value of the column. This will be the localized version of the column
                value based on the culture of the thread that loaded the column.
            </summary>
            <returns>
                Returns an empty string when the column is blank, or the localized version of the string
                value of the column.
            </returns>
        </member>
        <member name="M:Hyland.Unity.DisplayColumn.IsFullTextDisplayColumn(Hyland.Unity.DisplayColumnType)">
            <summary>
                This method determines if the specified column is a Full Text column. This is useful when
                generating Document Query XML.
            </summary>
            <param name="type">The type of display column.</param>
            <returns><c>true</c> if this column is a Full Text column; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Hyland.Unity.DisplayColumn.IsValidDisplayColumnForDocument(Hyland.Unity.DisplayColumnType)">
            <summary>This method determines if the specified column is valid for a Document.</summary>
            <param name="type">The type of display column.</param>
            <returns><c>true</c> if this column is valid for a document; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Hyland.Unity.DisplayColumnList">
            <summary>A list of DisplayColumns.</summary>
        </member>
        <member name="T:Hyland.Unity.DisplayColumnConfiguration">
            <summary>Contains configuration information about a DisplayColumn retrieved by a query.</summary>
        </member>
        <member name="P:Hyland.Unity.DisplayColumnConfiguration.DataType">
            <summary>Returns the data type of this column.</summary>
        </member>
        <member name="P:Hyland.Unity.DisplayColumnConfiguration.Heading">
            <summary>The string description for this column.</summary>
        </member>
        <member name="P:Hyland.Unity.DisplayColumnConfiguration.KeywordType">
            <summary>
                If Type is DisplayColumnType.Keyword, this returns the KeywordType for this column.
                Otherwise, returns null.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DisplayColumnConfiguration.Type">
            <summary>
                The DisplayColumnType for this column. DisplayColumnType.Keyword will be returned for any
                keyword type.
            </summary>
        </member>
        <member name="T:Hyland.Unity.DisplayColumnConfigurationList">
            <summary>A list of DisplayColumn Configuration values.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentQuery">
            <summary>Document Query object</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentQuery.SortAttribute">
            <summary>Sort Attributes to be used on a Document Query</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.DocumentID">
            <summary>Sort by Document Handle</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.DocumentName">
            <summary>Sort by Document Name</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.DocumentType">
            <summary>Sort by Document Type</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.DocumentDate">
            <summary>Sort by Document Date</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.ArchivalDate">
            <summary>Sort by Document Archival Date</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.Institution">
            <summary>Sort by Institution</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.AuthorID">
            <summary>Sort by Document's Author ID</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.Batch">
            <summary>Sort by Document's Batch ID</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.RevisionCount">
            <summary>Sort by Document's Revision Count</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.DocumentTypeGroup">
            <summary>Sort by Document Type Group</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.DocumentTypeName">
            <summary>Sort by Document Type Name</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.AuthorName">
            <summary>The name of the Author</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.NoteContents">
            <summary>Sort by Document's Note Contents</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.NoteCount">
            <summary>Sort by the number of notes on the Document.</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.NoteTypeName">
            <summary>Sort by Document's Note Type Name</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.WorkflowQueue">
            <summary>Sort by Document's Current Workflow Queue</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.SortAttribute.ArrivalTime">
            <summary>Sort by Document's Arrival Time in a Workflow Queue</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentQuery.TextSearchType">
            <summary>Describes the type of text search used.</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.TextSearchType.None">
            <summary>None</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.TextSearchType.IDOLFullTextSearch">
            <summary>Specifies a Full Text Search using IDOL.</summary>
        </member>
        <member name="F:Hyland.Unity.DocumentQuery.TextSearchType.OnBaseFullTextSearch">
            <summary>Specifies a Full Text Search using OnBase Full-Text</summary>
        </member>
        <member name="P:Hyland.Unity.DocumentQuery.Distinct">
            <summary>
                Return only distinct values. Note: This property is ignored when perform full text search.
                Full text search always returns distinct documents.
            </summary>
        </member>
        <member name="P:Hyland.Unity.DocumentQuery.RetrievalOptions">
            <summary>
                Used to set additional retrieval options on the Document Query. Note that some options may
                reduce performance; see specific options on <c>DocumentRetrievalOptions</c> for further
                details.
            </summary>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddCustomQuery(Hyland.Unity.CustomQuery)">
            <summary>Adds a Custom Query to the Document Query</summary>
            <param name="customQuery">CustomQuery to add.</param>
            <remarks>
                When used with AddTextSearchConstraint(), any Custom Query added must be FullText or
                HTMLFullText. FullText and HTMLFullText Custom Queries may be used independently of
                AddTextSearchConstraint().
            </remarks>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddDateRange(System.DateTime,System.DateTime)">
            <summary>Adds a DateTime range to the Document Query</summary>
            <param name="fromDate">Date to start at.</param>
            <param name="toDate">Date to range to.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddDisplayColumn(Hyland.Unity.DisplayColumnType)">
            <summary>
                Adds a Display Column to the Document Query. Any added display columns are returned in the
                QueryResultItems of the QueryResult when calling ExecuteQueryResults(). For Custom Queries,
                these added display columns will be returned instead of any display columns originally
                configured on the Custom Query. If one of the AddDisplayColumn method overrides is not called,
                any configured Custom Query display columns will be returned in the QueryResultItems.
            </summary>
            <param name="type">The DisplayColumnType to add to DisplayColumns.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddDisplayColumn(Hyland.Unity.KeywordType)">
            <summary>
                Adds a KeywordType as a Display Column to the Document Query. Any added display columns
                are returned in the QueryResultItems of the QueryResult when calling ExecuteQueryResults(). For
                Custom Queries, these added display columns will be returned instead of any display columns
                originally configured on the Custom Query. If one of the AddDisplayColumn method overrides is
                not called, any configured Custom Query display columns will be returned in the
                QueryResultItems.
            </summary>
            <param name="keywordType">The KeywordType to add to DisplayColumns.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddDocumentRange(System.Int64,System.Int64)">
            <summary>Adds a range of Document Handles to the Document Query</summary>
            <param name="startID">Start Handle for the range of Documents.</param>
            <param name="endID">End Handle for the range of Documents.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddDocumentType(Hyland.Unity.DocumentType)">
            <summary>Adds a Document Type to the DocumentQuery</summary>
            <param name="docType">DocumentType to add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddDocumentTypeGroup(Hyland.Unity.DocumentTypeGroup)">
            <summary>Adds a Document Type Group to the DocumentQuery</summary>
            <param name="docTypeGroup">DocumentTypeGroup to add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(Hyland.Unity.Keyword)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keyword">Keyword to add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(Hyland.Unity.Keyword,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keyword">Keyword to add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.String)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.Decimal)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.Double)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.DateTime)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.Int64)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.String,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.Decimal,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.Double,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.DateTime,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.Int64,System.Int64,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.String)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.Decimal)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.Double)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.DateTime)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.Int64)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.String,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.Decimal,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.Double,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.DateTime,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddKeyword(System.String,System.Int64,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the DocumentQuery</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with Keyword.</param>
            <param name="relation">KeywordRelation to use with Keyword.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddNoteType(Hyland.Unity.NoteType)">
            <summary>Adds a Note Type to the DocumentQuery</summary>
            <param name="noteType">NoteType to add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddQueryKeywordRecord(Hyland.Unity.QueryKeywordRecord)">
            <summary>Adds a Query Keyword Record to the Document Query</summary>
            <param name="record">QueryKeywordRecord to add.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddQueryKeywordRecord(Hyland.Unity.QueryKeywordRecord,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Query Keyword Record to the Document Query</summary>
            <param name="record">QueryKeywordRecord to add.</param>
            <param name="relation">KeywordRelation to use for the QueryKeywordRecord.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddSort(Hyland.Unity.DocumentQuery.SortAttribute,System.Boolean)">
            <summary>Adds a Sort attribute to the Document Query</summary>
            <param name="attribute">SortAttribute to use.</param>
            <param name="ascending">To use ascending order or not.</param>
            <returns>The current DocumentQuery.</returns>
            <remarks>This will not work when using an IDOL Full Text search.</remarks>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddSort(Hyland.Unity.KeywordType,System.Boolean)">
            <summary>Adds a Sort by the specified KeywordType to the Document Query.</summary>
            <param name="keywordType">KeywordType to sort by.</param>
            <param name="ascending">To use ascending order or not.</param>
            <returns>The current DocumentQuery.</returns>
            <remarks>This will not work when using an IDOL Full Text search.</remarks>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.AddTextSearchConstraint(Hyland.Unity.DocumentQuery.TextSearchType,System.String)">
            <summary>Specifies a FullText Search String.</summary>
            <param name="textSearchType">The type of text search to be used.</param>
            <param name="textSearchString">The search string.</param>
            <returns>The current DocumentQuery.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.Execute(System.Int64)">
            <summary>
                Executes the Document Query. If additional query result information is needed, use the
                ExecuteQueryResults method.
            </summary>
            <param name="maxDocuments">Max number of Documents to return</param>
            <returns>A DocumentList of found documents.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.Execute(System.Int64,Hyland.Unity.DocumentRetrievalOptions)">
            <summary>
                Deprecated. Use the Execute(long maxDocuments) override in conjunction with the
                RetrievalOptions property. Executes the Document Query. If additional query result information
                is needed, use the ExecuteQueryResults method.
            </summary>
            <param name="maxDocuments">Max number of Documents to return</param>
            <param name="docRetrievalOptions">
                Used to set additional retrieval options. Note that some options
                may reduce performance; see specific options on <c>DocumentRetrievalOptions</c> for further
                details.
            </param>
            <returns>A DocumentList of found documents.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.ExecuteCount">
            <summary>Executes the Document Query and counts the number of Documents found.</summary>
            <returns>The count of found documents.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.ExecuteQueryResults(System.Int64)">
            <summary>
                Executes the Document Query and returns QueryResult. Any Display Columns that are expected
                to be returned will be available with this method.
            </summary>
            <param name="maxDocuments">Max number of Documents to return</param>
            <returns>The QueryResult of the query.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.ExecuteQueryResults(System.Int64,System.Boolean)">
            <summary>
                Executes the Document Query and returns QueryResult. Any Display Columns that are expected
                to be returned will be available with this method.
            </summary>
            <param name="maxDocuments">Max number of Documents to return</param>
            <param name="cacheQueryResults">Set to false to avoid caching the query results. It is set to true if not specified.</param>
            <returns>The QueryResult of the query.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.FromXml(Hyland.Unity.Application,System.String)">
            <summary>Gets a DocumentQuery object generated by an XML string.</summary>
            <param name="app">Connected Unity Application.</param>
            <param name="inputXml">The XML used to generate the DocumentQuery.</param>
            <returns>A DocumentQuery generated by the specified XML.</returns>
        </member>
        <member name="M:Hyland.Unity.DocumentQuery.GetXml">
            <summary>
                Returns an XML representation of the DocumentQuery which can be used to initialize the
                AltDocumentSelect ActiveX Control.
            </summary>
            <returns>
                A string representing the query that can be used to initialize the AltDocumentSelect
                ActiveX Control
            </returns>
            <remarks>
                This method will throw an exception if the DocumentQuery uses any features that are not
                supported by the AltDocumentSelect ActiveX Control. This includes all items related to Full
                Text search.
            </remarks>
        </member>
        <member name="T:Hyland.Unity.DocumentRetrievalXmlParser">
            <summary>
                For internal use only. Creates Document Queries from the XML generated by the ActiveX
                Retrieval control.
            </summary>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.#ctor(Hyland.Unity.Application,System.String)">
            <summary>Constructor</summary>
            <param name="app">Connected Unity application.</param>
            <param name="inputXml">
                XML from the ActiveX Retrieval control which is used to create a
                DocumentQuery.
            </param>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.GetQuery">
            <summary>Returns a DocumentQuery from an XML string generated by the ActiveX Retrieval control.</summary>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.AddCategoryItem(System.String,System.Nullable{System.Int64},System.String,Hyland.Unity.DocumentQuery)">
            <summary>Adds a query category item found in the XML string to the DocumentQuery.</summary>
            <param name="category"></param>
            <param name="id"></param>
            <param name="name"></param>
            <param name="query"></param>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.GetQueryKeywordFromXmlElement(System.Xml.XmlReader,Hyland.Unity.Core)">
            <summary>Gets the XmlQueryKeyword from an element.</summary>
            <param name="reader"></param>
            <param name="core"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.LoadCategoriesFromXml(System.Xml.XmlReader,Hyland.Unity.DocumentQuery)">
            <summary>Loads the query categories from the xml.</summary>
            <param name="reader"></param>
            <param name="query"></param>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.LoadConstraint(System.String,System.String,Hyland.Unity.DocumentRetrievalXmlParser.ConstraintRanges)">
            <summary>Loads the constraint range for a query constraint.</summary>
            <param name="constraintName"></param>
            <param name="nodeValue"></param>
            <param name="ranges"></param>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.LoadQueryConstraintsFromXml(System.Xml.XmlReader,Hyland.Unity.DocumentQuery)">
            <summary>Loads the query constraints from the XML string.</summary>
            <param name="reader"></param>
            <param name="query"></param>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.LoadQueryKeywordsFromXml(System.Xml.XmlReader,Hyland.Unity.DocumentQuery)">
            <summary>Loads the query keywords and keyword records from the XML string</summary>
            <param name="reader"></param>
            <param name="query"></param>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.ProcessXmlElement(System.Xml.XmlReader,Hyland.Unity.DocumentQuery)">
            <summary>Processes an element in the document retrieval xml string.</summary>
            <param name="reader"></param>
            <param name="query"></param>
        </member>
        <member name="M:Hyland.Unity.DocumentRetrievalXmlParser.FromXml">
            <summary>Parses the XML string to create a DocumentQuery.</summary>
            <returns>A DocumentQuery object ready to be executed.</returns>
        </member>
        <member name="T:Hyland.Unity.DocumentRetrievalXmlParser.ConstraintRanges">
            <summary>Represents a Date or ID constraint range.</summary>
        </member>
        <member name="T:Hyland.Unity.DocumentRetrievalXmlParser.XmlQueryKeyword">
            <summary>Represents a query keyword found in the XML.</summary>
        </member>
        <member name="T:Hyland.Unity.QueryKeywordRecord">
            <summary>
                QueryKeywordRecord is used to represent a KeywordRecord when assigning Keywords to a
                DocumentQuery
            </summary>
        </member>
        <member name="P:Hyland.Unity.QueryKeywordRecord.KeywordRecordType">
            <summary>The KeywordRecordType for the Query Keyword Record</summary>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(Hyland.Unity.Keyword)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keyword">Keyword to add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(Hyland.Unity.Keyword,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keyword">Keyword to add.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(Hyland.Unity.Keyword,Hyland.Unity.KeywordOperator)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keyword">Keyword to add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(Hyland.Unity.Keyword,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keyword">Keyword to add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.String)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.Decimal)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.Double)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.DateTime)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.Int64)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.String,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.Decimal,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.Double,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.DateTime,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.Int64,System.Int64,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeID">ID of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.String)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.Decimal)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.Double)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.DateTime)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.Int64)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.String,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.Decimal,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.Double,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.DateTime,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="M:Hyland.Unity.QueryKeywordRecord.AddKeyword(System.String,System.Int64,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a Keyword to the Query Keyword Record</summary>
            <param name="keywordTypeName">Name of Keyword Type to Add.</param>
            <param name="value">Value of keyword to Add.</param>
            <param name="op">KeywordOperator to use with the Keyword.</param>
            <param name="relation">KeywordRelation to use with the Keyword.</param>
            <returns>The current QueryKeywordRecord</returns>
        </member>
        <member name="T:Hyland.Unity.QueryResult">
            <summary>
                QueryResult contains the list of QueryResultItems and the list of
                DisplayColumnConfigurations.
            </summary>
        </member>
        <member name="P:Hyland.Unity.QueryResult.DisplayColumnConfigurations">
            <summary>
                DisplayColumn Configuration information for this QueryResult. Values are in the order
                added when calling DocumentQuery.AddDisplayColumn(). If DocumentQuery.AddDisplayColumn() was
                not utilized, the values are ordered as configured on the CustomQuery being used.
            </summary>
        </member>
        <member name="P:Hyland.Unity.QueryResult.QueryResultItems">
            <summary>The items retrieved by a query which include the Documents and DisplayColumns.</summary>
        </member>
        <member name="M:Hyland.Unity.QueryResult.Dispose">
            <summary>Dispose the QueryResult.</summary>
        </member>
        <member name="T:Hyland.Unity.QueryResultItem">
            <summary>An item retrieved by a query. Includes the Document and the DisplayColumns.</summary>
        </member>
        <member name="P:Hyland.Unity.QueryResultItem.DisplayColumns">
            <summary>The related DisplayColumns.</summary>
        </member>
        <member name="P:Hyland.Unity.QueryResultItem.Document">
            <summary>The document retrieved by a query.</summary>
        </member>
        <member name="T:Hyland.Unity.QueryResultItems">
            <summary>An enumerable collection of the items returned from a query.</summary>
        </member>
        <member name="F:Hyland.Unity.QueryResultItems._requestedMaxCount">
            <summary>
                This is the number of documents requested by ExecuteQueryResults(). We should never return
                more total documents than this, regardless of how many pages of documents we end up returning.
            </summary>
        </member>
        <member name="F:Hyland.Unity.QueryResultItems._retrievalOptions">
            <summary>
                The retrieval options requested by ExecuteQueryResults(), which we need so we serialize
                down the correct info for each page of results.
            </summary>
        </member>
        <member name="P:Hyland.Unity.QueryResultItems.EnumerableName">
            <summary>Name of the enumerable to be used in error messages.</summary>
        </member>
        <member name="M:Hyland.Unity.QueryResultItems.ClearPagingInstance">
            <summary>Clears the Paging Instance</summary>
        </member>
        <member name="M:Hyland.Unity.QueryResultItems.LoadPageItems">
            <summary>Load a page of items.</summary>
            <returns>Number of items loaded.</returns>
        </member>
        <member name="T:Hyland.Unity.Services.HylandServices.FieldSerializationVersion">
            <summary>
                Version of serialization used when transmitting EForm fields to the app server.
            </summary>
            <remarks>This enumeration must be synchronized with its app server counterpart in Hyland.Core.Unity.</remarks>
        </member>
        <member name="F:Hyland.Unity.Services.HylandServices.FieldSerializationVersion.Version1">
            <summary>
                Version 1. No special serialization is performed.
            </summary>
        </member>
        <member name="F:Hyland.Unity.Services.HylandServices.FieldSerializationVersion.Version2">
            <summary>
                Version 2. Field names are prepended with an underscore.
            </summary>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#AddDocument(System.Int64,System.Int64)">
            <summary>Adds a document to a given folder</summary>
            <param name="folderID">Folder to add to</param>
            <param name="documentID">Document to add</param>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#ApplyKeywordChanges(System.Int64,Hyland.Unity.KeywordModificationPackage)">
            <summary>Apply keyword changes on the folder</summary>
            <param name="folderID">Folder ID</param>
            <param name="package">Keyword modification package</param>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#CanI(System.Int64,Hyland.Unity.FolderTypePrivileges)">
            <summary>Checks user privileges on the given folder type</summary>
            <param name="folderTypeID">ID of the folder type to check privileges of</param>
            <param name="privilege">What privilege to check</param>
            <returns>Boolean indicaing whether or not user has the given privilege</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#CreateFolder(System.Int64,System.Int64)">
            <summary>Creates a new folder</summary>
            <param name="folderTypeID">ID of the folder type</param>
            <param name="parentFolderID">ID of the parent folder</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#CreateFolder(Hyland.Unity.NewFolderProperties)">
            <summary>Creates a new folder</summary>
            <param name="newfolderProperties">NewFolderProperties object</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#DeleteFolder(System.Int64)">
            <summary>Deletes the given folder</summary>
            <param name="folderID">ID of Folder to delete</param>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#ExecuteFolderQuery(Hyland.Unity.FolderQuery,System.Int64,System.Boolean)">
            <summary>Get folder list</summary>
            <param name="qry">Folder query</param>
            <param name="maxFolders">Maximum number of folders to retrieve</param>
            <param name="retrieveKeywords">boolean indicating whether to retrieve keywords or not</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#ExecuteFolderQuery(System.Int64,System.Boolean)">
            <summary>Get folder By ID</summary>
            <param name="folderID">folder ID</param>
            <param name="retrieveKeywords">boolean indicating whether to retrieve keywords or not</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#GetChildFolders(System.Int64)">
            <summary>Gets all the child folders of a given folder</summary>
            <param name="folderID">folder ID for which to get the child folders</param>
            <returns>List of child folders</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#GetDocuments(System.Int64)">
            <summary>Gets all the documents from a given folder</summary>
            <param name="folderID">folder ID to get documents from</param>
            <returns>List of documents that belong to the given folder</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#GetFileCabinets">
            <summary>Get all the file cabinets in onBase</summary>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#GetFoldersForDocument(System.Int64)">
            <summary>Get folders of a document that it belongs to</summary>
            <param name="documentID">Document ID</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#GetFolderTypes">
            <summary>Get all the folder types in OnBase</summary>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.FolderServiceAccess.Hyland#Unity#Services#IFolderServiceAccess#RemoveDocument(System.Int64,System.Int64)">
            <summary>Removes a document from a given folder</summary>
            <param name="folderID">Folder to remove from</param>
            <param name="documentID">Document to remove from folder</param>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.KeysetServiceAccess.Hyland#Unity#Services#IKeysetServiceAccess#CreateKeysetData(System.Int64,System.Collections.Generic.ICollection{Hyland.Unity.Keyword})">
            <summary>Creates a new KeysetData item for the Keyset</summary>
            <param name="keySetID">keyset ID</param>
            <param name="keywords">List of Keywords</param>
            <returns>keyset data created</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.KeysetServiceAccess.Hyland#Unity#Services#IKeysetServiceAccess#DeleteKeysetData(Hyland.Unity.KeysetData)">
            <summary>Deletes the specified KeysetData from the Keyset</summary>
            <param name="keySetData">The keysetdata that needs to be deleted</param>
            <returns>Boolean indicating whether the operation is successfull or not</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.KeysetServiceAccess.Hyland#Unity#Services#IKeysetServiceAccess#ExpandKeyset(System.Int64,System.Int64,Hyland.Unity.KeywordList)">
            <summary>
                Performs keyset expansion. Note: This method is not being called anywhere in UNITY API and
                hence throwing an exception.
            </summary>
            <param name="keySetID">Keyset ID</param>
            <param name="keySetExpansionOptions">KeySet Expansion Options</param>
            <param name="keyList">keyword list to be used for expansion </param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.KeysetServiceAccess.Hyland#Unity#Services#IKeysetServiceAccess#GetKeysetData(System.Int64,Hyland.Unity.Keyword)">
            <summary>Returns all KeysetData objects within the Keyset that match the primary Keyword value</summary>
            <param name="keySetID">key set ID</param>
            <param name="primaryKeyword">The primary Keyword needed to return KeysetData objects</param>
            <returns>returns exisitng keyset data list</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.KeysetServiceAccess.Hyland#Unity#Services#IKeysetServiceAccess#GetKeysetData(System.Int64,System.Collections.Generic.ICollection{Hyland.Unity.Keyword})">
            <summary>Returns all KeysetData objects within the Keyset that match the primary Keyword values</summary>
            <param name="keySetID">key set ID</param>
            <param name="keywords">A list of primary Keywords needed to return KeysetData objects</param>
            <returns>Returns existing key set data list</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.KeysetServiceAccess.Hyland#Unity#Services#IKeysetServiceAccess#UpdateKeysetData(System.Int64,System.Int64,Hyland.Unity.Keyword,System.Collections.Generic.ICollection{Hyland.Unity.Keyword})">
            <summary>Updates a specific data record in the specified Keyset</summary>
            <param name="keySetID">key set ID</param>
            <param name="keysetDataID">Keyset Data ID that has to be updated</param>
            <param name="primaryKeyword">primary keyword for the keyset</param>
            <param name="keywords">The keyword values used to update the Keyset row</param>
            <returns>updated keyset data</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.LogServiceAccess.Hyland#Unity#Services#ILogServiceAccess#CreateDocumentHistoryItem(System.Int64,System.String)">
            <summary>Makes a request to create a log entry for the document.</summary>
            <param name="documentID">Document for which to add a document transaction log entry</param>
            <param name="message">The message to log</param>
            <returns>Document history item created</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.LogServiceAccess.Hyland#Unity#Services#ILogServiceAccess#GetDocumentHistory(System.Int64,Hyland.Unity.HistoryOptions)">
            <summary>Retrieved the document history for this document</summary>
            <param name="documentID">Document for which to retrieve history</param>
            <param name="getHistoryOptions">History retrieval options</param>
            <returns>List of document history items for the specified document</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.LogServiceAccess.Hyland#Unity#Services#ILogServiceAccess#GetDocumentWorkflowHistory(System.Int64,Hyland.Unity.HistoryOptions)">
            <summary>Retrieves the workflow history for a document</summary>
            <param name="documentID">Document for which to retrieve history </param>
            <param name="getWorkflowHistoryOptions">History retrieval options </param>
            <returns>List of workflow history items for the specified document</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.LogServiceAccess.ConstructHistoryOptionsElement(Hyland.Unity.HistoryOptions)">
            <summary>Creates an Element object from the given history options object</summary>
            <param name="options">Options from which to construct the element from</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.LogServiceAccess.DeserializeDocumentHistory(Hyland.Types.ElementList)">
            <summary>Deserializes the document history log element list items sent by the server</summary>
            <param name="logElementList"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.LogServiceAccess.DeserializeWorkflowHistory(Hyland.Types.ElementList)">
            <summary>Deserializes the document workflow history log element list items sent by the server</summary>
            <param name="logElementList"></param>
            <returns></returns>
        </member>
        <member name="F:Hyland.Unity.Services.HylandServices.MailServiceAccess.IdListDelimiter">
            <summary>The character used to delimit between the different values in an id list.</summary>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.ServiceAccessBase.GetList``2(System.String,Hyland.Unity.Services.HylandServices.Formatters.IElementListDeserializer{``0,``1},``1@)">
            <summary>Gets a session list and global list.</summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TList"></typeparam>
            <param name="serviceMethod">
                Name of the service method which will return the global list and
                excluded IDs.
            </param>
            <param name="deserializer">The deserializer.</param>
            <param name="globalList">The global list.</param>
            <returns>The session list.</returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.ServiceAccessBase.FilterGlobalList``2(``1,System.String,Hyland.Unity.Services.HylandServices.Formatters.IElementListDeserializer{``0,``1})">
            <summary>Creates a user list by filtering excluded items from a global list.</summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TList"></typeparam>
            <param name="globalList"></param>
            <param name="excludedIDs"></param>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.ServiceAccessBase.GetListNoCache(System.String,System.String)">
            <summary>
                Returns a list of results from the specified service method. The list must be contained in
                a service parameter named 'list'.
            </summary>
        </member>
        <member name="M:Hyland.Unity.Services.HylandServices.ServiceAccessBase.GetListFromServer``2(System.String,``1@,Hyland.Unity.Services.HylandServices.Formatters.IElementListDeserializer{``0,``1})">
            <summary>
                Gets the user list and global list for a collection from the server.
                <para>
                    This method modifies the static cache. Make sure you obtain a static lock before calling
                    this method!
                </para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TList"></typeparam>
            <param name="serviceMethod"></param>
            <param name="globalList"></param>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="T:Hyland.Unity.SessionIDAuthenticationProperties">
            <summary>The properties used to authenticate with OnBase using an existing session ID</summary>
        </member>
        <member name="P:Hyland.Unity.SessionIDAuthenticationProperties.SessionCanBeDisconnected">
            <summary>If it is <c>true</c> the session will be disconnected when a <see cref="T:Hyland.Unity.Application" />.
                <c>Disconnect</c> is called.</summary>
        </member>
        <member name="P:Hyland.Unity.SessionIDAuthenticationProperties.SessionID">
            <summary>An existing session id that should be used by Unity API</summary>
        </member>
        <member name="P:Hyland.Unity.SessionIDAuthenticationProperties.LicenseType">
            <summary>The LicenseType to be used. This is optional.</summary>
        </member>
        <member name="T:Hyland.Unity.SessionPing">
            <summary>Ping Operations</summary>
        </member>
        <member name="P:Hyland.Unity.SessionPing.DueTime">
            <summary>
                Get or Set the Timer Due Time in minutes. If this property is not set, the Timer Due Time
                will default to 5 minutes.
            </summary>
            <value>Timer Due Time in minutes.</value>
        </member>
        <member name="P:Hyland.Unity.SessionPing.Frequency">
            <summary>
                Get or Set the Timer Frequency in minutes. If this property is not set, the frequency time
                will default to 5 minutes.
            </summary>
            <value>Timer Frequency in minutes.</value>
        </member>
        <member name="M:Hyland.Unity.SessionPing.StartPinging">
            <summary>
                Call this method to start "pinging" the OnBase application server to keep the current
                OnBase user session alive.
            </summary>
        </member>
        <member name="M:Hyland.Unity.SessionPing.StopPinging">
            <summary>
                Call this method when the user disconnects or the clients application closes down. This
                call is required to properly dispose of the Timer object.
            </summary>
        </member>
        <member name="M:Hyland.Unity.SessionPing.PingAppServer(System.Object)">
            <summary>This method actually does the work of calling into AppServer's Ping web service call.</summary>
            <param name="stateInfo">
                Object that includes information about it's handle (wait handle). We are
                not really using it here.
            </param>
        </member>
        <member name="T:Hyland.Unity.SingleSignOnAuthenticationProperties">
            <summary>The properties used to authenticate with OnBase using Single Sign-On</summary>
        </member>
        <member name="T:Hyland.Unity.StaticCacheManager">
            <summary>Provides functionality related to the static cache.</summary>
        </member>
        <member name="P:Hyland.Unity.StaticCacheManager.StaticCacheLock">
            <summary>Gets the object which is used to synchronize static cache access.</summary>
        </member>
        <member name="P:Hyland.Unity.StaticCacheManager.StaticCache">
            <summary>
                A cache tied to the lifetime of the current application domain or process. Items in this
                cache persist across connect/disconnect calls to the same OnBase system.
                <para>Remember to obtain the StaticCacheLock before accessing this property!</para>
            </summary>
        </member>
        <member name="P:Hyland.Unity.StaticCacheManager.StaticCachingEnabled">
            <summary>Gets whether static caching is enabled for this session.</summary>
        </member>
        <member name="M:Hyland.Unity.StaticCacheManager.#ctor(Hyland.Unity.Application,System.Boolean)">
            <summary>Creates a new instance of StaticCacheManager</summary>
            <param name="app">The connected Application.</param>
            <param name="staticCachingEnabled">
                Whether static caching should be enabled for the current
                session. In most situations, this should be true.
            </param>
        </member>
        <member name="M:Hyland.Unity.StaticCacheManager.AddNewCache">
            <summary>
                Adds a new static cache, and makes room to add the new cache if needed. A static lock must
                be obtained before calling this method.
            </summary>
        </member>
        <member name="M:Hyland.Unity.StaticCacheManager.InitializeStaticCache">
            <summary>Initializes the Static Cache for the current session.</summary>
        </member>
        <member name="T:Hyland.Unity.SystemType">
            <summary>The type of System</summary>
        </member>
        <member name="F:Hyland.Unity.SystemType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:Hyland.Unity.SystemType.Production">
            <summary>Production</summary>
        </member>
        <member name="F:Hyland.Unity.SystemType.Dealer">
            <summary>Dealer</summary>
        </member>
        <member name="F:Hyland.Unity.SystemType.Pilot">
            <summary>Pilot</summary>
        </member>
        <member name="F:Hyland.Unity.SystemType.DisasterRecover">
            <summary>Disaster Recover</summary>
        </member>
        <member name="F:Hyland.Unity.SystemType.Demo">
            <summary>Demo</summary>
        </member>
        <member name="F:Hyland.Unity.SystemType.Development">
            <summary>Development</summary>
        </member>
        <member name="T:Hyland.Unity.SystemProperties">
            <summary>Provides Datasource level properties from the Application Server.</summary>
        </member>
        <member name="P:Hyland.Unity.SystemProperties.InstallID">
            <summary>The InstallID of the Application Server.</summary>
        </member>
        <member name="P:Hyland.Unity.SystemProperties.IsProduction">
            <summary>Is the Application Server set to Production SystemType?</summary>
        </member>
        <member name="P:Hyland.Unity.SystemProperties.ServerVersion">
            <summary>The Version of the Application Server.</summary>
        </member>
        <member name="P:Hyland.Unity.SystemProperties.IsApplicationServerGatewayLicensed">
            <summary>Returns true if Application Server Gateway is licensed, false if it is not.</summary>
        </member>
        <member name="P:Hyland.Unity.SystemProperties.IsEDMLicensed">
            <summary>
                Returns true if EDM is licensed, false if it is not. It can also return false if the
                server cannot determine if EDM is licensed.
            </summary>
        </member>
        <member name="P:Hyland.Unity.SystemProperties.IsUnityServerControlLicensed">
            <summary>
                Returns true if Unity Server Control is licensed, false if it is not. It can also return
                false if the server cannot determine if Unity Server Control is licensed.
            </summary>
        </member>
        <member name="P:Hyland.Unity.SystemProperties.UseUnicode">
            <summary>If true, indicates the system is a Unicode system. False indicates an ANSI system.</summary>
        </member>
        <member name="T:Hyland.Unity.TranslationSettings">
            <summary>The settings which control how select strings are translated.</summary>
        </member>
        <member name="P:Hyland.Unity.TranslationSettings.LanguageCode">
            <summary>
                The language code of the language the strings will be translated to, if a translation
                exists. This value should conform to values returned by the
                System.Globalization.CultureInfo.Name property.
            </summary>
        </member>
        <member name="P:Hyland.Unity.ServiceReference.ServiceSoapClient.Timeout">
            <summary>
            Timeout for receiving data.
            </summary>
        </member>
        <member name="P:Hyland.Unity.ServiceReference.ServiceSoapClient.Url">
            <summary>
            Url of the endpoint.
            </summary>
        </member>
        <member name="T:Hyland.Unity.UnityAPIException">
            <summary>
                This exception is thrown when an error has occurred within the Unity API that was called
                from user code.
            </summary>
        </member>
        <member name="P:Hyland.Unity.UnityAPIException.IsServerError">
            <summary>Returns true if this Exception had a Server Error.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityAPIException.ServerErrorCode">
            <summary>Returns the Server ErrorCode if one exists.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityAPIException.ServerMessage">
            <summary>Returns the Server Message if one exists.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityAPIException.ServerMethod">
            <summary>Returns the Server Method if one exists.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityAPIException.ServerSource">
            <summary>Returns the Server Source if one exists.</summary>
        </member>
        <member name="P:Hyland.Unity.UnityAPIException.ServerStackTrace">
            <summary>Returns the Server StackTrace if one exists.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityAPIException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                This supports the Unity internal infrastructure and it not intended to be used from your
                code.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Hyland.Unity.UnityAPIException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>The ISerializable related method. For internal use.</summary>
            <param name="info">The SerializationInfo</param>
            <param name="context">The StreamingContext</param>
        </member>
        <member name="T:Hyland.Unity.IUnityModifier">
            <summary>Interface for Unity Modifiers</summary>
        </member>
        <member name="M:Hyland.Unity.IUnityModifier.ApplyChanges">
            <summary>Applies the changes of the Unity Modifier</summary>
        </member>
        <member name="T:Hyland.Unity.UnityObject">
            <summary>Base class for all Unity objects</summary>
        </member>
        <member name="T:Hyland.Unity.UnityScriptException">
            <summary>
                The <see cref="T:System.Exception" /> that is thrown when an unknown exception occurs within Unity
                Script user code.
            </summary>
        </member>
        <member name="M:Hyland.Unity.UnityScriptException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Hyland.Unity.UnityScriptException" /> class.</summary>
        </member>
        <member name="M:Hyland.Unity.UnityScriptException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Hyland.Unity.UnityScriptException" /> class with a
                specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Hyland.Unity.UnityScriptException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Hyland.Unity.UnityScriptException" /> class with a
                specified error message and a reference to the inner exception that is the cause of this
                exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">
                The <see cref="T:System.Exception" /> cause of the current
                <see cref="T:Hyland.Unity.UnityScriptException" />.
            </param>
        </member>
        <member name="M:Hyland.Unity.UnityScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Hyland.Unity.UnityScriptException" /> class with
                serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Hyland.Unity.Upop.AttributeValue">
            <summary>Attribute value used to assign values to the new WorkView object that will be opened</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.AttributeValue.DottedAddress">
            <summary>The numeric or named dotted address (i.e. '1001.1002' or 'Manager.Fullname').</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.AttributeValue.Value">
            <summary>The value of this attribute.</summary>
        </member>
        <member name="T:Hyland.Unity.Upop.ClassUpopActions">
            <summary>Creates generators for Upop actions which are performed on a WorkView <see cref="T:Hyland.Unity.WorkView.Class" />
                .</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.ClassUpopActions.CreateWorkViewObjectGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.CreateWorkViewObjectGenerator" /> instance which can be used to
                generate a Upop link.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.CreateWorkViewObjectGenerator" />, which supports the creation of Upop
                links that create a
                <see cref="T:Hyland.Unity.WorkView.Object" /> based on the current class calling
                CreateWorkViewObjectGenerator.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.ClassUpopActions.OpenWorkViewObjectByAttributeGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator" /> instance which can be
                used to generate a Upop link.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator" />, which supports the creation
                of Upop links that open a <see cref="T:Hyland.Unity.WorkView.Object" />
                based on an attribute value.
            </returns>
            <remarks>The attribute name and value must be set before a link can be generated.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.ClassUpopActions.OpenWorkViewObjectByAttributeGenerator(Hyland.Unity.WorkView.AttributeValue)">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator" /> instance which can be
                used to generate a Upop link.
            </summary>
            <param name="attributeValue">
                The <see cref="T:Hyland.Unity.WorkView.AttributeValue" /> used to determine
                which WorkView object will be opened.
            </param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator" />, which supports the creation
                of Upop links that open a
                <see cref="T:Hyland.Unity.WorkView.Object" /> based on the specified attribute value.
            </returns>
            <remarks>
                This method does not support creating a generator with a Date or DateTime attribute in
                systems with a non-standard database date format. If you need to set a Date or DateTime
                attribute value in a system with with non-standard database formatting, set
                <see cref="P:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator.AttributeValue" /> directly.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.ClassUpopActions.OpenWorkViewObjectByIDGenerator(System.Int64)">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectByIDGenerator" /> instanec which can be used
                to generate a Upop link.
            </summary>
            <param name="workViewObjectID">
                The ID of the <see cref="T:Hyland.Unity.WorkView.Object" /> to be opened in
                WorkView.
            </param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectByIDGenerator" />, which supports the creation of Upop
                links that open a <see cref="T:Hyland.Unity.WorkView.Object" /> based on the specified Object ID.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.ClassUpopActions.GetFormattedDateValue(Hyland.Unity.WorkView.AttributeValue)">
            <summary>
                Formats a Date/DateTime attribute value into the proper format for the
                OpenWorkViewObjectByAttribute action.
            </summary>
            <param name="attrValue"></param>
            <returns></returns>
        </member>
        <member name="T:Hyland.Unity.Upop.CreateNewEFormGenerator">
            <summary>Generates a Upop link or file that opens a new <see cref="T:Hyland.Unity.EForm" /> instance.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CreateNewEFormGenerator.TemplateID">
            <summary>The ID of the <see cref="T:Hyland.Unity.EFormTemplate" /> to create the EForm from.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.CreateNewEFormGenerator.GenerateAction">
            <summary>
                Generates a <see cref="T:Hyland.Canvas.Automation.CreateNewFormAction" /> to be used in CreateUpopLink and
                CreateUpopFile.
            </summary>
            <returns>
                A new instance of <see cref="T:Hyland.Canvas.Automation.CreateNewFormAction" />
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.CreateNewEFormGenerator.CreateUpopFile">
            <summary>Creates a Upop file which will open an EForm instance from the
                <see cref="T:Hyland.Unity.EFormTemplate" /> specified in the <see cref="P:Hyland.Unity.Upop.CreateNewEFormGenerator.TemplateID" /> property.</summary>
            <returns>A <see cref="T:Hyland.Unity.PageData" /> which contains file data for a Upop file which will open an
                <see cref="T:Hyland.Unity.EForm" /> instance.</returns>
            <remarks>The file is signed and will not function if it is modified.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.CreateNewEFormGenerator.CreateUpopLink">
            <summary>Creates a Upop link which will open the EForm instance based on the
                <see cref="T:Hyland.Unity.EFormTemplate" /> specified in the <see cref="P:Hyland.Unity.Upop.CreateNewEFormGenerator.TemplateID" /> property.</summary>
            <returns>A URL which will open the <see cref="T:Hyland.Unity.EForm" />.</returns>
            <remarks>The URL is signed and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.CreateNewUnityFormGenerator">
            <summary>Creates a Upop link or file that opens a new Unity <see cref="T:Hyland.Unity.UnityForm.Form" /> instance.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CreateNewUnityFormGenerator.TemplateID">
            <summary>The ID of the <see cref="T:Hyland.Unity.UnityForm.FormTemplate" /> used to create the Unity Form.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.CreateNewUnityFormGenerator.GenerateAction">
            <summary>
                Generates a <see cref="T:Hyland.Canvas.Automation.CreateNewFormAction" /> to be used in CreateUpopLink and
                CreateUpopFile.
            </summary>
            <returns>
                A new instance of <see cref="T:Hyland.Canvas.Automation.CreateNewFormAction" />
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.CreateNewUnityFormGenerator.CreateUpopFile">
            <summary>
                Creates a Upop file which will open a Unity Form instance from the
                <see cref="T:Hyland.Unity.UnityForm.FormTemplate" /> specified in the <see cref="P:Hyland.Unity.Upop.CreateNewUnityFormGenerator.TemplateID" /> property.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.PageData" /> which contains file data for a Upop file which will open a Unity
                Form instance.
            </returns>
            <remarks>The file is signed and will not function if it is modified.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.CreateNewUnityFormGenerator.CreateUpopLink">
            <summary>Creates a Upop link which will open the Unity Form instance based on the
                <see cref="T:Hyland.Unity.UnityForm.FormTemplate" /> specified in the <see cref="P:Hyland.Unity.Upop.CreateNewUnityFormGenerator.TemplateID" /> property.</summary>
            <returns>A URL which will open the Unity Form.</returns>
            <remarks>The URL is signed and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.CreateWorkViewObjectGenerator">
            <summary>Generates Upop links which create a WorkView object</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CreateWorkViewObjectGenerator.ClassID">
            <summary>The class ID of the WorkView object which will be created.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CreateWorkViewObjectGenerator.Values">
            <summary>
                A List of attribute values used to assign values to the new WorkView object that will be
                opened.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CreateWorkViewObjectGenerator.CreationType">
            <summary>Set to make the WorkView Object either active or innactive</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.CreateWorkViewObjectGenerator.AddAttributeValue(System.String,System.String)">
            <summary>Creates an <see cref="T:Hyland.Unity.Upop.AttributeValue" /> and adds it to the Values List</summary>
            <param name="dottedAddress">Specifies a WorkView Class Attribute Name</param>
            <param name="value">The value for the Attribute specified by dottedAddress</param>
        </member>
        <member name="M:Hyland.Unity.Upop.CreateWorkViewObjectGenerator.CreateUpopLink">
            <summary>
                Creates a Upop link, which creates a WorkView object with the specified attribute when
                opened in a browser.
            </summary>
            <returns>A URL which creates a WorkView object when opened.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.CustomQueryGenerator">
            <summary>Generates Upop links and files which perform a <see cref="T:Hyland.Unity.CustomQuery" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CustomQueryGenerator.FromDate">
            <summary>
                If set, constrains the query to only return items with a date greater than or equal to
                this date.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CustomQueryGenerator.FullTextSearchValue">
            <summary>The IDOL full text search string which will be added to the query.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CustomQueryGenerator.ID">
            <summary>The <see cref="T:Hyland.Unity.CustomQuery" />'s ID.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CustomQueryGenerator.Name">
            <summary>The <see cref="T:Hyland.Unity.CustomQuery" />'s Name.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CustomQueryGenerator.ToDate">
            <summary>
                If set, constrains the query to only return items with a date less than or equal to this
                date.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Upop.CustomQueryGenerator.Keywords">
            <summary>Keywords which will be added to the query.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.CustomQueryGenerator.AddKeyword(Hyland.Unity.Keyword)">
            <summary>Adds a <see cref="T:Hyland.Unity.Keyword" /> to the custom query.</summary>
            <param name="keyword">The <see cref="T:Hyland.Unity.Keyword" /> which will be added to the custom query.</param>
            <remarks>This method adds the <see cref="T:Hyland.Unity.Keyword" /> to the query with a
                <see cref="T:Hyland.Unity.KeywordOperator" /> of "Equal", and a <see cref="T:Hyland.Unity.KeywordRelation" /> of "And".</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.CustomQueryGenerator.AddKeyword(Hyland.Unity.Keyword,Hyland.Unity.KeywordOperator)">
            <summary>Adds a <see cref="T:Hyland.Unity.Keyword" /> to the custom query.</summary>
            <param name="keyword">The <see cref="T:Hyland.Unity.Keyword" /> which will be added to the custom query.</param>
            <param name="operator">The <see cref="T:Hyland.Unity.KeywordOperator" /> used to compare keyword values.</param>
            <remarks>This method adds the <see cref="T:Hyland.Unity.Keyword" /> to the query with a
                <see cref="T:Hyland.Unity.KeywordRelation" /> of "And".</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.CustomQueryGenerator.AddKeyword(Hyland.Unity.Keyword,Hyland.Unity.KeywordRelation)">
            <summary>Adds a <see cref="T:Hyland.Unity.Keyword" /> to the custom query.</summary>
            <param name="keyword">The <see cref="T:Hyland.Unity.Keyword" /> which will be added to the custom query.</param>
            <param name="connector">
                The <see cref="T:Hyland.Unity.KeywordRelation" /> used to connect this keyword with other
                keywords of the same type.
            </param>
            <remarks>
                This method adds the <see cref="T:Hyland.Unity.Keyword" /> to the query with a
                <see cref="T:Hyland.Unity.KeywordOperator" /> of "Equal".
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.CustomQueryGenerator.AddKeyword(Hyland.Unity.Keyword,Hyland.Unity.KeywordOperator,Hyland.Unity.KeywordRelation)">
            <summary>Adds a <see cref="T:Hyland.Unity.Keyword" /> to the custom query.</summary>
            <param name="keyword">The <see cref="T:Hyland.Unity.Keyword" /> which will be added to the custom query.</param>
            <param name="operator">The <see cref="T:Hyland.Unity.KeywordOperator" /> used to compare keyword values.</param>
            <param name="connector">
                The <see cref="T:Hyland.Unity.KeywordRelation" /> used to connect this keyword with other
                keywords of the same type.
            </param>
        </member>
        <member name="M:Hyland.Unity.Upop.CustomQueryGenerator.GenerateAction">
            <summary>
                Generates a <see cref="T:Hyland.Canvas.Automation.CustomQueryAction" /> to be used in CreateUpopFile and
                CreateUpopLink.
            </summary>
            <returns>A <see cref="T:Hyland.Canvas.Automation.CustomQueryAction" /> with properties set from the generator.</returns>
        </member>
        <member name="M:Hyland.Unity.Upop.CustomQueryGenerator.CreateUpopFile">
            <summary>Creates a Upop file which performs a custom query when opened.</summary>
            <returns>
                <see cref="T:Hyland.Unity.PageData" /> for the Upop file. The <see cref="T:Hyland.Unity.PageData" /> must be written to the
                disk and the file opened in order to perform the custom query.
            </returns>
            <remarks>
                The file is signed, and will not function if it is modified. The <see cref="T:Hyland.Unity.PageData" />
                should be disposed after it is used.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.CustomQueryGenerator.CreateUpopLink">
            <summary>Creates a Upop link which performs a custom query when opened in a browser.</summary>
            <returns>A URL which performs a custom query when opened.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.CustomQueryUpopActions">
            <summary>Creates generators for Upop actions which are performed on a <see cref="T:Hyland.Unity.CustomQuery" />.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.CustomQueryUpopActions.CustomQueryGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.CustomQueryGenerator" /> instance which can be used to generate
                Upop links and files.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.CustomQueryGenerator" />, which supports the creation of Upop links and
                files that execute a <see cref="T:Hyland.Unity.CustomQuery" />.
            </returns>
        </member>
        <member name="T:Hyland.Unity.Upop.DocumentListUpopActions">
            <summary>Creates generators for Upop actions which are performed on a list of
                <see cref="T:Hyland.Unity.Document" />s.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.DocumentListUpopActions.ShowDocumentListGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.ShowDocumentListGenerator" /> instance which can be used to
                generate a Upop link or file.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.ShowDocumentListGenerator" /> populated with the <see cref="T:Hyland.Unity.Document" />
                s in the document list.
            </returns>
            <remarks>The document list cannot contain any null items.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.DocumentUpopActions">
            <summary>Creates generators for Upop actions which are performed on a <see cref="T:Hyland.Unity.Document" />.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.DocumentUpopActions.OpenDocumentInWorkflowGenerator(Hyland.Unity.Workflow.Queue)">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator" /> object that can be used to
                generate a Upop file or link.
            </summary>
            <param name="queue">The <see cref="T:Hyland.Unity.Workflow.Queue" /> that the document is located in.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator" /> which can be used to generate a Upop
                file or link which opens a <see cref="T:Hyland.Unity.Document" /> in a Workflow <see cref="T:Hyland.Unity.Workflow.Queue" />.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.DocumentUpopActions.ShowDocumentGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.ShowDocumentGenerator" /> instance that can be used to generate
                a Upop file or link to show the <see cref="T:Hyland.Unity.Document" /> in the Unity Client.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.ShowDocumentGenerator" /> that can be used to generate a Upop file or
                link.
            </returns>
        </member>
        <member name="T:Hyland.Unity.Upop.EFormTemplateUpopActions">
            <summary>Creates generators for Upop actions which are performed on an <see cref="T:Hyland.Unity.EFormTemplate" />
                .</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.EFormTemplateUpopActions.CreateNewEFormGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.CreateNewEFormGenerator" /> instance that can be used to
                generate a Upop link or file.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.CreateNewEFormGenerator" /> populated with the template ID of the
                provided <see cref="T:Hyland.Unity.EFormTemplate" />.
            </returns>
        </member>
        <member name="T:Hyland.Unity.Upop.FilterQueryUpopActions">
            <summary>Creates generators for Upop actions which are performed on a WorkView
                <see cref="T:Hyland.Unity.WorkView.FilterQuery" />.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.FilterQueryUpopActions.OpenWorkViewFilterGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.OpenWorkViewFilterGenerator" /> instance that can be used to
                generate a Upop link.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenWorkViewFilterGenerator" /> populated with the values from the
                <see cref="T:Hyland.Unity.WorkView.FilterQuery" />.
            </returns>
        </member>
        <member name="T:Hyland.Unity.Upop.FolderUpopActions">
            <summary>Creates generators for Upop actions which are performed on a <see cref="T:Hyland.Unity.Folder" />.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.FolderUpopActions.OpenFolderInWorkflowGenerator(Hyland.Unity.Workflow.Queue)">
            <summary>
                Creates and returns a <see cref="T:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator" /> object that can be
                used to generate a Upop file or link
            </summary>
            <param name="queue">The <see cref="T:Hyland.Unity.Workflow.Queue" /> that the folder is located in.</param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator" /> object which supports creation of
                files and links which open a <see cref="T:Hyland.Unity.Folder" /> in Workflow.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.FolderUpopActions.ShowFolderGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.ShowFolderGenerator" /> instance that can be used to generate a
                Upop link or file
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.ShowFolderGenerator" /> populated with the folder ID of the
                <see cref="T:Hyland.Unity.Folder" />.
            </returns>
        </member>
        <member name="T:Hyland.Unity.Upop.FormTemplateUpopActions">
            <summary>Creates generators for Upop actions which are performed on a Unity Form
                <see cref="T:Hyland.Unity.UnityForm.FormTemplate" />.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.FormTemplateUpopActions.CreateNewUnityFormGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.CreateNewUnityFormGenerator" /> instance that can be used to
                generate a Upop link or file.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.CreateNewUnityFormGenerator" /> populated with the template ID of the
                Unity Form <see cref="T:Hyland.Unity.UnityForm.FormTemplate" />.
            </returns>
        </member>
        <member name="T:Hyland.Unity.Upop.IUpopFileGenerator">
            <summary>Interface for Upop generators which support creating Upop files.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.IUpopFileGenerator.CreateUpopFile">
            <summary>Creates a Upop file, which performs a Unity pop action when opened.</summary>
            <returns>
                <see cref="T:Hyland.Unity.PageData" /> for the Upop file. The <see cref="T:Hyland.Unity.PageData" /> must be written to the
                disk and the file opened in order to perform the Upop action.
            </returns>
            <remarks>
                The file is signed, and will not function if it is modified. The <see cref="T:Hyland.Unity.PageData" />
                should be disposed after it is used.
            </remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.IUpopLinkGenerator">
            <summary>A Upop generator which supports creating Upop links.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.IUpopLinkGenerator.CreateUpopLink">
            <summary>Creates a Upop link, which performs a Unity pop action when opened in a browser.</summary>
            <returns>A URL which performs a Upop action when opened.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.ObjectUpopActions">
            <summary>Creates generators for Upop actions which are performed on a
                <see cref="T:Hyland.Unity.WorkView.Object" />.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.ObjectUpopActions.OpenWorkViewObjectGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectByIDGenerator" /> instance which can be used to
                generate a Upop link.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectByIDGenerator" />, which supports the creation of Upop
                links that open a <see cref="T:Hyland.Unity.WorkView.Object" /> based on an Object ID.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.ObjectUpopActions.OpenWorkViewObjectInWorkflowGenerator(Hyland.Unity.Workflow.Queue)">
            <summary>
                Creates and returns <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator" /> object that
                can be used to generate a Upop file or link.
            </summary>
            <param name="queue">
                The <see cref="T:Hyland.Unity.Workflow.Queue" /> that the <see cref="T:Hyland.Unity.WorkView.Object" /> is
                located in.
            </param>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator" /> which supports creation of
                files and links which open a <see cref="T:Hyland.Unity.WorkView.Object" /> in Workflow.
            </returns>
        </member>
        <member name="T:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator">
            <summary>
                Class that is used to create Upop links and files which open a <see cref="T:Hyland.Unity.Document" /> in
                Workflow.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator.DocumentID">
            <summary>Unique ID for the <see cref="T:Hyland.Unity.Document" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator.LifecycleID">
            <summary>Unique ID for the <see cref="T:Hyland.Unity.Workflow.LifeCycle" /> the object is located in.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator.QueueID">
            <summary>The unique ID for the <see cref="T:Hyland.Unity.Workflow.Queue" /> in Workflow.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator.Validate">
            <summary>Validates that valid IDs are passed in.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator.CreateUpopFile">
            <summary>Creates a Upop file.</summary>
            <returns>A <see cref="T:Hyland.Unity.PageData" /> which contains file data for a Upop file which will open the
                <see cref="T:Hyland.Unity.Document" /> in Workflow.</returns>
            <remarks>The file is signed, and will not function if it is modified. The <see cref="T:Hyland.Unity.PageData" />
                should be disposed after it is used.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenDocumentInWorkflowGenerator.CreateUpopLink">
            <summary>Creates a Upop Link.</summary>
            <returns>A URL which opens the <see cref="T:Hyland.Unity.Document" /> in Workflow.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator">
            <summary>
                Class that is used to create Upop links and files which open a <see cref="T:Hyland.Unity.Folder" /> in
                Workflow.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator.FolderID">
            <summary>Unique ID for the <see cref="T:Hyland.Unity.Folder" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator.LifecycleID">
            <summary>Unique ID for the <see cref="T:Hyland.Unity.Workflow.LifeCycle" /> the object is located in.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator.QueueID">
            <summary>The unique id for the <see cref="T:Hyland.Unity.Workflow.Queue" /> in Workflow.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator.Validate">
            <summary>Validates that valid IDs are passed in.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator.CreateUpopFile">
            <summary>Creates a Upop file.</summary>
            <returns>A <see cref="T:Hyland.Unity.PageData" /> which contains file data for a Upop file which will open the
                <see cref="T:Hyland.Unity.Folder" /> in Workflow.</returns>
            <remarks>The file is signed, and will not function if it is modified. The <see cref="T:Hyland.Unity.PageData" />
                should be disposed after it is used.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenFolderInWorkflowGenerator.CreateUpopLink">
            <summary>Creates a Upop Link.</summary>
            <returns>A URL which opens the <see cref="T:Hyland.Unity.Folder" /> in Workflow.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.OpenWorkflowLifecycleGenerator">
            <summary>Generates a Upop link or a Upop file which opens a <see cref="T:Hyland.Unity.Workflow.Queue" /> in a Workflow
                <see cref="T:Hyland.Unity.Workflow.LifeCycle" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkflowLifecycleGenerator.LifeCycleID">
            <summary>The life cycle ID of the <see cref="T:Hyland.Unity.Workflow.LifeCycle" /> that will be opened.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkflowLifecycleGenerator.QueueID">
            <summary>The queue ID of the <see cref="T:Hyland.Unity.Workflow.Queue" /> that will be opened.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkflowLifecycleGenerator.CreateUpopFile">
            <summary>
                Creates PageData for creating a Upop file.  When this file is opened, a Workflow life
                cycle queue will open.
            </summary>
            <returns>
                <see cref="T:Hyland.Unity.PageData" /> for creating a Upop file.
            </returns>
            <remarks>The file is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkflowLifecycleGenerator.CreateUpopLink">
            <summary>Creates a Upop link, which opens a life cycle queue when opened in a browser.</summary>
            <returns>A URL which opens a life cycle queue when clicked.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.OpenWorkViewFilterGenerator">
            <summary>Generates Upop links which open a WorkView <see cref="T:Hyland.Unity.WorkView.Filter" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewFilterGenerator.FilterID">
            <summary>ID associated with the <see cref="T:Hyland.Unity.WorkView.Filter" /> to open.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewFilterGenerator.GenerateAction">
            <summary>Generates a <see cref="T:Hyland.Canvas.Automation.OpenWorkviewFilterAction" /> for use in CreateUpopLink.</summary>
            <returns>A new <see cref="T:Hyland.Canvas.Automation.OpenWorkviewFilterAction" />
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewFilterGenerator.CreateUpopLink">
            <summary>Creates a Upop link which will open the <see cref="T:Hyland.Unity.WorkView.Filter" /> specified in the
                <see cref="P:Hyland.Unity.Upop.OpenWorkViewFilterGenerator.FilterID" /> property.</summary>
            <returns>A URL which opens a WorkView filter.</returns>
            <remarks>The URL is signed and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator">
            <summary>
                Generates Upop links which open a <see cref="T:Hyland.Unity.WorkView.Object" /> based on an
                attribute value.
            </summary>
            <remarks>
                This Upop action will open a single WorkView object with the specified attribute value. It
                does not perform a search for all WorkView objects with the attribute value. For best results,
                the attribute used should be a unique key for your object.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator.AttributeName">
            <summary>
                Gets or sets the name of the <see cref="T:Hyland.Unity.WorkView.Attribute" /> used to determine
                which <see cref="T:Hyland.Unity.WorkView.Object" /> will be opened.
            </summary>
            <remarks>The attribute name cannot be a null, empty, or whitespace string.</remarks>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator.AttributeValue">
            <summary>
                Gets or sets the attribute value used to determine which
                <see cref="T:Hyland.Unity.WorkView.Object" /> will be opened.
            </summary>
            <remarks>
                <para>
                    The formatting of Date and DateTime values must match your database's formatting. For
                    many databases, this format is: "yyyy-MM-dd HH:mm:ss.fff". Different database systems,
                    locales, and formatting settings may cause your database's date format to differ.
                </para>
                <para>
                    Currency values should be formatted as decimals and should not include any currency
                    symbols.
                </para>
                The attribute value cannot be a null, empty, or whitespace string.
            </remarks>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator.ClassID">
            <summary>
                Gets the <see cref="T:Hyland.Unity.WorkView.Class" /> ID of the <see cref="T:Hyland.Unity.WorkView.Object" /> which will be
                opened.
            </summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator.GenerateAction">
            <summary>
                Generates a <see cref="T:Hyland.Canvas.Automation.OpenWorkviewObjectByAttributeAction" /> to be used in
                CreateUpopLink.
            </summary>
            <returns>A new <see cref="T:Hyland.Canvas.Automation.OpenWorkviewObjectByAttributeAction" />.</returns>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator.CreateUpopLink">
            <summary>Creates a Upop link, which opens a <see cref="T:Hyland.Unity.WorkView.Object" /> with the specified
                <see cref="T:Hyland.Unity.WorkView.Attribute" /> when opened in a browser.</summary>
            <returns>A URL which opens a WorkView object when opened.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewObjectByAttributeGenerator.IsInvalidAttributeType(Hyland.Unity.WorkView.AttributeType)">
            <summary>Gets whether the attribute type is invalid for this action.</summary>
            <param name="type">The type of attribute being passed into the generator.</param>
            <returns>True if the attribute type is not supported.</returns>
        </member>
        <member name="T:Hyland.Unity.Upop.OpenWorkViewObjectByIDGenerator">
            <summary>Generates Upop links which open a <see cref="T:Hyland.Unity.WorkView.Object" /> based on its ID.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectByIDGenerator.ClassID">
            <summary>
                The <see cref="T:Hyland.Unity.WorkView.Class" /> ID of the <see cref="T:Hyland.Unity.WorkView.Object" /> which will be
                opened.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectByIDGenerator.ObjectID">
            <summary>The object ID of the <see cref="T:Hyland.Unity.WorkView.Object" /> which will be opened.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewObjectByIDGenerator.CreateUpopLink">
            <summary>
                Creates a Upop link, which opens a <see cref="T:Hyland.Unity.WorkView.Object" /> with the specified ID
                when opened in a browser.
            </summary>
            <returns>A URL which opens a WorkView object when opened.</returns>
            ///
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator">
            <summary>Class that is used to create Upop links and files which open a
                <see cref="T:Hyland.Unity.WorkView.Object" /> in Workflow.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator.ClassID">
            <summary>The <see cref="T:Hyland.Unity.WorkView.Object" />'s <see cref="T:Hyland.Unity.WorkView.Class" /> ID.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator.LifecycleID">
            <summary>
                Unique ID for the <see cref="T:Hyland.Unity.Workflow.LifeCycle" /> the <see cref="T:Hyland.Unity.WorkView.Object" /> is located
                in.
            </summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator.ObjectID">
            <summary>Unique ID for the <see cref="T:Hyland.Unity.WorkView.Object" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator.QueueID">
            <summary>The unique ID for the <see cref="T:Hyland.Unity.Workflow.Queue" /> in the Workflow.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator.Validate">
            <summary>Validates that valid IDs are passed in.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator.CreateUpopFile">
            <summary>Creates a Upop file.</summary>
            <returns>A <see cref="T:Hyland.Unity.PageData" /> which contains file data for a Upop file which will open the
                <see cref="T:Hyland.Unity.WorkView.Object" /> in Workflow.</returns>
            <remarks>The file is signed, and will not function if it is modified. The <see cref="T:Hyland.Unity.PageData" />
                should be disposed after it is used.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.OpenWorkViewObjectInWorkflowGenerator.CreateUpopLink">
            <summary>Creates a Upop Link.</summary>
            <returns>A URL which opens the <see cref="T:Hyland.Unity.WorkView.Object" /> in Workflow.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.QueueUpopActions">
            <summary>Creates generators for Upop actions which are performed on a Workflow <see cref="T:Hyland.Unity.Workflow.Queue" />
                .</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.QueueUpopActions.OpenWorkflowLifecycleGenerator">
            <summary>
                Creates a <see cref="T:Hyland.Unity.Upop.OpenWorkflowLifecycleGenerator" /> instance which can be used to
                generate a Upop link or file.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.Upop.OpenWorkflowLifecycleGenerator" />, which supports the creation of Upop
                links and files that open a Workflow life cycle queue.
            </returns>
        </member>
        <member name="T:Hyland.Unity.Upop.ShowDocumentGenerator">
            <summary>Creates Upop files or links that show a <see cref="T:Hyland.Unity.Document" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.ShowDocumentGenerator.DocumentID">
            <summary>The ID of the <see cref="T:Hyland.Unity.Document" /> to show.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowDocumentGenerator.GenerateAction">
            <summary>
                Generates a <see cref="T:Hyland.Canvas.Automation.ShowDocumentAction" /> to be used in CreateUpopFile and
                CreateUpopLink
            </summary>
            <returns>
                A new instance of <see cref="T:Hyland.Canvas.Automation.ShowDocumentAction" />
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowDocumentGenerator.CreateUpopFile">
            <summary>Creates a Upop file which will open the Document specified in the <see cref="T:Hyland.Unity.Document" />
                property.</summary>
            <returns>A <see cref="T:Hyland.Unity.PageData" /> which contains file data for a Upop file which will open the
                <see cref="T:Hyland.Unity.Document" />.</returns>
            <remarks>The file is signed and will not function if it is modified.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowDocumentGenerator.CreateUpopLink">
            <summary>Creates a Upop link which will open the Document specified in the <see cref="T:Hyland.Unity.Document" />
                property.</summary>
            <returns>A URL which opens the <see cref="T:Hyland.Unity.Document" />.</returns>
            <remarks>The URL is signed and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.ShowDocumentListGenerator">
            <summary>Generates Upop links which open lists of <see cref="T:Hyland.Unity.Document" />s.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.ShowDocumentListGenerator.DocumentIDs">
            <summary>List of <see cref="T:Hyland.Unity.Document" /> IDs to be displayed.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowDocumentListGenerator.GenerateAction">
            <summary>
                Generates a <see cref="T:Hyland.Canvas.Automation.ShowDocumentListAction" /> to be used in the CreateUpopLink and
                CreateUpopFile methods.
            </summary>
            <returns>A new instance of ShowDocumentListAction</returns>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowDocumentListGenerator.CreateUpopFile">
            <summary>
                Creates a Upop file which will open the list of <see cref="T:Hyland.Unity.Document" />s specified in
                <see cref="P:Hyland.Unity.Upop.ShowDocumentListGenerator.DocumentIDs" /> property.
            </summary>
            <returns>
                A <see cref="T:Hyland.Unity.PageData" /> which contains file data for a Upop file which will open the
                list of Documents.
            </returns>
            <remarks>The file is signed and will not function if it is modified.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowDocumentListGenerator.CreateUpopLink">
            <summary>Creates a Upop link which will open the list of <see cref="T:Hyland.Unity.Document" />s specified in the
                <see cref="P:Hyland.Unity.Upop.ShowDocumentListGenerator.DocumentIDs" /> property.</summary>
            <returns>A URL which opens the list of Documents.</returns>
            <remarks>The URL is signed and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.ShowFolderGenerator">
            <summary>Generates a Upop link or file that opens a <see cref="T:Hyland.Unity.Folder" />.</summary>
        </member>
        <member name="P:Hyland.Unity.Upop.ShowFolderGenerator.FolderID">
            <summary>The ID of the <see cref="T:Hyland.Unity.Folder" /> to be opened.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowFolderGenerator.GenerateAction">
            <summary>
                Generates a <see cref="T:Hyland.Canvas.Automation.ShowFolderAction" /> to be used in CreateUpopLink and
                CreateUpopFile
            </summary>
            <returns>
                A new instance of <see cref="T:Hyland.Canvas.Automation.ShowFolderAction" />
            </returns>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowFolderGenerator.CreateUpopFile">
            <summary>Creates a Upop file which will open the <see cref="T:Hyland.Unity.Folder" /> specified in the
                <see cref="P:Hyland.Unity.Upop.ShowFolderGenerator.FolderID" /> property.</summary>
            <returns>A <see cref="T:Hyland.Unity.PageData" /> which contains file data for a Upop file which will open the
                <see cref="T:Hyland.Unity.Folder" />.</returns>
            <remarks>The file is signed and will not function if it is modified.</remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.ShowFolderGenerator.CreateUpopLink">
            <summary>Creates a Upop link which will open the <see cref="T:Hyland.Unity.Folder" /> specified in the
                <see cref="P:Hyland.Unity.Upop.ShowFolderGenerator.FolderID" /> property.</summary>
            <returns>A URL which opens a <see cref="T:Hyland.Unity.Folder" />.</returns>
            <remarks>The URL is signed and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.Upop.UpopGenerator">
            <summary>Supports the creation of Upop links and files.</summary>
        </member>
        <member name="M:Hyland.Unity.Upop.UpopGenerator.CreateUpopFile(Hyland.Canvas.Automation.UpopAction)">
            <summary>
                Creates a Upop file, which performs a Upop action when opened. Not all Upop actions
                support being created as a file. See the remarks for a list of supported actions.
            </summary>
            <param name="action">The action to create the file for.</param>
            <returns>
                PageData for the Upop file. The PageData must be written to the disk and the file opened
                in order to perform the Upop action.
            </returns>
            <remarks>
                The following actions support being created as a Upop file (taken from the XmlInclude
                attributes in UpopAutomationFile): - ShowDocumentListAction - ShowDocumentAction -
                CustomQueryAction - CreateNewFormAction - OpenItemInWorkflowAction -
                OpenWorkflowLifecycleAction - ShowFolderAction
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Upop.UpopGenerator.CreateUpopLink(Hyland.Canvas.Automation.ISupportUriSharing)">
            <summary>Creates a Upop link, which performs a Upop action when opened in a browser.</summary>
            <param name="action">The action to create the file for.</param>
            <returns>A URL which performs a Upop action when opened.</returns>
            <remarks>The URL is signed, and will not function if it is modified.</remarks>
        </member>
        <member name="T:Hyland.Unity.IndexedListException">
            <summary>Occurs when a List is not defined as indexed.</summary>
        </member>
        <member name="T:Hyland.Unity.IndexedList`1">
            <summary>Base list for Unity lists</summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
        </member>
        <member name="P:Hyland.Unity.IndexedList`1.Item(System.Int32)">
            <summary>Indexer</summary>
            <param name="index">Index</param>
            <returns>Item at the index</returns>
        </member>
        <member name="P:Hyland.Unity.IndexedList`1.Count">
            <summary>Number of items in the list</summary>
        </member>
        <member name="P:Hyland.Unity.IndexedList`1.IsReadOnly">
            <summary>Is the list readonly</summary>
        </member>
        <member name="P:Hyland.Unity.IndexedList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>The method or operation is not implemented.</summary>
            <param name="index">index</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.Find(System.Predicate{`0})">
            <summary>Finds the item that matches the predicate.</summary>
            <param name="predicate">The predicate.</param>
            <returns>the item found</returns>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.FindAll(System.Predicate{`0})">
            <summary>Finds the items that matches the predicate</summary>
            <param name="predicate">The predicate</param>
            <returns>the IEnumerable collection of all items that match the predicate</returns>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>Adds an Item to the end of the collection.</summary>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>The method or operation is not implemented.</summary>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.Contains(`0)">
            <summary>Tests to see the list contains the item.</summary>
            <param name="item">Item</param>
            <returns>Success</returns>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.CopyTo(`0[],System.Int32)">
            <summary>Copies list to the supplied array at the given index.</summary>
            <param name="array">Array</param>
            <param name="arrayIndex">Given Index</param>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>The method or operation is not implemented.</summary>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns the IEnumerator</summary>
            <returns>The IEnumerator that will enumerate this collection</returns>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.GetEnumerator">
            <summary>Gets the IEnumerator for the list</summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.IndexOf(`0)">
            <summary>Finds the index of the item</summary>
            <param name="item">Item</param>
            <returns>Index</returns>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>The method or operation is not implemented.</summary>
            <param name="index">index</param>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>The method or operation is not implemented.</summary>
            <param name="index">index</param>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.Add(`0)">
            <summary>Adds an Item to the end of the list</summary>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.Clear">
            <summary>Clears the list</summary>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.Insert(System.Int32,`0)">
            <summary>Inserts the item at the index.</summary>
            <param name="index">Index</param>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.Remove(`0)">
            <summary>Removes Item from the list.</summary>
            <param name="item">Item</param>
            <returns>Returns <c>true</c> if Item removed. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Hyland.Unity.IndexedList`1.RemoveAt(System.Int32)">
            <summary>Removes the item at the index.</summary>
            <param name="index">Index</param>
        </member>
        <member name="T:Hyland.Unity.SearchableIndexedList`1">
            <summary>Base list for Unity lists</summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
        </member>
        <member name="P:Hyland.Unity.SearchableIndexedList`1.Item(System.Int32)">
            <summary>Indexer</summary>
            <param name="index">Index</param>
            <returns>Item at the index</returns>
        </member>
        <member name="M:Hyland.Unity.SearchableIndexedList`1.Find(System.Int64)">
            <summary>Finds the IIndexedByID objects by the supplied ID</summary>
            <param name="id">ID</param>
            <returns>IIndexedByID object</returns>
        </member>
        <member name="M:Hyland.Unity.SearchableIndexedList`1.Find(System.String)">
            <summary>Finds the IIndexedByName objects by the supplied Name</summary>
            <param name="name">Name</param>
            <returns>IIndexedByName object</returns>
        </member>
        <member name="M:Hyland.Unity.SearchableIndexedList`1.Add(`0)">
            <summary>Adds an Item to the end of the list</summary>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.SearchableIndexedList`1.Clear">
            <summary>Clears the list</summary>
        </member>
        <member name="M:Hyland.Unity.SearchableIndexedList`1.Insert(System.Int32,`0)">
            <summary>Inserts the item at the index.</summary>
            <param name="index">Index</param>
            <param name="item">Item</param>
        </member>
        <member name="M:Hyland.Unity.SearchableIndexedList`1.Remove(`0)">
            <summary>Removes Item from the list.</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.SearchableIndexedList`1.RemoveAt(System.Int32)">
            <summary>Removes the item at the index.</summary>
            <param name="index">Index</param>
        </member>
        <member name="T:Hyland.Unity.SecureXmlUtility">
            <summary>A utility class for securely working with raw Xml data.</summary>
            <remarks>
                This class is a .NET 3.5 compliant version of the Hyland.Common.SecureXmlDocument class.
                Hardening recommendations taken from: https://msdn.microsoft.com/en-us/magazine/ee335713.aspx
            </remarks>
        </member>
        <member name="T:Hyland.Unity.Utility">
            <summary>Provides utility functions.</summary>
        </member>
        <member name="M:Hyland.Unity.Utility.CreateDocumentQueryFromRetrievalControlXml(Hyland.Unity.Application,System.String)">
            <summary>Returns a DocumentQuery generated from an XML string.</summary>
            <param name="app">Unity Application object.</param>
            <param name="xmlString">XML string generated from the OBXRetrieval Control.</param>
            <returns>Unity API compatible DocumentQuery object.</returns>
            <remarks>This method should return NULL if the DocumentQuery cannot be created.</remarks>
        </member>
        <member name="M:Hyland.Unity.Utility.CreateUpopFile(System.Int64)">
            <summary>Creates a Upop file and return</summary>
            <param name="documentID">The document ID to be used.</param>
            <returns>
                The <see cref="T:Hyland.Unity.PageData" /> that contains the Upop bytes as stream and the extension to
                use.
            </returns>
        </member>
        <member name="M:Hyland.Unity.Utility.GetDocumentSelectControlXml(Hyland.Unity.DocumentQuery)">
            <summary>
                Returns an XML representation of the DocumentQuery which can be used to initialize the
                AltDocumentSelect ActiveX Control.
            </summary>
            <param name="documentQuery">The DocumentQuery to convert to XML.</param>
            <returns>
                XML representing the DocumentQuery which can be used to initialize the AltDocumentSelect
                ActiveX Control.
            </returns>
            <remarks>
                This method will throw an exception if the DocumentQuery uses any features that are not
                supported by the AltDocumentSelect ActiveX Control.
            </remarks>
        </member>
        <member name="M:Hyland.Unity.Utility.WriteStreamToFile(System.IO.Stream,System.String)">
            <summary>Writes the stream content to the specified file and closes the stream.</summary>
            <param name="stream">The stream. This code will dispose the stream.</param>
            <param name="filepath">The file path.</param>
        </member>
        <member name="M:Hyland.Unity.Utility.IsFlagSet``1(System.Int64,``0)">
            <summary>
                Returns true if the flag is set on the specified bit field. Currently only works with
                32-bit bitfields.
            </summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Utility.IsFlagSet``1(System.UInt64,``0)">
            <summary>
                Returns true if the flag is set on the specified bit field. Currently only works with
                32-bit bitfields.
            </summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Utility.IsFlagSet``1(``0,``0)">
            <summary>
                Returns true if the flag is set on the specified bit field. Currently only works with
                32-bit bitfields.
            </summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Utility.SetFlag``1(``0,``0,System.Boolean)">
            <summary>Sets a bit-field to either on or off for the specified flag.</summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to change</param>
            <param name="on">bool</param>
            <returns>The flagged variable with the flag changed</returns>
        </member>
        <member name="M:Hyland.Unity.Utility.IsFlagSet(System.UInt64,System.UInt64)">
            <summary>
                Returns true if the flag is set on the specified bit field. Currently only works with
                32-bit bitfields.
            </summary>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Utility.IsFlagSet(System.Int64,System.Int64)">
            <summary>
                Returns true if the flag is set on the specified bit field. Currently only works with
                32-bit bitfields.
            </summary>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to test</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Unity.Utility.SetFlag``1(System.Int64,``0,System.Boolean)">
            <summary>Sets a bit-field to either on or off for the specified flag.</summary>
            <typeparam name="T">Enumeration with Flags attribute</typeparam>
            <param name="bitField">Flagged variable</param>
            <param name="flag">Flag to change</param>
            <param name="on">bool</param>
            <returns>The flagged variable with the flag changed</returns>
        </member>
        <member name="M:Hyland.Types.ArchivalToken.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.AuthenticationToken.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.CompressedResults.#ctor(System.Int64,System.Int64)">
            <summary>
            Provides a base for creating Compressed Result bypassing the use of Elements and ElementLists
            </summary>
        </member>
        <member name="T:Hyland.Types.Element">
            <summary>
            The Element class represents an object by encapsulating its properties in a named property bag
            </summary>
        </member>
        <member name="F:Hyland.Types.Element._properties">
            <summary>
            A Hashtable that contains the properties of the element
            </summary>
        </member>
        <member name="M:Hyland.Types.Element.#ctor">
            <summary>
            Constructs an Element
            </summary>
        </member>
        <member name="M:Hyland.Types.Element.#ctor(System.String)">
            <summary>
            Constructs an Element
            </summary>
            <param name="name">The name of the element</param>
        </member>
        <member name="M:Hyland.Types.Element.#ctor(System.String,Hyland.Types.PropertyBag)">
            <summary>
            Constructs an Element
            </summary>
            <param name="name">The name of the element</param>
            <param name="properties">The properties to assign to the element</param>
        </member>
        <member name="M:Hyland.Types.Element.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="P:Hyland.Types.Element.Name">
            <summary>
            Gets or sets an attribute that specifies the name of the element
            </summary>
        </member>
        <member name="P:Hyland.Types.Element.Properties">
            <summary>
            Gets an attribute that specifies the properties of the element
            </summary>
        </member>
        <member name="P:Hyland.Types.Element.Item(System.String)">
            <summary>
            		/// Gets or sets a property on the element that has the specified name
            </summary>
        </member>
        <member name="M:Hyland.Types.Element.ContainsProperty(System.String)">
            <summary>
            Checks whether a property with the specified name exists on the element
            </summary>
            <param name="name">The name of the property to check for</param>
            <returns>True, if the property is present; false otherwise</returns>
        </member>
        <member name="M:Hyland.Types.Element.SetProperty(System.String,System.Object)">
            <summary>
            Sets a property on the element
            </summary>
            <param name="name">The name of the property to set</param>
            <param name="property">The value of the property</param>
            <remarks>If a property with the specified name already exists, it is replaced with the value specified by the property parameter</remarks>
            <returns>True if name represents a new property; false if an existing property was replaced</returns>
        </member>
        <member name="M:Hyland.Types.Element.GetProperty(System.String)">
            <summary>
            Gets a property from the element
            </summary>
            <param name="name">The name of the property to retrieve</param>
            <returns>The value of the property, if present; null otherwise.</returns>
        </member>
        <member name="P:Hyland.Types.EncryptedServiceObject.EncryptContents">
            <summary>
            For FIPS compliance, we are no longer allowing RC4 encrypted service objects
            this value will always set to False, and always return False from here on out.
            </summary>
        </member>
        <member name="M:Hyland.Types.EncryptedServiceObject.readXmlLoop(System.Xml.XmlReader,Hyland.Types.SerializationContext)">
            <summary>
            This method gives feedback on whether if decrypted something
            </summary>
            <param name="reader"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Hyland.Types.Guard.ValidatedNotNullAttribute">
            <summary>
            This attribute addresses CA1062.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.Serialize(Hyland.Types.RequestList,System.IO.Stream)">
            <summary>
            Serialize a request list, placing the result into the provided stream.
            </summary>
            <param name="list">The request list to serialize.</param>
            <param name="stream">The stream to be populated.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.Serialize(Hyland.Types.ResponseList,System.IO.Stream)">
            <summary>
            Serialize a response list, placing the result into the provided stream.
            </summary>
            <param name="list">The response list to serialize.</param>
            <param name="stream">The stream to be populated.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteCode(Hyland.Types.HSISerializerV2.ControlCodeIndex)">
            <summary>
            Writes the specified control code to the serializer stream.
            Sets the high bit of the code so that we can signal that this is a new command.
            </summary>
            <param name="code">The code you wish to write.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteValue(System.String)">
            <summary>
            Writes a value to the serializer stream as a series of bytes.
            </summary>
            <param name="value">The string representation of the value to write.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteValue(System.Byte[])">
            <summary>
            Writes a value to the serializer stream as a series of bytes.
            </summary>
            <param name="bytes">The byte array to serialize.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteRequestList(Hyland.Types.RequestList)">
            <summary>
            Writes a RequestList (using appropriate command codes) to the serializer stream.
            </summary>
            <param name="list">The RequestList you are writing.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteResponseList(Hyland.Types.ResponseList)">
            <summary>
            Writes a ResponseList (using appropriate command codes) to the serializer stream.
            </summary>
            <param name="list">The ResponseList you are writing.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteRequest(Hyland.Types.Request)">
            <summary>
            Writes a Request (using appropriate command codes) to the serializer stream.
            </summary>
            <param name="r">The request.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteResponse(Hyland.Types.Response)">
            <summary>
            Writes a Response (using appropriate command codes) to the serializer stream.
            </summary>
            <param name="r">The response.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteLanguageCodes(Hyland.Types.RequestList)">
            <summary>
            Writes language codes associated with a RequestList to the serializer stream.
            </summary>
            <param name="list">The RequestList.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteAuthenticationToken(Hyland.Public.IAuthenticationToken)">
            <summary>
            Writes the authentication token for a given Request to the serializer stream.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteParameterList(Hyland.Public.IParameterList)">
            <summary>
            Writes the ParameterList associated with a Request or Response to the serializer stream.
            </summary>
            <param name="list">The ParameterList.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteParameter(Hyland.Types.Parameter)">
            <summary>
            Writes a Parameter to the serializer stream.  Accounts for if Parameters contain an Element or ElementList.
            </summary>
            <param name="p">The Parameter.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteError(Hyland.Types.ServiceError)">
            <summary>
            Writes a ServiceError to the serializer stream.
            </summary>
            <param name="error">The ServiceError.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteElementList(Hyland.Public.IElementList)">
            <summary>
            Writes an ElementList to the serializer stream.
            </summary>
            <param name="list">The ElementList.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteElement(Hyland.Public.IElement)">
            <summary>
            Writes an Element to the serializer stream.
            </summary>
            <param name="e">The Element.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WritePropertyBag(Hyland.Public.IPropertyBag)">
            <summary>
            Writes a PropertyBag to the serializer stream.
            </summary>
            <param name="pb">The PropertyBag.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.WriteProperty(System.Object)">
            <summary>
            Writes a Property to the serializer stream, including Element/ElementList, if needed.
            </summary>
            <param name="p">The Property.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.DeserializeRequestList(System.IO.Stream)">
            <summary>
            Deserialize a stream back into a RequestList object.
            </summary>
            <param name="stream">The stream to deserialize.</param>
            <returns>A reassembled RequestList.</returns>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.DeserializeResponseList(System.IO.Stream)">
            <summary>
            Deserialize a stream back into a ResponseList object.
            </summary>
            <param name="stream">The stream to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ReadCommand">
            <summary>
            Reads one command code byte from the serialized stream.  
            </summary>
            <returns>The command code byte.</returns>
        </member>
        <member name="F:Hyland.Types.HSISerializerV2.bytesToIntegerize">
            <summary>
            Reads a value from the serialized stream.
            </summary>
            <returns>A string representation of the value.</returns>
            
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartParameterCommandProcessor">
            <summary>
            Initiates the processing of a new Parameter by placing it on our DeserializationContext stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndParameterCommandProcessor">
            <summary>
            Concludes procsesing of a Parameter by adding it to our Request or Response object.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StreamedParameterValueCommandProcessor">
            <summary>
            Reads a streamed parameter value out from the serialized stream.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.LanguageCodesCommandProcessor">
            <summary>
            Reads language codes out from our serialized stream and places them on the RequestList.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ParameterNameCommandProcessor">
            <summary>
            Reads a Parameter name value from the serialized stream and places it on our current Parameter.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ParameterValueCommandProcessor">
            <summary>
            Reads a Parameter value value from the serialized stream and places it on our current Parameter.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartRequestListCommandProcessor">
            <summary>
            Initiates the processing of a RequestList by placing a new RequestList on our DeserializationContext stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndRequestListCommandProcessor">
            <summary>
            Concludes the processing of a RequestList.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartRequestCommandProcessor">
            <summary>
            Initiates the processing of a Request by placing a new RequestList on our DeserializationContext stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndRequestCommandProcessor">
            <summary>
            Concludes the processing of a Request.  Adds it to the current RequestList based off of DeserializationContext.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.RequestServiceProviderCommandProcessor">
            <summary>
            Reads and sets the service provider name for the current Request.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.RequestNameCommandProcessor">
            <summary>
            Reads and sets the name for the current Request.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.RequestGuidCommandProcessor">
            <summary>
            Reads and sets the GUID for the current Request.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.RequestSignatureCommandProcessor">
            <summary>
            Deprecated.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartParameterListCommandProcessor">
            <summary>
            Initiates a new ParameterList for our current Request or Response.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndParameterListCommandProcessor">
            <summary>
            Concludes ParameterList processing for current Request or Response.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartAuthenticationTokenCommandProcessor">
            <summary>
            Initiates the processing for an AuthenticationToken for current Request by placing it on the DeserializationContext stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndAuthenticationTokenCommandProcessor">
            <summary>
            Concludes processing of AuthenticationToken.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartResponseListCommandProcessor">
            <summary>
            Initiates a the processing for a new ResponseList by placing it on the DeserializationContext stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndResponseListCommandProcessor">
            <summary>
            Concludes the processing of current ResponseList.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartResponseCommandProcessor">
            <summary>
            Initiates the processing for a new Response by placing it on the DeserializationContext stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndResponseCommandProcessor">
            <summary>
            Concludes the processing of a Response.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ResponseGuidCommandProcessor">
            <summary>
            Reads the GUID from the serialized stream for Response processing.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartErrorCommandProcessor">
            <summary>
            Initiates the processing of a new ServiceError by placing it on the DeserializationContext stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndErrorCommandProcessor">
            <summary>
            Concludes the processing of a ServiceError.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ErrorMessageCommandProcessor">
            <summary>
            Reads and sets the ServiceError message onto current ServiceError.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ErrorCodeCommandProcessor">
            <summary>
            Reads and sets the ServiceError error code onto current ServiceError.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ErrorSourceCommandProcessor">
            <summary>
            Reads and sets the ServiceError source onto current ServiceError.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ErrorStackTraceCommandProcessor">
            <summary>
            Reads and sets the ServiceError stack trace onto current ServiceError.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ErrorMethodCommandProcessor">
            <summary>
            Reads and sets the ServiceError method onto current ServiceError.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartElementListCommandProcessor">
            <summary>
            Initiates the processing of an ElementList for deserialization.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndElementListCommandProcessor">
            <summary>
            Concludes the processing of an ElementList for deserialization.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartElementCommandProcessor">
            <summary>
            Initiates the processing of a new Element by placing it in the DeserializationContext stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndElementCommandProcessor">
            <summary>
            Concludes the processing of an Element for deserialization.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartPropertyBagCommandProcessor">
            <summary>
            Initiates the processing of a PropertyBag by placing it onto our DeserializationContext Stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndPropertyBagCommandProcessor">
            <summary>
            Concludes the processing of a PropertyBag.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.StartPropertyCommandProcessor">
            <summary>
            Initiates the processing of a Property by placing it onto our DeserializationContext Stack.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.EndPropertyCommandProcessor">
            <summary>
            Concludes the processing of a Property.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.PropertyNameCommandProcessor">
            <summary>
            Reads and sets the current Property name.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.PropertyValueCommandProcessor">
            <summary>
            Reads and sets the current Property value.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.ElementNameCommandProcessor">
            <summary>
            Reads and sets the current Element Name.
            </summary>
        </member>
        <member name="T:Hyland.Types.HSISerializerV2.TempServiceError">
            <summary>
            TempServiceError is used to contain the key portions of a ServiceError so that we can easily serialize/deserialize it.
            </summary>
        </member>
        <member name="P:Hyland.Types.HSISerializerV2.TempServiceError.Message">
            <summary>
            The TempServiceError version of the ServiceError message.
            </summary>
        </member>
        <member name="P:Hyland.Types.HSISerializerV2.TempServiceError.Code">
            <summary>
            The TempServiceError version of the ServiceError code.
            </summary>
        </member>
        <member name="P:Hyland.Types.HSISerializerV2.TempServiceError.Source">
            <summary>
            The TempServiceError version of the ServiceError source.
            </summary>
        </member>
        <member name="P:Hyland.Types.HSISerializerV2.TempServiceError.StackTrace">
            <summary>
            The TempServiceError version of the ServiceError StackTrace.
            </summary>
        </member>
        <member name="P:Hyland.Types.HSISerializerV2.TempServiceError.Method">
            <summary>
            The TempServiceError version of the ServiceError method.
            </summary>
        </member>
        <member name="T:Hyland.Types.HSISerializerV2.TempPropBagProp">
            <summary>
            TempPropBagProp is used to contain the key portions of a PropertyBag's properties so that we can easily serialize/deserialize them.
            </summary>
        </member>
        <member name="T:Hyland.Types.HSISerializerV2.DeserializationContext">
            <summary>
            DeserializationContext is a class used during deserialization to maintain the current context that
            is cared about during deserialization.  As things are processed and moved around, it is used to keep track of the 
            currently required information for Parameters, Properties, Elements, ElementLists, and PropertyBags.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.DeserializationContext.#ctor">
            <summary>
            Constructor.  Sets all internal stacks to an initial size of 15.
            </summary>
        </member>
        <member name="P:Hyland.Types.HSISerializerV2.DeserializationContext.RequestList">
            <summary>
            The RequestList that we are deserializing.
            </summary>
        </member>
        <member name="P:Hyland.Types.HSISerializerV2.DeserializationContext.ResponseList">
            <summary>
            The ResponseList that we are deserializing.
            </summary>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.DeserializationContext.GetCurrent">
            <summary>
            Peeks at the current item on the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.DeserializationContext.Push(System.Object)">
            <summary>
            Pushes a new item onto the stack.
            </summary>
            <param name="o">The object to place on the stack.</param>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.DeserializationContext.Pop">
            <summary>
            Returns the current item and removes it from the stack.
            </summary>
            <returns>Current item.</returns>
        </member>
        <member name="M:Hyland.Types.HSISerializerV2.DeserializationContext.ClearStacks">
            <summary>
            Clears all contexts out, and resets all internal stacks.
            </summary>
        </member>
        <member name="T:Hyland.Types.IHandleOwnFileTransfer">
            <summary>
            Represents means for a <see cref="T:Hyland.Types.IServiceClientInternal"/> to handle its own file transfer operations.
            </summary>
        </member>
        <member name="M:Hyland.Types.IHandleOwnFileTransfer.Download(System.Guid)">
            <summary>
            Downloads a file.
            </summary>
            <param name="id">The identifier of the file to download.</param>
            <returns>A <see cref="T:System.IO.Stream"/> containing the bytes of the file.</returns>
        </member>
        <member name="M:Hyland.Types.IHandleOwnFileTransfer.Upload(System.Guid,System.IO.Stream)">
            <summary>
            Uploads a file.
            </summary>
            <param name="id">The identifier of the file to upload.</param>
            <param name="data">A <see cref="T:System.IO.Stream"/> containing the bytes of the file.</param>
        </member>
        <member name="P:Hyland.Types.IIndexedByCategory.Item(System.String)">
            <summary>
            		/// Gets or sets a property on the element that has the specified name
            </summary>
        </member>
        <member name="M:Hyland.Types.IServiceClientInternal.Execute(Hyland.Types.RequestList,System.Action{Hyland.Types.ExecutePerformanceProfileArgs})">
            <summary>
            Execute a collection of requests.
            </summary>
            <param name="requestList">The list of requests to execute.</param>
            <param name="action">An optional callback to log performance information.</param>
            <returns>The list of request responses.</returns>
        </member>
        <member name="P:Hyland.Types.IServiceClientInternal.IsAlwaysConnected">
            <summary>
            Indicates if the service client is local which means it is always connected to the service pipeline.
            As a result, it does not need to ping the server or monitor network connectivity.
            </summary>
        </member>
        <member name="P:Hyland.Types.IServiceClientInternal.OB_Token">
            <summary>
            OBToken for anti forgery.
            </summary>
        </member>
        <member name="T:Hyland.Types.Lzf.LZF">
            <summary>
            Improved C# LZF Compressor, a very small data compression library. The compression algorithm is extremely fast. 
            </summary>
        </member>
        <member name="F:Hyland.Types.Lzf.LZF.HashTable">
            <summary>
            Hashtable, thac can be allocated only once
            </summary>
        </member>
        <member name="M:Hyland.Types.Lzf.LZF.Compress(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Compresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to compress</param>
            <param name="inputLength">Lenght of the data to compress</param>
            <param name="output">Reference to a buffer which will contain the compressed data</param>
            <param name="outputLength">Lenght of the compression buffer (should be bigger than the input buffer)</param>
            <returns>The size of the compressed archive in the output buffer</returns>
        </member>
        <member name="M:Hyland.Types.Lzf.LZF.Decompress(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decompresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to decompress</param>
            <param name="inputLength">Lenght of the data to decompress</param>
            <param name="output">Reference to a buffer which will contain the decompressed data</param>
            <param name="outputLength">The size of the decompressed archive in the output buffer</param>
            <returns>Returns decompressed size</returns>
        </member>
        <member name="F:Hyland.Types.OptimizedSoapServiceClient.ServicePage">
            <summary>
            Main pipeline page 
            </summary>
        </member>
        <member name="F:Hyland.Types.OptimizedSoapServiceClient.AuthServicePage">
            <summary>
            Utilized for Auth requests
            </summary>
        </member>
        <member name="P:Hyland.Types.OptimizedSoapServiceClient.OverrideClientVersion">
            <summary>
            Internal use only. Allows the consumer to explicitly override what type of serialization the pipeline will utilize.
            </summary>
        </member>
        <member name="M:Hyland.Types.Parameter.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.ParameterizedObject.RemoveParameter(System.String)">
            <summary>
            Removes parameter by name from parameter list.
            Also removes it from Hashtable
            </summary>
            <param name="name">Parameter to be removed.</param>
            <returns>True if removed, false if not found.</returns>
        </member>
        <member name="M:Hyland.Types.ParameterList.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.PropertyBag.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.QueryRecord.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.QueryToken.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.Request.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.Request.SetSig(System.String)">
            <summary>
            Internal so no one but Hyland.Types or it's friend assemblies can call this; set's the signature on the Request.
            </summary>
            <param name="signature"></param>
        </member>
        <member name="M:Hyland.Types.RequestList.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.Response.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.ResponseList.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="T:Hyland.Types.RowElement">
            <summary>
            The Element class represents an object by encapsulating its properties in a named property bag
            </summary>
        </member>
        <member name="F:Hyland.Types.RowElement._parentTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hyland.Types.RowElement.#ctor(Hyland.Types.ElementTable,System.Object[],System.String)">
            <summary>
            Constructs a RowElement
            </summary>
            <param name="parent">The ElementTable that owns this row</param>
            <param name="values">An array of values, one per column</param>
            <param name="name">The name of the element</param>
        </member>
        <member name="M:Hyland.Types.RowElement.#ctor">
            <summary>
            Constructs a RowElement
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.V1URLEncode">
            <summary>
            V1 Validation and Url Encoding
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.V1Compression">
            <summary>
            V1 Validation and Compression
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.V1URLEncodeCompression">
            <summary>
            V1 Validation, Url Encoding and Compression
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.CV1V1URLEncode">
            <summary>
            Client Version 1, V1 Validation and Url Encoding
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.CV1V1Compression">
            <summary>
            Client Version 1, V1 Validation and Compression
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.CV1V1URLEncodeCompression">
            <summary>
            Client Version 1, V1 Validation, Url Encoding and Compression
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.CV2V1URLEncode">
            <summary>
            Client Version 2, V1 Validation and Url Encoding
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.CV2V1Compression">
            <summary>
            Client Version 2, V1 Validation and Compression
            </summary>
        </member>
        <member name="F:Hyland.Types.SerializationFlags.CV2V1URLEncodeCompression">
            <summary>
            Client Version 2, V1 Validation, Url Encoding and Compression
            </summary>
        </member>
        <member name="T:Hyland.Types.ServiceClient">
            <summary>
            This is convience class for client operations for Hyland Applications
            Use this when dealing with Hyland.Services as a client
            </summary>
        </member>
        <member name="M:Hyland.Types.ServiceClient.Execute(Hyland.Public.IRequest)">
            <summary>
            Puts a executes a single request and returns the single response, pre-validated.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Types.ServiceClient.GetCollection(System.String)">
            <summary>
            Shortcut for doing a colllection request, puts AuthToken in automagically
            </summary>
            <param name="collectionType"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Types.ServiceClient.GetCollection(System.String,System.String,System.Int32)">
            <summary>
            Shortcut for doing a colllection request, puts AuthToken in automagically
            </summary>
            <param name="collectionType"></param>
            <param name="contextType"></param>
            <param name="contextId"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Types.ServiceError.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="T:Hyland.Types.ServiceProfile">
            <summary>Performance information for a service request.</summary>
            <remarks>This is intended to be as light weight as possible so that it can be included in HTTP headers.</remarks>
        </member>
        <member name="T:Hyland.Types.ServiceProfileCollection">
            <summary>A simple, serializable collection of ServiceProfiles.</summary>
        </member>
        <member name="M:Hyland.Types.ServiceProfileCollection.Serialize">
            <summary>Serializes in a terse format, using duration ticks for each profile.</summary>
            <remarks>Format is "duration1;duration2"</remarks>
        </member>
        <member name="M:Hyland.Types.ServiceProfileCollection.Deserialize(System.String)">
            <summary>Deserializes from format "duration1;duration2".</summary>
        </member>
        <member name="P:Hyland.Types.SoapServiceClient.ExceuteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:Hyland.Types.ExecutePerformanceProfileArgs.ServiceProfileCollection">
            <summary>Performance data on each individual request, returned by the application server.  The sequence matches the sequence of requests.</summary>
            <remarks>The server will not provide this information unless its service-profile is enabled in web.config</remarks>
        </member>
        <member name="T:Hyland.Types.SoapServiceClientCache">
            <summary>
            Supports load balancing for SoapServiceClients
            </summary>
        </member>
        <member name="T:Hyland.Types.SoapServiceClientCache.SoapServiceClientContainer">
            <summary>Facilitates cookie sharing across SoapServiceClients.  Intended for the same URL only.</summary>
        </member>
        <member name="P:Hyland.Types.FileTransferStream.CanSeek">
            <summary>
            FileTransferStream Can't Seek, Even though we implement Seek.
            It is a very special Seek case, so please review your need for 
            Seeking, and how it works here before using Seek on FTS.
            </summary>
        </member>
        <member name="P:Hyland.Types.FileTransferStream.CanWrite">
            <summary>
            Whether or not the stream can write.
            </summary>
        </member>
        <member name="P:Hyland.Types.FileTransferStream.CanTimeout">
            <summary>
            Whether or not the stream can time out.
            </summary>
        </member>
        <member name="P:Hyland.Types.FileTransferStream.ReadWriteTimeout">
            <summary>
            The timeout setting of the stream in milliseconds.
            </summary>
        </member>
        <member name="P:Hyland.Types.FileTransferStream.Length">
            <summary>
            The length of the stream.
            </summary>
        </member>
        <member name="P:Hyland.Types.FileTransferStream.Position">
            <summary>
            Return current position. 
            </summary>
        </member>
        <member name="M:Hyland.Types.FileTransferStream.#ctor(Hyland.Public.IServiceClient,System.String,System.String)">
            <summary>
            Creates a new FileTransferStream object
            </summary>
            <param name="client">IServiceClient object that is in use</param>
            <param name="appServerUrl">The URL of the Application Server</param>
            <param name="id">ID of the Stream that is being accessed</param>
        </member>
        <member name="F:Hyland.Types.FileTransferStream._isAborted">
            <summary>
            Flag to indicate the request was aborted.
            </summary>
        </member>
        <member name="F:Hyland.Types.FileTransferStream._lockObject">
            <summary>
            Lock object to protect the _isAborted flag during operations.
            </summary>
        </member>
        <member name="M:Hyland.Types.FileTransferStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the stream on the server, and reinitializes it on the client.
            Only supported on Download operations.  This will initialize the stream
            for Downloading.
            WARNING: This seek operation is not normal, because of the network usage to actually seek the stream.
            Please be aware of this when you try to seek using it.  CanSeek will still 
            return false for FTS, and Position's setter will not allow you to set it.
            This is because we want to avoid Position setting causing network traffic.
            </summary>
            <param name="offset">Where to seek to.</param>
            <param name="origin">The origin of the seek operation.</param>
            <returns>New position in the stream.</returns>
        </member>
        <member name="M:Hyland.Types.FileTransferStream.createNewUploadRequest(System.Int64,System.Boolean)">
            <summary>
            This is used to close out the current request tied to FTS and creates a brand new one.
            It's used to reset ourself whenever we write too many bytes for one single request
            to our server.</summary>
        </member>
        <member name="M:Hyland.Types.FileTransferStream.EndRequestForRemoval(System.IAsyncResult)">
            <summary>
            Asynchronously handle requests for removal from the server.
            </summary>
            <param name="result">ASyncResult parameter.</param>
        </member>
        <member name="T:Hyland.Types.PatientBinaryReader">
            <summary>
            A BinaryReader that will check to see if it read the expected amount of bytes,
            and continue reading until the expected amount of bytes have been read.
            
            A timeout feature is implemented to prevent this from looping indefinitely.
            </summary>
            <remarks>
            When a normal BinaryReader is asked to read a certain number of bytes, it reads
            from the underlying stream up to that number, but may not reach that number (for
            example, if the network stream has not finished transport).
            <para>It is up to the consumer to not ask for additional bytes once end of stream is reached.</para>
            </remarks>
        </member>
        <member name="M:Hyland.Types.PatientBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of PatientBinaryReader with the supplied stream and using the System.Text.UTF8Encoding. 
            </summary>
            <remarks>The supplied stream will be closed when this class is disposed.</remarks>
            <param name="baseStream">The stream to read.</param>
        </member>
        <member name="M:Hyland.Types.PatientBinaryReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of PatientBinaryReader with the supplied stream, using the System.Text.UTF8Encoding and optionally leaves the provided stream open.
            </summary>
            <param name="baseStream">The stream to read.</param>
            <param name="leaveOpen">True to leave the stream open after the PatientBinaryReader is disposed, otherwise false.</param>
        </member>
        <member name="M:Hyland.Types.StreamedFile.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="M:Hyland.Types.StreamedFileList.Copy(System.Object)">
            <summary>
            Copy the incoming object into this.
            Technically it's not a constructor, but it's mimicking a copy constructor's actions.
            Inherited from ServiceObject.
            </summary>
            <param name="o">Incoming object</param>
        </member>
        <member name="T:Hyland.Types.ITimeSource">
            <summary>
            This interface provides an abstraction to different methods of finding the current time.
            </summary>
        </member>
        <member name="P:Hyland.Types.ITimeSource.UtcNow">
            <summary>
            Provide the current time in UTC format.
            </summary>
        </member>
        <member name="T:Hyland.Types.DefaultTimeSource">
            <summary>
            This is the default implementation of ITimeSource that uses <code>DateTime.UtcNow</code> from the 
            local machine to provide the current time.
            </summary>
        </member>
        <member name="P:Hyland.Types.DefaultTimeSource.UtcNow">
            <summary>
            Provide the current time using <code>DateTime.UtcNow</code>.
            </summary>
        </member>
        <member name="T:Hyland.Types.SynchronizedTimeSource">
            <summary>
            This class provides a reasonable approximation to the current time as known by the application server.
            </summary>
        </member>
        <member name="F:Hyland.Types.SynchronizedTimeSource.MaxTimeSinceLastSync">
            <summary>
            The maximum amount of time that may pass before the time should be synchronized.
            </summary>
        </member>
        <member name="F:Hyland.Types.SynchronizedTimeSource._lastSyncUTC">
            <summary>
            The time when the last synchronization occurred.
            </summary>
        </member>
        <member name="F:Hyland.Types.SynchronizedTimeSource._offset">
            <summary>
            The time offset between the client and the server.
            </summary>
        </member>
        <member name="F:Hyland.Types.SynchronizedTimeSource._serviceClient">
            <summary>
            The <code>ServiceClient</code> used to request the server time.
            </summary>
        </member>
        <member name="F:Hyland.Types.SynchronizedTimeSource._lock">
            <summary>
            Used to lock access to the state data.
            </summary>
        </member>
        <member name="M:Hyland.Types.SynchronizedTimeSource.#ctor(Hyland.Public.IServiceClient)">
            <summary>
            
            </summary>
            <param name="client">The <code>SerivceClient</code> used to request the time from the server.</param>
        </member>
        <member name="P:Hyland.Types.SynchronizedTimeSource.UtcNow">
            <summary>
            Provide a reasonable approximation to the current time on the application server.
            </summary>
        </member>
        <member name="M:Hyland.Types.SynchronizedTimeSource.SynchronizeTime">
            <summary>
            This method request the current time from the application server and then computes the offset
            between the client and the application server.
            </summary>
        </member>
        <member name="M:Hyland.Types.SynchronizedTimeSource.validateTimeResponse(Hyland.Public.IResponse)">
            <summary>
            Parse the GetTime service response and perform any necessary validation.
            </summary>
            <param name="response">The response to the GetTime service request.</param>
            <returns>The reconstructed <code>DateTime</code> object from the server.</returns>
        </member>
        <member name="M:Hyland.Types.SynchronizedTimeSource.GetAppServerUtcNow">
            <summary>
            Retrieve the current time from the AppServer
            </summary>
        </member>
        <member name="T:Hyland.Core.ServiceHandlers.Enumerations.UtilityDisplayControl">
            <summary>
            Enumeration of the different Utility Controls the GVC will use
            to render documents.
            </summary>
        </member>
        <member name="T:Hyland.Core.ServiceHandlers.Enumerations.Contexts">
            <summary>
            Defines the module where the control is being displayed. These values will
            effect some privileges and rights.
            </summary>
        </member>
        <member name="T:Hyland.Core.ServiceHandlers.Enumerations.MenuOption">
            <summary>
            Represents the main menu and control bar options for the web client.
            </summary>
        </member>
        <member name="T:Hyland.Core.ServiceHandlers.Enumerations.DocumentAttribute">
            <summary>
            These are the possible attributes we may query the service layer for.
            We can pick and choose which attributes we want to query and only get those back.
            Use the bitwise OR '|=' to build onto a DocumentAttribute enum which you can 
            send to the DocumentAttribute service class to obtain information from.
            </summary>
        </member>
        <member name="T:Hyland.Core.ServiceHandlers.Enumerations.CustomQueryResultStatus">
            <summary>
            Represents the different results after attempting to execute a custom query.
            </summary>
        </member>
        <member name="T:Hyland.Core.ServiceHandlers.Enumerations.DocumentTypeListMode">
            <summary>
            Represents the modes in which DocumentTypeList is used.
            </summary>
        </member>
        <member name="T:Hyland.Core.ServiceHandlers.Enumerations.OverlayRadioSetting">
            <summary>
            Used to tell how to display the Print Overlay radio in the Print Dialog
            </summary>
        </member>
        <member name="T:Hyland.Core.ServiceHandlers.Enumerations.CLIENT_PRIVILEGES">
            <summary>
             KPC - Kept here only as a means to keep the C++ Core's idea
             of where a license is within our licensing storage structure
             compared to how we now store licenses within the Net-Core. More than likely
             the only client that needs this will be the Desktop and we can look into
             removing this once we rewrite the Desktop logic.
             </summary>
        </member>
        <member name="T:Hyland.Core.MaskedStringFormatter">
            <summary>
            The MaskedStringFormatter class aids in using mask characters with strings
            </summary>
        </member>
        <member name="M:Hyland.Core.MaskedStringFormatter.GetMaskedValue(System.String)">
            <summary>
            Gets the masked version of an unmasked string
            </summary>
            <param name="str">The string to mask</param>
            <returns>A masked version of the string</returns>
        </member>
        <member name="M:Hyland.Core.MaskedStringFormatter.GetUnmaskedValue(System.String)">
            <summary>
            Gets the unmasked version of a masked string
            </summary>
            <param name="str">The masked string to extract characters from</param>
            <returns>The unmasked version of the string</returns>
        </member>
        <member name="M:Hyland.Core.MaskedStringFormatter.ValidateString(System.String)">
            <summary>
            Validates a string against the mask
            </summary>
            <param name="str">The masked string to be validated</param>
            <returns>If the string is valid, the method returns true; otherwise, it returns false</returns>
        </member>
        <member name="M:Hyland.Core.MaskedStringFormatter.ValidateString(System.String,System.Boolean)">
            <summary>
            Validates a string against the mask
            </summary>
            <param name="str">The string to be validated</param>
            <param name="masked">Specifies whether the string contains the mask characters</param>
            <returns>If the string is valid, the method returns true; otherwise, it returns false</returns>
        </member>
        <member name="M:Hyland.Core.MaskedStringFormatter.validateCharacter(System.Char,System.Int32)">
            <summary>
            Determines whether a particular character is valid at the specified index
            </summary>
            <param name="ch">The character to test</param>
            <param name="index">The index to test</param>
            <returns>If the character is valid at the specified index, the method returns true; otherwise, it returns false</returns>
        </member>
        <member name="T:Hyland.PostData">
            <summary>
            This specialized class stores and handles data submitted from E-Forms or other HTML documents.
            Parse submitted data right after capturing it from the browser into an instance of this class and
            then pass it around to the various APIs. Do not pass the data around as a URL encoded string, 
            a Stream, byte[], Dictionary, List etc. All of these have the potential of misinterpreting the data
            by using a different encoding than the one the data is in.
            </summary>
            <tocexclude />
        </member>
        <member name="F:Hyland.PostData._queryStringRegex">
            <summary>
            This regular expression is used to parse the post data string.
            </summary>
        </member>
        <member name="F:Hyland.PostData._checkBoxRegularExpression">
            <summary>
            This regular expression is used to find all the checkbox elements  within the html of 
            a form.
            </summary>
        </member>
        <member name="F:Hyland.PostData._nameRegularExpression">
            <summary>
            This regular expression is used to match the Name Elements of a check box.
            </summary>
        </member>
        <member name="M:Hyland.PostData.#ctor">
            <summary>
            Create a new instance of the PostData class and add fields to it via the <c>Add</c> method.
            </summary>
        </member>
        <member name="M:Hyland.PostData.FromNameValueCollection(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Create a PostData instance from a <c>HttpRequest.Form</c>. 
            Do not use in other circumstances (don't manully create a NameValueCollection and pass it in).
            </summary>
            <param name="nvc">A NameValueCollection representing the HttpRequest.Form data.</param>
            <returns>A PostData instance.</returns>
        </member>
        <member name="M:Hyland.PostData.FromUTF8String(System.String,System.Boolean)">
            <summary>
            Parse a post data string received from the browser. By convention, the application server 
            and its consumers render E-Forms as UTF-8. This means the submitted data from those forms will 
            be URL encoded by the browser using UTF-8 for non-ASCII characters.
            </summary>
            <param name="postDataString">The post data string as sent from the browser. 
            The post data should be URL encoded with characters outside the ASCII character set converted to 
            bytes using the UTF-8 encoding and represented as <c>%HexHex.</c></param>
            <param name="treatEncodingErrorsAsStraightText">This parameter is obsolete and no longer utilized.</param>
            <returns>A PostData instance.</returns>
        </member>
        <member name="M:Hyland.PostData.FromDiskgroupString(System.String,System.Boolean)">
            <summary>
            Parse a post data string from a diskgroup file or from the Thick Client. 
            By convention, OnBase stores data submitted from E-Forms in the diskgroups as a string that 
            is URL encoded using the local character set (Encoding.Default) for non-ASCII characters.
            The Thick Client also works with Encoding.Default when displaying the form to the user and 
            capturing submitted data. If the E-Form was rendered through the application server - by the 
            Web Client or Unity Client, for example - the post data will be URL encoded using UTF-8. 
            Do not use this method to parse such data. Use <see cref="M:Hyland.PostData.FromUTF8String(System.String,System.Boolean)"/> instead.
            </summary>
            <param name="postDataString">The post data string as sent from the browser. 
            The post data should be URL encoded with characters outside the ASCII character set converted to 
            bytes using the Encoding.Default encoding and represented as <c>%HexHex.</c></param>
            <param name="treatEncodingErrorsAsStraightText">This parameter is obsolete and no longer utilized.</param>
            <returns>A PostData instance.</returns>
        </member>
        <member name="M:Hyland.PostData.FromDiskgroupStream(System.IO.Stream,System.Boolean)">
            <summary>
            Parse a post data string from a diskgroup file. 
            By convention, OnBase stores data submitted from E-Forms in the diskgroups as a string that 
            is URL encoded using the local character set (Encoding.Default) for non-ASCII characters.
            The Thick Client also works with Encoding.Default when displaying the form to the user and 
            capturing submitted data. If the E-Form was rendered through the application server - by the 
            Web Client or Unity Client, for example - the post data will be URL encoded using UTF-8. 
            Do not use this method to parse such data. Use <see cref="M:Hyland.PostData.FromUTF8String(System.String,System.Boolean)"/> instead.
            </summary>
            <param name="stream">The post data loaded from the diskgroups.
            The post data should be URL encoded with characters outside the ASCII character set converted to 
            bytes using the Encoding.Default encoding and represented as <c>%HexHex.</c></param>
            <param name="treatEncodingErrorsAsStraightText">This parameter is obsolete and no longer utilized.</param>
            <returns>A PostData instance.</returns>
        </member>
        <member name="M:Hyland.PostData.FromStreamWithEncoding(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Parse a post data string from a stream file with the given encoding.
            </summary>
            <param name="stream">The post data loaded from some source.</param>
            <param name="encoding">The encoding used for the data in the stream.</param>
            <param name="treatEncodingErrorsAsStraightText">This parameter is obsolete and no longer utilized.</param>
            <returns>A PostData instance.</returns>
        </member>
        <member name="M:Hyland.PostData.FromElementList(Hyland.Public.IElementList)">
            <summary>
            Restore a PostData instance from an ElementList.
            </summary>
            <param name="elementList">An ElementList representing serialized PostData.</param>
            <returns>A PostData instance</returns>
        </member>
        <member name="M:Hyland.PostData.ToElementList">
            <summary>
            Serialize a PostData object to an ElementList.
            </summary>
            <returns>An ElementList representing the post data.</returns>
        </member>
        <member name="M:Hyland.PostData.CreateDiskgroupPostDataBytes">
            <summary>
            Create a binary representation of the post data that can be stored in the diskgroups.
            The post data is URL encoded with the default encoding (character set) used to convert non-ASCII 
            characters into byte values.
            </summary>
            <returns>The post data as bytes.</returns>
        </member>
        <member name="M:Hyland.PostData.CreateDiskgroupPostDataBytes(System.String)">
            <summary>
            Create a binary representation of the post data that can be stored in the diskgroups.
            The post data is URL encoded with the default encoding (character set) used to convert non-ASCII 
            characters into byte values.
            </summary>
            <param name="html">The html of the E-Form template (used to handle checkboxes).</param>
            <returns>The post data as bytes.</returns>
        </member>
        <member name="M:Hyland.PostData.CreateDisconnectedStoragePostDataBytes(System.String)">
            <summary>
            Create a binary representation of the post data that can be stored in the disconnnected client.
            The data is URL and UTF-8 encoded. DO NOT store this in the diskgroups.
            </summary>
            <param name="html">The html of the E-Form template (used to handle checkboxes).</param>
            <returns>The post data as bytes.</returns>
        </member>
        <member name="M:Hyland.PostData.CreateUTF8String(System.String)">
            <summary>
            Create a string representation of the post data. The data is URL and UTF-8 encoded.
            </summary>
            <param name="html">The html of the E-Form template (used to handle checkboxes).</param>
            <returns>A string representation of the post data.</returns>
        </member>
        <member name="M:Hyland.PostData.createPostDataString(System.String,System.Text.Encoding)">
            <summary>
            Builds up a post data string from a name/value collection of field values and the html form.
            </summary>
            <param name="html">The html of the form whose post data this is.</param>
            <param name="encoding">The encoding to use for converting non-ASCII characters to bytes.</param>
            <returns>string of formatted post data usable to save the form.</returns>
        </member>
        <member name="M:Hyland.PostData.retrieveCheckboxesOfForm(System.String)">
            <summary>
            Builds a string collection of names of the Checkbox elements contained in the HTML form.
            </summary>
            <param name="html">The HTML form.</param>
            <returns>String collection containing checkbox names.</returns>
        </member>
        <member name="M:Hyland.PostData.createEncodedNameValuePair(System.String,System.String,System.Text.Encoding)">
            <summary>
            Takes a Name/Value pair and formats a UrlEncoded string with the format
            '{Name}={Value}%26'
            </summary>
            <param name="name">The name field.</param>
            <param name="value">The Value Field.</param>
            <param name="encoding">The encoding to use for converting non-ASCII characters to bytes.</param>
            <returns>Encoded name value pair string.</returns>
        </member>
        <member name="P:Hyland.PostData.FieldNames">
            <summary>
            The names of the HTML fields included in the post data.
            </summary>
        </member>
        <member name="M:Hyland.PostData.ContainsName(System.String)">
            <summary>
            Check if the post data contains a certain field.
            </summary>
            <param name="name">The name of the HTML field.</param>
            <returns>True if the field was included in the post data.</returns>
        </member>
        <member name="M:Hyland.PostData.GetValues(System.String)">
            <summary>
            Get all values from the post data for a given HTML field. 
            A field can have multiple values, for example a multi-select list has a value for each selected item.
            </summary>
            <param name="name">The name of the HTML field.</param>
            <returns>All the values for the field.</returns>
        </member>
        <member name="M:Hyland.PostData.GetFirstValue(System.String)">
            <summary>
            Get the first value of a given HTML field.
            A field can have multiple values, for example a multi-select list has a value for each selected item.
            This returns only the first value. To get all of them use <see cref="M:Hyland.PostData.GetValues(System.String)"/>.
            </summary>
            <param name="name">The name of the HTML field.</param>
            <returns>A single value or null if the field is not in the post data.</returns>
        </member>
        <member name="M:Hyland.PostData.RemoveField(System.String)">
            <summary>
            Remove all the values for a HTML field from the post data.
            </summary>
            <param name="name">The name of the HTML field.</param>
        </member>
        <member name="M:Hyland.PostData.Add(System.String,System.String)">
            <summary>
            Add a value for a HTML field to the submitted data.
            </summary>
            <param name="name">The name of the HTML field.</param>
            <param name="value">The value of the HTML field.</param>
        </member>
        <member name="P:Hyland.PostData.IsEmpty">
            <summary>
            Check if the PostData has any values.
            </summary>
        </member>
        <member name="P:Hyland.PostData.FormFields">
            <summary>
            Gets the underlying collection
            </summary>
        </member>
        <member name="T:Hyland.Public.Generic.FilterableServiceObjectList`1">
            <summary>
            Supports filtering.  To use this functionality, simply set the FilterPredicate property.
            </summary>
            <remarks>
            The thread safety code makes modifications to the list wait until filter processing is completed,
            and vice-versa.
            
            I used to have logic that would abort the current filter if another filter was pending so as to
            not waste processing, but the filtering itself is so fast that the short circuit logic never got
            executed, so I removed it for code clarity.
            
            You may be thinking:  "Why bother implementing our own filtering?  I can just use the Filter on
            ICollectionView!"  The reason is twofold:
            1) First, ElementList has implemented IBindingList for a long time, and acquired legacy dependencies 
               on the ListChanged event (INotifyCollectionChanged would be a better choice but was not introduced
               until .NET 3.0).  Microsoft didn't really intend for this interface to be implemented outside ADO.NET,
               and when creating the collection view framework they automatically use a different view,
               BindingListCollectionView, for anything which implements IBindingList.  BindingListCollectionView does 
               not support ICollectionView.Filter.
               [Note:  the IBindingList implementation has been factored out of ElementList and to this class.]
               There are other potential workarounds for this:
               a) Rather than binding to the source (which actually means that the framework instantiates the
                  BindingListCollectionView and binds to that behind the scenes), manually instantiate your own
                  ICollectionView of type ListCollectionView, which does support Filter.  The obvious downside to
                  this is that it requires changing all client code bindings.
               b) Implement the IBindingListView interface in order to provide a string Filter and instruct the
                  ICollectionView that CanCustomFilter is true.  This has a couple drawbacks:  it requires string
                  parsing, and the filter consumer must know the parsing implementation in order to pass it valid
                  expressions.  Moreover, the implementation would likely need to be customized to a specific type
                  of object to filter on, since a generic solution would require reflection, which is inefficient.
            2) ICollectionView.Filter is of type Predicate&lt;object&gt;, which means that unboxing or at least an
               extra n casts are required over this class' FilterPredicate, which is of type Predicate&lt;T&gt;.
            </remarks>
            <typeparam name="T">The type of member this list contains</typeparam>
        </member>
        <member name="T:Hyland.Public.Generic.IBindingFilterableView`1">
            <summary>
            The purpose of this interface is to allow filtering which would not be natively supported
            by ICollectionView due to the IBindingList implementation higher up in this interface
            tree.  In addition, it allows for filtering on a specific type, meaning that each record
            need not be cast from object, which improves overall filter performance.
            </summary>
            <remarks>
            Although this derives from IBindingListView, please note that the filtering mechanism is
            using the FilterPredicate property, not the Filter (string) property.
            </remarks>
            <typeparam name="T">The type on which to filter</typeparam>
        </member>
        <member name="T:Hyland.Public.Generic.ServiceObjectList`1">
            <summary>
            Base class for generic or strongly-typed Lists (ElementList, etc)
            </summary>
        </member>
        <member name="T:Hyland.Public.IServiceClient">
            <summary>
            Client side proxy used to execute a Hyland Services request
            </summary>
            <tocexclude />
        </member>
        <member name="M:Hyland.Public.IServiceClient.Execute(Hyland.Public.IRequestList)">
            <summary>
            The main Execute method
            </summary>
            <param name="requestList">List of requests</param>
            <returns>List of responses</returns>
        </member>
        <member name="M:Hyland.Public.IServiceClient.BeginExecute(Hyland.Public.IRequestList,System.AsyncCallback,System.Object)">
            <summary>
            The asynchronous start of Execute method
            </summary>
            <param name="requestList">List of requests</param>
            <param name="callback">The callback delegate</param>
            <param name="asyncState">Any state information required by the delegate</param>
            <returns>The AsyncResult object</returns>
        </member>
        <member name="M:Hyland.Public.IServiceClient.EndExecute(System.IAsyncResult)">
            <summary>
            The asynchronous end of Execute method
            </summary>
            <param name="asyncResult">The AsyncResult object</param>
            <returns>List of responses</returns>
        </member>
        <member name="T:Hyland.Public.ServiceObject">
            <summary>
            Base class that handles Xml Parsing
            </summary>
        </member>
        <member name="T:Hyland.Public.ServiceObjectList">
            <summary>
            Base class for Lists (RequestList, ResponseList, etc)
            </summary>
            <remarks>
            This class is deprecated.  Please use the version in Hyland.Public.Generic going forward.
            </remarks>
        </member>
        <member name="M:Hyland.Public.Utility.ToElementList(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Takes a System.Collections.Specialized.NameValueCollection and returns an Element.ElementList
            </summary>
            <param name="collection">NameValueCollection to convert</param>
            <returns>Hyland.Types.ElementList represenation of the NameValueCollection</returns>
        </member>
        <member name="M:Hyland.Public.Utility.ConvertBoolToSingleCharacter(System.Boolean)">
            <summary>
            This method takes a Boolean value and based on that value, returns the appropriate single character string equivalent.
            The equivalent may be either a "T" or "F" representing the True or False Boolean values respectively.
            </summary>
            <param name="boolValue">The Boolean value to convert to the single digit string representation.</param>
            <returns>Return a single character string representing the boolean parameter value.</returns>
        </member>
        <member name="M:Hyland.Public.Utility.ConvertToBool(System.String)">
            <summary>
            This takes a string and if that string is capable of being interpreted as a Boolean,
            the corresponding Boolean equivalent is returned from the call. 
            If the string is an unrecognized value, a formatting exception will be thrown.
            String values that are recognized are:
            "true", "false", "t", "f", "1", and "0".
            This checks performed on the string are case-insensitive.
            </summary>
            <param name="s">The string to be converted to a Boolean value.</param>
            <returns>The Boolean value corresponding with the parameter string.</returns>
        </member>
        <member name="M:Hyland.Public.Utility.EpochToDateTime(System.Int64)">
            <summary>
            This does not convert to UTC time.  All time is local.
            </summary>
            <param name="epoch"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Public.Utility.DateTimeToEpoch(System.DateTime)">
            <summary>
            This does not convert to UTC time.  All time is local.
            </summary>
             /// <remarks>
            WARNING: The conversion from a .NET DateTime to epoch time loses precision!!
            The DateTime class has sub-microsecond precision while the epoch has second precision.
            The following simplified example shows the consequences of this conversion:
            DateTime dateTime = DateTime.Now;
            EpochToDateTime(DateTimeToEpoch(dateTime)) != dateTime;
            </remarks>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Hyland.Public.Utility.ParseDateTimeOffset(System.String)">
            <summary>
            Converts a string to a DateTimeOffset using the Invariant culture and assuming UTC if no offset provided.
            Throws an ArgumentException if the string cannot be parsed.
            </summary>
            <param name="dtoString">The string to parse</param>
            <returns>The parsed DateTimeOffset</returns>
        </member>
        <member name="M:Hyland.Public.Utility.RemoveNewLineFromTheString(System.String)">
            <summary>
            Removing carriage return and new-line from the end of a string in c#
            </summary>
            <param name="oldValue">The string to parse</param>
            <returns>Removed CLRF from the string and replcae with single space</returns>
        </member>
        <member name="T:Hyland.Canvas.Automation.ISupportUriSharing">
            <summary>
            Indicates that the class supports using URIs for sharing information
            </summary>
        </member>
        <member name="M:Hyland.Canvas.Automation.UpopAction.GetHash">
            <summary>Used to verify keys in signature.  Once provided, keep the value consistent so as to not break legacy files/links.</summary>
        </member>
        <member name="M:Hyland.Canvas.Automation.UpopUtils.GetNonRandomHashCode(System.String)">
            <summary>
            Generates a non-randomized hash code value, similar to the 32-bit implementation
            of string.GetHashCode() in the .NET Framework. In .NET Standard, string.GetHashCode()
            uses randomization code that generates a different hash code every time the program runs.
            </summary>
            <param name="input"></param>
            <returns>The non-randomized hash code value.</returns>
        </member>
        <member name="M:Hyland.Canvas.Automation.CreateWorkviewObjectAction.#ctor(System.Int64,System.Collections.Generic.List{Hyland.Canvas.Automation.UpopAttributeValue},Hyland.Canvas.Automation.CreationType)">
            <summary>
            Initializes a new upop action to create a WV object.
            </summary>
            <param name="classId">The ID of the class to create.</param>
            <param name="values">The values that this object will be created with.</param>
            <param name="type">How the object will be created (default as 'Active').</param>
        </member>
        <member name="F:Hyland.Canvas.Automation.CreateWorkviewObjectAction.RequiredParameters">
            <summary>
            Returns the collection of required parameters for this action to work.
            </summary>
        </member>
        <member name="F:Hyland.Canvas.Automation.CreateWorkviewObjectAction.KnownParameters">
            <summary>
            Returns the collection of parameters that are known to potentially exist in the URI.
            </summary>
        </member>
        <member name="P:Hyland.Canvas.Automation.CreateWorkviewObjectAction.ClassId">
            <summary>
            The ID of the class to create.
            </summary>
        </member>
        <member name="P:Hyland.Canvas.Automation.CreateWorkviewObjectAction.Values">
            <summary>
            The values that this object will be created with.
            </summary>
        </member>
        <member name="P:Hyland.Canvas.Automation.CreateWorkviewObjectAction.CreationType">
            <summary>
            How the object will be created (default as 'Active').
            </summary>
        </member>
        <member name="M:Hyland.Canvas.Automation.CreateWorkviewObjectAction.ResolveUri">
            <summary>
            Returns the fully resolved URI for creating a WorkView object.
            </summary>
        </member>
        <member name="M:Hyland.Canvas.Automation.CreateWorkviewObjectAction.GetHash">
            <summary>
            Used for Upop signature computation: the return value may be written to a stream that is passed to a cryptographic hash.
            </summary>
            <returns>A string detailing the contents of this object.</returns>
        </member>
        <member name="T:Hyland.Canvas.Automation.CreationType">
            <summary>
            The ways that an object can be created.
            </summary>
        </member>
        <member name="F:Hyland.Canvas.Automation.CreationType.Active">
            <summary>
            The object will be created as active.
            </summary>
        </member>
        <member name="F:Hyland.Canvas.Automation.CreationType.Inactive">
            <summary>
            The object will be created as in-active.
            </summary>
        </member>
        <member name="P:Hyland.Canvas.Automation.UpopAttributeValue.DottedAddress">
            <summary>
            The numeric or named dotted address (i.e. '1001.1002' or 'Manager.Fullname').
            </summary>
        </member>
        <member name="P:Hyland.Canvas.Automation.UpopAttributeValue.Value">
            <summary>
            The value of this attribute.
            </summary>
        </member>
        <member name="T:Hyland.UrlUtility">
            <tocexclude />
        </member>
        <member name="M:Hyland.UrlUtility.UrlDecode(System.String)">
            <summary>
            Performs a URL decode operation on the input string
            </summary>
            <param name="value">The string to decode</param>
            <returns>Returns a URL decoded string</returns>
            <remarks>This method assumes the input string is in <code>Encoding.UTF8</code> and will
            throw an exception if an error is encountered during the decode operation</remarks>
        </member>
        <member name="M:Hyland.UrlUtility.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Performs a URL decode operation on the input string
            </summary>
            <param name="value">The string to decode</param>
            <param name="encoding">The encoding the input string is in</param>
            <returns>Returns a URL decoded string</returns>
        </member>
        <member name="T:DiagnosticInvoker">
            <summary>
            A utility class that allows a caller to write to the diagnostic console via reflection.
            DO NOT USE THIS IF YOU CAN PULL IN THE Hyland.Logging NUGET PACKAGE!!!
            </summary>
        </member>
    </members>
</doc>
